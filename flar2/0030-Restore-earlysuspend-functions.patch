From 7162a57f46b07a41ec0051e3c6800c95e34c2f01 Mon Sep 17 00:00:00 2001
From: flar2 <asegaert@gmail.com>
Date: Mon, 11 Nov 2013 00:40:24 -0500
Subject: [PATCH 030/276] Restore earlysuspend functions This restores the
 deprecated early suspend functionality, I renamed
 everything with a '2' at the end so it wouldn't
 conflict with various code that still has early
 suspend ifdefs.


Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 include/linux/earlysuspend2.h |   56 ++++++++++++
 kernel/power/Kconfig          |    6 ++
 kernel/power/Makefile         |    1 +
 kernel/power/earlysuspend2.c  |  201 +++++++++++++++++++++++++++++++++++++++++
 kernel/power/main.c           |    5 +
 kernel/power/power.h          |    5 +
 6 files changed, 274 insertions(+)
 create mode 100644 include/linux/earlysuspend2.h
 create mode 100644 kernel/power/earlysuspend2.c

diff --git a/include/linux/earlysuspend2.h b/include/linux/earlysuspend2.h
new file mode 100644
index 0000000..79bfe88
--- /dev/null
+++ b/include/linux/earlysuspend2.h
@@ -0,0 +1,56 @@
+/* include/linux/earlysuspend2.h
+ *
+ * Copyright (C) 2007-2008 Google, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _LINUX_EARLYSUSPEND2_H
+#define _LINUX_EARLYSUSPEND2_H
+
+#ifdef CONFIG_HAS_EARLYSUSPEND2
+#include <linux/list.h>
+#endif
+
+/* The early_suspend2 structure defines suspend and resume hooks to be called
+ * when the user visible sleep state of the system changes, and a level to
+ * control the order. They can be used to turn off the screen and input
+ * devices that are not used for wakeup.
+ * Suspend handlers are called in low to high level order, resume handlers are
+ * called in the opposite order. If, when calling register_early_suspend2,
+ * the suspend handlers have already been called without a matching call to the
+ * resume handlers, the suspend handler will be called directly from
+ * register_early_suspend2. This direct call can violate the normal level order.
+ */
+enum {
+	EARLY_SUSPEND2_LEVEL_BLANK_SCREEN = 50,
+	EARLY_SUSPEND2_LEVEL_STOP_DRAWING = 100,
+	EARLY_SUSPEND2_LEVEL_DISABLE_FB = 150,
+};
+struct early_suspend2 {
+#ifdef CONFIG_HAS_EARLYSUSPEND2
+	struct list_head link;
+	int level;
+	void (*suspend)(struct early_suspend2 *h);
+	void (*resume)(struct early_suspend2 *h);
+#endif
+};
+
+#ifdef CONFIG_HAS_EARLYSUSPEND2
+void register_early_suspend2(struct early_suspend2 *handler);
+void unregister_early_suspend2(struct early_suspend2 *handler);
+#else
+#define register_early_suspend2(handler) do { } while (0)
+#define unregister_early_suspend2(handler) do { } while (0)
+#endif
+
+#endif
+
diff --git a/kernel/power/Kconfig b/kernel/power/Kconfig
index 904fc66..b8befd9 100644
--- a/kernel/power/Kconfig
+++ b/kernel/power/Kconfig
@@ -26,6 +26,12 @@ config WAKELOCK
 	bool
 	default y
 
+config HAS_EARLYSUSPEND2
+	bool "Deprecated early suspend functions"
+	default y
+	help
+	  This restores the deprecated early suspend functions.
+
 config HIBERNATE_CALLBACKS
 	bool
 
diff --git a/kernel/power/Makefile b/kernel/power/Makefile
index 29472bf..8839ab9 100644
--- a/kernel/power/Makefile
+++ b/kernel/power/Makefile
@@ -11,5 +11,6 @@ obj-$(CONFIG_HIBERNATION)	+= hibernate.o snapshot.o swap.o user.o \
 				   block_io.o
 obj-$(CONFIG_PM_AUTOSLEEP)	+= autosleep.o
 obj-$(CONFIG_PM_WAKELOCKS)	+= wakelock.o
+obj-$(CONFIG_HAS_EARLYSUSPEND2)	+= earlysuspend2.o
 
 obj-$(CONFIG_MAGIC_SYSRQ)	+= poweroff.o
diff --git a/kernel/power/earlysuspend2.c b/kernel/power/earlysuspend2.c
new file mode 100644
index 0000000..e1a89f9
--- /dev/null
+++ b/kernel/power/earlysuspend2.c
@@ -0,0 +1,201 @@
+/* kernel/power/earlysuspend2.c
+ *
+ * Copyright (C) 2005-2008 Google, Inc.
+ *
+ * Modified by flar2 <asegaert@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/earlysuspend2.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/rtc.h>
+#include <linux/workqueue.h>
+
+#include "power.h"
+
+enum {
+	DEBUG_USER_STATE = 1U << 0,
+	DEBUG_SUSPEND = 1U << 2,
+	DEBUG_VERBOSE = 1U << 3,
+};
+static int debug_mask = DEBUG_USER_STATE;
+module_param_named(debug_mask, debug_mask, int, S_IRUGO | S_IWUSR | S_IWGRP);
+
+static DEFINE_MUTEX(early_suspend2_lock);
+static LIST_HEAD(early_suspend2_handlers);
+static void early_suspend2(struct work_struct *work);
+static void late_resume2(struct work_struct *work);
+static DECLARE_WORK(early_suspend2_work, early_suspend2);
+static DECLARE_WORK(late_resume2_work, late_resume2);
+static DEFINE_SPINLOCK(state_lock);
+enum {
+	SUSPEND_REQUESTED = 0x1,
+	SUSPENDED = 0x2,
+	SUSPEND_REQUESTED_AND_SUSPENDED = SUSPEND_REQUESTED | SUSPENDED,
+};
+static int state;
+suspend_state_t requested_suspend_state;
+struct workqueue_struct *suspend_work_queue;
+
+void register_early_suspend2(struct early_suspend2 *handler)
+{
+	struct list_head *pos;
+
+	mutex_lock(&early_suspend2_lock);
+	list_for_each(pos, &early_suspend2_handlers) {
+		struct early_suspend2 *e;
+		e = list_entry(pos, struct early_suspend2, link);
+		if (e->level > handler->level)
+			break;
+	}
+	list_add_tail(&handler->link, pos);
+	if ((state & SUSPENDED) && handler->suspend)
+		handler->suspend(handler);
+	mutex_unlock(&early_suspend2_lock);
+}
+EXPORT_SYMBOL(register_early_suspend2);
+
+void unregister_early_suspend2(struct early_suspend2 *handler)
+{
+	mutex_lock(&early_suspend2_lock);
+	list_del(&handler->link);
+	mutex_unlock(&early_suspend2_lock);
+}
+EXPORT_SYMBOL(unregister_early_suspend2);
+
+static void early_suspend2(struct work_struct *work)
+{
+	struct early_suspend2 *pos;
+	unsigned long irqflags;
+	int abort = 0;
+
+	mutex_lock(&early_suspend2_lock);
+	spin_lock_irqsave(&state_lock, irqflags);
+
+	if (state == SUSPEND_REQUESTED)
+		state |= SUSPENDED;
+	else
+		abort = 1;
+	spin_unlock_irqrestore(&state_lock, irqflags);
+
+	if (abort) {
+		if (debug_mask & DEBUG_SUSPEND)
+			pr_info("early_suspend2: abort, state %d\n", state);
+		mutex_unlock(&early_suspend2_lock);
+		return;
+	}
+
+	if (debug_mask & DEBUG_SUSPEND)
+		pr_info("early_suspend2: call handlers\n");
+	list_for_each_entry(pos, &early_suspend2_handlers, link) {
+		if (pos->suspend != NULL) {
+			if (debug_mask & DEBUG_VERBOSE)
+				pr_info("early_suspend2: calling %pf\n", pos->suspend);
+			pos->suspend(pos);
+		}
+	}
+	mutex_unlock(&early_suspend2_lock);
+}
+
+static void late_resume2(struct work_struct *work)
+{
+	struct early_suspend2 *pos;
+	unsigned long irqflags;
+	int abort = 0;
+
+	mutex_lock(&early_suspend2_lock);
+	spin_lock_irqsave(&state_lock, irqflags);
+
+	if (state == SUSPENDED)
+		state &= ~SUSPENDED;
+	else
+		abort = 1;
+	spin_unlock_irqrestore(&state_lock, irqflags);
+
+	if (abort) {
+		if (debug_mask & DEBUG_SUSPEND)
+			pr_info("late_resume2: abort, state %d\n", state);
+		goto abort;
+	}
+	if (debug_mask & DEBUG_SUSPEND)
+		pr_info("late_resume2: call handlers\n");
+	list_for_each_entry_reverse(pos, &early_suspend2_handlers, link) {
+		if (pos->resume != NULL) {
+			if (debug_mask & DEBUG_VERBOSE)
+				pr_info("late_resume2: calling %pf\n", pos->resume);
+
+			pos->resume(pos);
+		}
+	}
+	if (debug_mask & DEBUG_SUSPEND)
+		pr_info("late_resume2: done\n");
+abort:
+	mutex_unlock(&early_suspend2_lock);
+}
+
+void request_suspend_state(suspend_state_t new_state)
+{
+	unsigned long irqflags;
+	int old_sleep;
+
+	spin_lock_irqsave(&state_lock, irqflags);
+	old_sleep = state & SUSPEND_REQUESTED;
+
+	if (debug_mask & DEBUG_SUSPEND) {
+		struct timespec ts;
+		struct rtc_time tm;
+		getnstimeofday(&ts);
+		rtc_time_to_tm(ts.tv_sec, &tm);
+		pr_info("request_suspend_state: %s (%d->%d) at %lld "
+			"(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)\n",
+			new_state != PM_SUSPEND_ON ? "sleep" : "wakeup",
+			requested_suspend_state, new_state,
+			ktime_to_ns(ktime_get()),
+			tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
+			tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);
+	}
+
+	if (!old_sleep && new_state != PM_SUSPEND_ON) {
+		state |= SUSPEND_REQUESTED;
+		queue_work(suspend_work_queue, &early_suspend2_work);
+	} else if (old_sleep && new_state == PM_SUSPEND_ON) {
+		state &= ~SUSPEND_REQUESTED;
+		queue_work(suspend_work_queue, &late_resume2_work);
+	}
+
+	requested_suspend_state = new_state;
+	spin_unlock_irqrestore(&state_lock, irqflags);
+}
+
+static int __init early_suspend2_init(void)
+{
+	suspend_work_queue = create_singlethread_workqueue("e-suspend");
+
+	if (suspend_work_queue == NULL) {
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+
+static void __exit early_suspend2_exit(void)
+{
+	destroy_workqueue(suspend_work_queue);
+}
+
+
+core_initcall(early_suspend2_init);
+module_exit(early_suspend2_exit);
+
+MODULE_LICENSE("GPL v2");
diff --git a/kernel/power/main.c b/kernel/power/main.c
index fcde89a..31f7958 100644
--- a/kernel/power/main.c
+++ b/kernel/power/main.c
@@ -510,6 +510,11 @@ static ssize_t autosleep_store(struct kobject *kobj,
 	suspend_state_t state = decode_state(buf, n);
 	int error;
 
+#ifdef CONFIG_HAS_EARLYSUSPEND2
+	if (state == PM_SUSPEND_ON || valid_state(state)) {
+		request_suspend_state(state);
+	}	
+#endif
 	if (state == PM_SUSPEND_ON
 	    && strcmp(buf, "off") && strcmp(buf, "off\n"))
 		return -EINVAL;
diff --git a/kernel/power/power.h b/kernel/power/power.h
index b0bd4be..453f225 100644
--- a/kernel/power/power.h
+++ b/kernel/power/power.h
@@ -291,3 +291,8 @@ extern int pm_wake_lock(const char *buf);
 extern int pm_wake_unlock(const char *buf);
 
 #endif /* !CONFIG_PM_WAKELOCKS */
+
+#ifdef CONFIG_HAS_EARLYSUSPEND2
+/* kernel/power/earlysuspend2.c */
+void request_suspend_state(suspend_state_t state);
+#endif
-- 
1.7.9.5

