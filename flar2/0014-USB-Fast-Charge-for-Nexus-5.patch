From d6a243d5db73a61afe36a0a1dc481f332f755ec9 Mon Sep 17 00:00:00 2001
From: flar2 <asegaert@gmail.com>
Date: Sat, 9 Nov 2013 00:01:12 -0500
Subject: [PATCH 014/276] USB Fast Charge for Nexus 5

Increases input current limit to 900mA when charging via USB.
This patch does not force AC mode because this device is capable
of a charging at a much higher current limit than some USB ports
are able to deliver.

Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 arch/arm/mach-msm/Kconfig       |    7 +++
 arch/arm/mach-msm/Makefile      |    2 +
 arch/arm/mach-msm/fastchg.c     |  104 +++++++++++++++++++++++++++++++++++++++
 drivers/power/bq24192_charger.c |   22 +++++++++
 include/linux/fastchg.h         |   23 +++++++++
 5 files changed, 158 insertions(+)
 create mode 100644 arch/arm/mach-msm/fastchg.c
 create mode 100644 include/linux/fastchg.h

diff --git a/arch/arm/mach-msm/Kconfig b/arch/arm/mach-msm/Kconfig
index ba5a33c..add18e5 100644
--- a/arch/arm/mach-msm/Kconfig
+++ b/arch/arm/mach-msm/Kconfig
@@ -3016,6 +3016,13 @@ config MSM_CPU_PWRCTL
 	  stand alone power collapse operation. Selecting this option
 	  ensures that they are always off.
 
+config FORCE_FAST_CHARGE
+	bool "Increase input current limit to 900mA when charging via USB"
+	default y
+	help
+	  A simple sysfs interface to increase input current limit to
+	  900mA when charging via USB.
+
 config MSM_UARTDM_Core_v14
 	bool "Use MSM BLSP based HSUART Core v1.4"
 	depends on SERIAL_MSM_HS
diff --git a/arch/arm/mach-msm/Makefile b/arch/arm/mach-msm/Makefile
index 9cc84d2..afe158b 100644
--- a/arch/arm/mach-msm/Makefile
+++ b/arch/arm/mach-msm/Makefile
@@ -434,3 +434,5 @@ obj-$(CONFIG_CPU_FREQ_MSM) += cpufreq.o
 
 obj-$(CONFIG_WALL_CLK) += wallclk.o
 obj-$(CONFIG_WALL_CLK_SYSFS) += wallclk_sysfs.o
+
+obj-$(CONFIG_FORCE_FAST_CHARGE) += fastchg.o
diff --git a/arch/arm/mach-msm/fastchg.c b/arch/arm/mach-msm/fastchg.c
new file mode 100644
index 0000000..d0dd88f
--- /dev/null
+++ b/arch/arm/mach-msm/fastchg.c
@@ -0,0 +1,104 @@
+/*
+ * Author: Chad Froebel <chadfroebel@gmail.com>
+ *
+ * Port to Nexus 5 : flar2 <asegaert@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/*
+ * Possible values for "force_fast_charge" are :
+ *
+ *   0 - disabled (default)
+ *   1 - increase charge current limit to 900mA
+*/
+
+#include <linux/kobject.h>
+#include <linux/sysfs.h>
+#include <linux/fastchg.h>
+#include <linux/string.h>
+
+int force_fast_charge = 0;
+static int __init get_fastcharge_opt(char *ffc)
+{
+	if (strcmp(ffc, "0") == 0) {
+		force_fast_charge = 0;
+	} else if (strcmp(ffc, "1") == 0) {
+		force_fast_charge = 1;
+	} else {
+		force_fast_charge = 0;
+	}
+	return 1;
+}
+
+__setup("ffc=", get_fastcharge_opt);
+
+static ssize_t force_fast_charge_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	size_t count = 0;
+	count += sprintf(buf, "%d\n", force_fast_charge);
+	return count;
+}
+
+static ssize_t force_fast_charge_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	if (buf[0] >= '0' && buf[0] <= '1' && buf[1] == '\n')
+                if (force_fast_charge != buf[0] - '0')
+		        force_fast_charge = buf[0] - '0';
+
+	return count;
+}
+
+static struct kobj_attribute force_fast_charge_attribute =
+__ATTR(force_fast_charge, 0666, force_fast_charge_show, force_fast_charge_store);
+
+static struct attribute *force_fast_charge_attrs[] = {
+&force_fast_charge_attribute.attr,
+NULL,
+};
+
+static struct attribute_group force_fast_charge_attr_group = {
+.attrs = force_fast_charge_attrs,
+};
+
+/* Initialize fast charge sysfs folder */
+static struct kobject *force_fast_charge_kobj;
+
+int force_fast_charge_init(void)
+{
+	int force_fast_charge_retval;
+
+//	force_fast_charge = FAST_CHARGE_DISABLED; /* Forced fast charge disabled by default */
+
+	force_fast_charge_kobj = kobject_create_and_add("fast_charge", kernel_kobj);
+	if (!force_fast_charge_kobj) {
+			return -ENOMEM;
+	}
+
+	force_fast_charge_retval = sysfs_create_group(force_fast_charge_kobj, &force_fast_charge_attr_group);
+
+	if (force_fast_charge_retval)
+		kobject_put(force_fast_charge_kobj);
+
+	if (force_fast_charge_retval)
+		kobject_put(force_fast_charge_kobj);
+
+	return (force_fast_charge_retval);
+}
+
+void force_fast_charge_exit(void)
+{
+	kobject_put(force_fast_charge_kobj);
+}
+
+module_init(force_fast_charge_init);
+module_exit(force_fast_charge_exit);
+
diff --git a/drivers/power/bq24192_charger.c b/drivers/power/bq24192_charger.c
index 7fa526f..32e1e0c 100644
--- a/drivers/power/bq24192_charger.c
+++ b/drivers/power/bq24192_charger.c
@@ -31,6 +31,11 @@
 #include <linux/of_gpio.h>
 #include <linux/qpnp/qpnp-adc.h>
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+#include <linux/fastchg.h>
+#define USB_FASTCHG_LOAD 900 /* uA */
+#endif
+
 /* Register definitions */
 #define INPUT_SRC_CONT_REG              0X00
 #define PWR_ON_CONF_REG                 0X01
@@ -982,10 +987,27 @@ static void bq24192_external_power_changed(struct power_supply *psy)
 		chip->usb_psy->get_property(chip->usb_psy,
 				  POWER_SUPPLY_PROP_CURRENT_MAX, &ret);
 		bq24192_set_input_vin_limit(chip, chip->vin_limit_mv);
+
+#ifdef CONFIG_FORCE_FAST_CHARGE
+		if (force_fast_charge)
+			bq24192_set_input_i_limit(chip, USB_FASTCHG_LOAD);
+		else
+			bq24192_set_input_i_limit(chip, ret.intval / 1000);
+#else
 		bq24192_set_input_i_limit(chip, ret.intval / 1000);
+#endif
 		bq24192_set_ibat_max(chip, USB_MAX_IBAT_MA);
+#ifdef CONFIG_FORCE_FAST_CHARGE
+		if (force_fast_charge)
+			pr_info("usb is online and fast charge enabled! i_limit = %d v_limit = %d\n",
+					USB_FASTCHG_LOAD, chip->vin_limit_mv);
+		else
+			pr_info("usb is online! i_limit = %d v_limit = %d\n",
+					ret.intval / 1000, chip->vin_limit_mv);
+#else
 		pr_info("usb is online! i_limit = %d v_limit = %d\n",
 				ret.intval / 1000, chip->vin_limit_mv);
+#endif
 	} else if (chip->ac_online &&
 			bq24192_is_charger_present(chip)) {
 		chip->icl_first = true;
diff --git a/include/linux/fastchg.h b/include/linux/fastchg.h
new file mode 100644
index 0000000..0570e03
--- /dev/null
+++ b/include/linux/fastchg.h
@@ -0,0 +1,23 @@
+/*
+ * Author: Chad Froebel <chadfroebel@gmail.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _LINUX_FASTCHG_H
+#define _LINUX_FASTCHG_H
+
+extern int force_fast_charge;
+
+#define FAST_CHARGE_DISABLED 0	/* default */
+#define FAST_CHARGE_FORCE_AC 1
+
+#endif
-- 
1.7.9.5

