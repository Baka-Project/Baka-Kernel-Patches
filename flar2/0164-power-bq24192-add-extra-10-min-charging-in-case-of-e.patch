From d697a04a4c4cd953c5af60ae9aa74288a71fd33b Mon Sep 17 00:00:00 2001
From: "choongryeol.lee" <choongryeol.lee@lge.com>
Date: Sun, 13 Oct 2013 23:10:47 -0700
Subject: [PATCH 164/276] power: bq24192: add extra 10 min charging in case of
 early EOC

It is occasionally observed that the hardware EOC(End of charge)
interrupt occur too early if the current from input source is not
enough. To avoid this symptom, add extra 10 min charging with
disabling hardware EOC feature when early charge done is detected.

Change-Id: I8a72b273d984927f28cace5455f9f3d6fd47f6dd
Signed-off-by: choongryeol.lee <choongryeol.lee@lge.com>
Signed-off-by: flar2 <asegaert@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/power/bq24192_charger.c |   43 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 42 insertions(+), 1 deletion(-)

diff --git a/drivers/power/bq24192_charger.c b/drivers/power/bq24192_charger.c
index 32e1e0c..bda57eb 100644
--- a/drivers/power/bq24192_charger.c
+++ b/drivers/power/bq24192_charger.c
@@ -94,10 +94,12 @@ struct bq24192_chip {
 	struct delayed_work  vbat_work;
 	struct delayed_work  input_limit_work;
 	struct delayed_work  therm_work;
+	struct delayed_work  extra_chg_work;
 	struct dentry  *dent;
 	struct wake_lock  chg_wake_lock;
 	struct wake_lock  icl_wake_lock;
 	struct wake_lock  irq_wake_lock;
+	struct wake_lock  extra_chg_lock;
 	struct power_supply  *usb_psy;
 	struct power_supply  ac_psy;
 	struct power_supply  *wlc_psy;
@@ -632,6 +634,24 @@ static int bq24192_set_vclamp_mv(struct bq24192_chip *chip, int mv)
 			IR_COMP_VCLAMP_MASK, reg_val);
 }
 
+#define EN_CHG_TERM_SHIFT  7
+static int bq24192_enable_chg_term(struct bq24192_chip *chip, bool enable)
+{
+	int ret;
+	u8 val = (u8)(!!enable << EN_CHG_TERM_SHIFT);
+
+	ret = bq24192_masked_write(chip->client, CHARGE_TERM_TIMER_CONT_REG,
+			EN_CHG_TERM_MASK, val);
+	if (ret) {
+		pr_err("failed to %s chg termination\n",
+				enable? "enable":"disable");
+		return ret;
+	}
+
+	return 0;
+}
+
+#define EXTRA_CHG_TIME_MS 600000
 static void bq24192_irq_worker(struct work_struct *work)
 {
 	struct bq24192_chip *chip =
@@ -666,7 +686,11 @@ static void bq24192_irq_worker(struct work_struct *work)
 	if (chg_done) {
 		if (chip->batt_health != POWER_SUPPLY_HEALTH_OVERHEAT &&
 				bq24192_get_soc_from_batt_psy(chip) < 100) {
+			wake_lock(&chip->extra_chg_lock);
+			bq24192_enable_chg_term(chip, false);
 			bq24192_trigger_recharge(chip);
+			schedule_delayed_work(&chip->extra_chg_work,
+					msecs_to_jiffies(EXTRA_CHG_TIME_MS));
 		} else {
 			power_supply_changed(&chip->ac_psy);
 			pr_info("charge done!!\n");
@@ -684,9 +708,12 @@ static void bq24192_irq_worker(struct work_struct *work)
 				ext_pwr, wlc_pwr);
 		if (wake_lock_active(&chip->icl_wake_lock))
 			wake_unlock(&chip->icl_wake_lock);
-
+		if (wake_lock_active(&chip->extra_chg_lock))
+			wake_unlock(&chip->extra_chg_lock);
 		cancel_delayed_work_sync(&chip->input_limit_work);
 		cancel_delayed_work_sync(&chip->therm_work);
+		cancel_delayed_work_sync(&chip->extra_chg_work);
+		bq24192_enable_chg_term(chip, true);
 		bq24192_step_down_detect_disable(chip);
 		chip->saved_ibat_ma = 0;
 		chip->set_chg_current_ma = chip->chg_current_ma;
@@ -714,6 +741,15 @@ irq_worker_exit:
 	wake_lock_timeout(&chip->irq_wake_lock, 2*HZ);
 }
 
+static void bq24192_extra_chg_work(struct work_struct *work)
+{
+	struct bq24192_chip *chip =
+		container_of(work, struct bq24192_chip, extra_chg_work.work);
+
+	bq24192_enable_chg_term(chip, true);
+	wake_unlock(&chip->extra_chg_lock);
+}
+
 #ifdef CONFIG_THERMAL_QPNP_ADC_TM
 #define DISABLE_HIGH_THR 6000000
 #define DISABLE_LOW_THR 0
@@ -1670,10 +1706,13 @@ static int bq24192_probe(struct i2c_client *client,
 		       WAKE_LOCK_SUSPEND, "icl_wake_lock");
 	wake_lock_init(&chip->irq_wake_lock,
 			WAKE_LOCK_SUSPEND, BQ24192_NAME "irq");
+	wake_lock_init(&chip->extra_chg_lock,
+			WAKE_LOCK_SUSPEND, "extra_chg_lock");
 
 	INIT_DELAYED_WORK(&chip->vbat_work, bq24192_vbat_work);
 	INIT_DELAYED_WORK(&chip->input_limit_work, bq24192_input_limit_worker);
 	INIT_DELAYED_WORK(&chip->therm_work, bq24192_therm_mitigation_work);
+	INIT_DELAYED_WORK(&chip->extra_chg_work, bq24192_extra_chg_work);
 	INIT_WORK(&chip->irq_work, bq24192_irq_worker);
 	if (chip->irq) {
 		ret = request_irq(chip->irq, bq24192_irq,
@@ -1703,6 +1742,7 @@ err_req_irq:
 	wake_lock_destroy(&chip->chg_wake_lock);
 	wake_lock_destroy(&chip->icl_wake_lock);
 	wake_lock_destroy(&chip->irq_wake_lock);
+	wake_lock_destroy(&chip->extra_chg_lock);
 	if (chip->dent)
 		debugfs_remove_recursive(chip->dent);
 err_debugfs:
@@ -1729,6 +1769,7 @@ static int bq24192_remove(struct i2c_client *client)
 	wake_lock_destroy(&chip->chg_wake_lock);
 	wake_lock_destroy(&chip->icl_wake_lock);
 	wake_lock_destroy(&chip->irq_wake_lock);
+	wake_lock_destroy(&chip->extra_chg_lock);
 
 	if (chip->dent)
 		debugfs_remove_recursive(chip->dent);
-- 
1.7.9.5

