From 5f8f955ff7613aafaf168074728c2c2d436a62da Mon Sep 17 00:00:00 2001
From: flar2 <asegaert@gmail.com>
Date: Sat, 28 Dec 2013 09:43:05 -0500
Subject: [PATCH 242/276] Revert "fs/sync.c: add async_fsync"

This reverts commit 44da06bfa512c7403455986409ef1afe14131436.

Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/mmc/core/mmc.c |    8 ----
 fs/Kconfig             |    5 ---
 fs/namespace.c         |    7 ----
 fs/sync.c              |  108 ------------------------------------------------
 include/linux/fs.h     |    4 --
 5 files changed, 132 deletions(-)

diff --git a/drivers/mmc/core/mmc.c b/drivers/mmc/core/mmc.c
index 6433ff0..066bdd1 100644
--- a/drivers/mmc/core/mmc.c
+++ b/drivers/mmc/core/mmc.c
@@ -58,14 +58,6 @@ static const unsigned int tacc_mant[] = {
 		__res & __mask;						\
 	})
 
-#ifdef CONFIG_ASYNC_FSYNC
-static unsigned int perf_degr;
-int emmc_perf_degr(void)
-{
-	return perf_degr;
-}
-#endif
-
 /*
  * Given the decoded CSD structure, decode the raw CID to our CID structure.
  */
diff --git a/fs/Kconfig b/fs/Kconfig
index 9ca3944..2b8819d 100644
--- a/fs/Kconfig
+++ b/fs/Kconfig
@@ -281,11 +281,6 @@ endif # NETWORK_FILESYSTEMS
 source "fs/nls/Kconfig"
 source "fs/dlm/Kconfig"
 
-config ASYNC_FSYNC
-	bool
-	string "asynchronous fsync"
-	default y
-
 config RESTRICT_ROOTFS_SLAVE
 	bool "Android: Restrict rootfs slave mountspace to /storage"
 	help
diff --git a/fs/namespace.c b/fs/namespace.c
index a602f14..701398f 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1868,13 +1868,6 @@ static int do_new_mount(struct path *path, char *type, int flags,
 	err = do_add_mount(real_mount(mnt), path, mnt_flags);
 	if (err)
 		mntput(mnt);
-#ifdef CONFIG_ASYNC_FSYNC
-	if (!err && ((!strcmp(type, "ext4") &&
-	    !strcmp(path->dentry->d_name.name, "data")) ||
-	    (!strcmp(type, "fuse") &&
-	    !strcmp(path->dentry->d_name.name, "emulated"))))
-                mnt->mnt_sb->fsync_flags |= FLAG_ASYNC_FSYNC;
-#endif
 	return err;
 }
 
diff --git a/fs/sync.c b/fs/sync.c
index 4ceda46..11e3d1c 100644
--- a/fs/sync.c
+++ b/fs/sync.c
@@ -17,22 +17,9 @@
 #include <linux/backing-dev.h>
 #include "internal.h"
 
-#ifdef CONFIG_ASYNC_FSYNC
-#include <linux/statfs.h>
-#endif
-
 #define VALID_FLAGS (SYNC_FILE_RANGE_WAIT_BEFORE|SYNC_FILE_RANGE_WRITE| \
 			SYNC_FILE_RANGE_WAIT_AFTER)
 
-#ifdef CONFIG_ASYNC_FSYNC
-#define FLAG_ASYNC_FSYNC        0x1
-static struct workqueue_struct *fsync_workqueue = NULL;
-struct fsync_work {
-	struct work_struct work;
-	char pathname[256];
-};
-#endif
-
 /*
  * Do the filesystem syncing work. For simple filesystems
  * writeback_inodes_sb(sb) just dirties buffers with inodes so we have to
@@ -197,111 +184,16 @@ int vfs_fsync(struct file *file, int datasync)
 }
 EXPORT_SYMBOL(vfs_fsync);
 
-#ifdef CONFIG_ASYNC_FSYNC
-extern int emmc_perf_degr(void);
-#define LOW_STORAGE_THRESHOLD   786432
-int async_fsync(struct file *file, int fd)
-{
-	struct inode *inode = file->f_mapping->host;
-	struct super_block *sb = inode->i_sb;
-	struct kstatfs st;
-
-	if ((sb->fsync_flags & FLAG_ASYNC_FSYNC) == 0)
-		return 0;
-
-	if (!emmc_perf_degr())
-		return 0;
-
-	if (fd_statfs(fd, &st))
-		return 0;
-
-	if (st.f_bfree > LOW_STORAGE_THRESHOLD)
-		return 0;
-
-	return 1;
-}
-
-static int do_async_fsync(char *pathname)
-{
-	struct file *file;
-	int ret;
-	file = filp_open(pathname, O_RDWR, 0);
-	if (IS_ERR(file)) {
-		pr_debug("%s: can't open %s\n", __func__, pathname);
-		return -EBADF;
-	}
-	ret = vfs_fsync(file, 0);
-
-	filp_close(file, NULL);
-	return ret;
-}
-
-static void do_afsync_work(struct work_struct *work)
-{
-	struct fsync_work *fwork =
-		container_of(work, struct fsync_work, work);
-	int ret = -EBADF;
-
-	pr_debug("afsync: %s\n", fwork->pathname);
-	ret = do_async_fsync(fwork->pathname);
-	if (ret != 0 && ret != -EBADF)
-		pr_info("afsync return %d\n", ret);
-	else
-		pr_debug("afsync: %s done\n", fwork->pathname);
-	kfree(fwork);
-}
-#endif
-
 static int do_fsync(unsigned int fd, int datasync)
 {
 	struct file *file;
 	int ret = -EBADF;
 	int fput_needed;
-#ifdef CONFIG_ASYNC_FSYNC
-	struct fsync_work *fwork;
-#endif
 
 	file = fget_light(fd, &fput_needed);
 	if (file) {
-		ktime_t fsync_t, fsync_diff;
-		char pathname[256], *path;
-		path = d_path(&(file->f_path), pathname, sizeof(pathname));
-		if (IS_ERR(path))
-			path = "(unknown)";
-#ifdef CONFIG_ASYNC_FSYNC
-		else if (async_fsync(file, fd)) {
-			if (!fsync_workqueue)
-				fsync_workqueue =
-					create_singlethread_workqueue("fsync");
-			if (!fsync_workqueue)
-				goto no_async;
-
-			if (IS_ERR(path))
-				goto no_async;
-
-			fwork = kmalloc(sizeof(*fwork), GFP_KERNEL);
-			if (fwork) {
-				strncpy(fwork->pathname, path,
-					sizeof(fwork->pathname) - 1);
-				INIT_WORK(&fwork->work, do_afsync_work);
-				queue_work(fsync_workqueue, &fwork->work);
-				fput(file);
-				return 0;
-			}
-		}
-no_async:
-#endif
-		fsync_t = ktime_get();
 		ret = vfs_fsync(file, datasync);
 		fput_light(file, fput_needed);
-		fsync_diff = ktime_sub(ktime_get(), fsync_t);
-		if (ktime_to_ms(fsync_diff) >= 5000) {
-                        pr_info("VFS: %s pid:%d(%s)(parent:%d/%s)\
-				takes %lld ms to fsync %s.\n", __func__,
-				current->pid, current->comm,
-				current->parent->pid, current->parent->comm,
-				ktime_to_ms(fsync_diff), path);
-		}
 	}
 	return ret;
 }
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 017c3a6..093f0b8 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1508,10 +1508,6 @@ struct super_block {
 
 	/* Being remounted read-only */
 	int s_readonly_remount;
-#ifdef CONFIG_ASYNC_FSYNC
-#define FLAG_ASYNC_FSYNC        0x1
-	unsigned int fsync_flags;
-#endif
 };
 
 /* superblock cache pruning functions */
-- 
1.7.9.5

