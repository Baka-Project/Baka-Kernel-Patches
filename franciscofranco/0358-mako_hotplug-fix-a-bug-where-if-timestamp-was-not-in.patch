From b620bc6163434475bb8ab97cbfa896517d06c7c5 Mon Sep 17 00:00:00 2001
From: franciscofranco <franciscofranco.1990@gmail.com>
Date: Mon, 16 Dec 2013 01:13:36 +0000
Subject: [PATCH 358/517] mako_hotplug: fix a bug where if timestamp was not
 initialized with jiffies then the cpu_smash() would
 not offline cpus until jiffies caught up. Also use
 the stantard API to timer check if its after
 jiffies or not.

Signed-off-by: franciscofranco <franciscofranco.1990@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 arch/arm/kernel/mako_hotplug.c |   36 +++++++++++++++++++-----------------
 1 file changed, 19 insertions(+), 17 deletions(-)

diff --git a/arch/arm/kernel/mako_hotplug.c b/arch/arm/kernel/mako_hotplug.c
index e04deee..b5da1bd 100644
--- a/arch/arm/kernel/mako_hotplug.c
+++ b/arch/arm/kernel/mako_hotplug.c
@@ -24,6 +24,7 @@
 #include <linux/hotplug.h>
 #include <linux/input.h>
 #include <linux/lcd_notify.h>
+#include <linux/jiffies.h>
 
 #include <mach/cpufreq.h>
 
@@ -34,10 +35,7 @@
 #define TIMER HZ
 #define GPU_BUSY_THRESHOLD 60
 
-/*
- * 1000ms = 1 second
- */
-#define MIN_TIME_CPU_ONLINE_MS 2000
+#define MIN_TIME_CPU_ONLINE HZ
 
 static struct cpu_stats
 {
@@ -45,7 +43,7 @@ static struct cpu_stats
     unsigned int suspend_frequency;
     unsigned int cores_on_touch;
     unsigned int counter[2];
-	u64 timestamp[2];
+	unsigned long timestamp[2];
 	struct notifier_block notif;
 	bool gpu_busy_quad_mode;
 	bool first_boot;
@@ -54,7 +52,6 @@ static struct cpu_stats
     .suspend_frequency = DEFAULT_SUSPEND_FREQ,
     .cores_on_touch = DEFAULT_CORES_ON_TOUCH,
     .counter = {0},
-	.timestamp = {0},
 	.gpu_busy_quad_mode = false,
 	.first_boot = true,
 };
@@ -132,17 +129,17 @@ static void cpu_smash(unsigned int cpu)
 	 * 1sec to avoid consecutive ups and downs if the load is varying
 	 * closer to the threshold point.
 	 */
-	if (jiffies + msecs_to_jiffies(MIN_TIME_CPU_ONLINE_MS)
-		> stats.timestamp[cpu - 2])
-	{
-		cpu_down(cpu);
-		stats.counter[cpu - 2] = 0;
-	}
+	if (time_is_after_jiffies(stats.timestamp[cpu - 2] + MIN_TIME_CPU_ONLINE))
+		return;
+
+	cpu_down(cpu);
+	stats.counter[cpu - 2] = 0;
 }
 
 static void __ref decide_hotplug_func(struct work_struct *work)
 {
     int cpu;
+	int cpu_nr = 2;
 	unsigned int cur_load;
 	//int i;
 
@@ -170,8 +167,8 @@ static void __ref decide_hotplug_func(struct work_struct *work)
 			if (likely(stats.counter[cpu] < HIGH_LOAD_COUNTER))    
 				stats.counter[cpu] += 2;
 
-			if (cpu_is_offline(cpu + 2) && stats.counter[cpu] > 10)
-				cpu_revive(cpu + 2);
+			if (cpu_is_offline(cpu_nr) && stats.counter[cpu] >= 10)
+				cpu_revive(cpu_nr);
 		}
 
 		else
@@ -179,10 +176,12 @@ static void __ref decide_hotplug_func(struct work_struct *work)
 			if (stats.counter[cpu])
 				--stats.counter[cpu];
 
-			if (cpu_online(cpu + 2) && stats.counter[cpu] < 10)
-				cpu_smash(cpu + 2);
+			if (cpu_online(cpu_nr) && stats.counter[cpu] < 10)
+				cpu_smash(cpu_nr);
 		}
 
+		cpu_nr++;
+
 		if (cpu)
 			break;
 	}
@@ -313,7 +312,10 @@ int __init mako_hotplug_init(void)
 	stats.notif.notifier_call = lcd_notifier_callback;
 	if (lcd_register_client(&stats.notif))
 		return -EINVAL;
-    
+
+	stats.timestamp[0] = jiffies;
+	stats.timestamp[1] = jiffies;    
+
 	INIT_WORK(&suspend, hotplug_suspend);
 	INIT_WORK(&resume, hotplug_resume);
     INIT_DELAYED_WORK(&decide_hotplug, decide_hotplug_func);
-- 
1.7.9.5

