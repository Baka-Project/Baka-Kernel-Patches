From 84996edb87e2d9828168082695154e0cd82c6d96 Mon Sep 17 00:00:00 2001
From: showp1984 <showp1984@gmail.com>
Date: Fri, 22 Jun 2012 10:27:47 +0200
Subject: [PATCH 101/338] mach-msm: mpdecision: add sysfs interface

Signed-off-by: showp1984 <showp1984@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 arch/arm/mach-msm/msm_mpdecision.c |  226 ++++++++++++++++++++++++++++++++++--
 1 file changed, 217 insertions(+), 9 deletions(-)

diff --git a/arch/arm/mach-msm/msm_mpdecision.c b/arch/arm/mach-msm/msm_mpdecision.c
index cdd36c6..a42eea0 100644
--- a/arch/arm/mach-msm/msm_mpdecision.c
+++ b/arch/arm/mach-msm/msm_mpdecision.c
@@ -55,10 +55,21 @@ static DEFINE_PER_CPU(struct msm_mpdec_cpudata_t, msm_mpdec_cpudata);
 static struct delayed_work msm_mpdec_work;
 static DEFINE_MUTEX(msm_cpu_lock);
 
-bool scroff_single_core = true;
+static struct msm_mpdec_tuners {
+	unsigned int startdelay;
+	unsigned int delay;
+	unsigned int pause;
+	bool scroff_single_core;
+} msm_mpdec_tuners_ins = {
+	.startdelay = MSM_MPDEC_STARTDELAY,
+	.delay = MSM_MPDEC_DELAY,
+	.pause = MSM_MPDEC_PAUSE,
+	.scroff_single_core = true,
+};
 
 static unsigned int NwNs_Threshold[4] = {20, 0, 0, 5};
 static unsigned int TwTs_Threshold[4] = {250, 0, 0, 250};
+
 extern unsigned int get_rq_info(void);
 bool was_paused = false;
 
@@ -75,7 +86,7 @@ static int mp_decision(void)
 	cputime64_t this_time = 0;
 
 	current_time = ktime_to_ms(ktime_get());
-	if (current_time <= MSM_MPDEC_STARTDELAY)
+	if (current_time <= msm_mpdec_tuners_ins.startdelay)
 		return MSM_MPDEC_IDLE;
 
 	if (first_call) {
@@ -155,8 +166,8 @@ static void msm_mpdec_work_thread(struct work_struct *work)
 						cpu, cpu_online(0), cpu_online(1), on_time);
 			} else if ((per_cpu(msm_mpdec_cpudata, cpu).online == true) && (!cpu_online(cpu))) {
 				pr_info(MPDEC_TAG"CPU[%d] was unplugged outside of mpdecision! | pausing [%d]ms\n",
-						cpu, MSM_MPDEC_PAUSE);
-				msleep(MSM_MPDEC_PAUSE);
+						cpu, msm_mpdec_tuners_ins.pause);
+				msleep(msm_mpdec_tuners_ins.pause);
 				was_paused = true;
 			}
 		}
@@ -172,8 +183,8 @@ static void msm_mpdec_work_thread(struct work_struct *work)
 						cpu, cpu_online(0), cpu_online(1));
 			} else if ((per_cpu(msm_mpdec_cpudata, cpu).online == false) && (cpu_online(cpu))) {
 				pr_info(MPDEC_TAG"CPU[%d] was hotplugged outside of mpdecision! | pausing [%d]ms\n",
-						cpu, MSM_MPDEC_PAUSE);
-				msleep(MSM_MPDEC_PAUSE);
+						cpu, msm_mpdec_tuners_ins.pause);
+				msleep(msm_mpdec_tuners_ins.pause);
 				was_paused = true;
 			}
 		}
@@ -186,7 +197,7 @@ static void msm_mpdec_work_thread(struct work_struct *work)
 
 out:
 	schedule_delayed_work(&msm_mpdec_work,
-			msecs_to_jiffies(MSM_MPDEC_DELAY));
+			msecs_to_jiffies(msm_mpdec_tuners_ins.delay));
 	return;
 }
 
@@ -195,7 +206,7 @@ static void msm_mpdec_early_suspend(struct early_suspend *h)
 	int cpu = 0;
 	for_each_possible_cpu(cpu) {
 		mutex_lock(&per_cpu(msm_mpdec_cpudata, cpu).suspend_mutex);
-		if (((cpu >= (CONFIG_NR_CPUS - 1)) && (num_online_cpus() > 1)) && (scroff_single_core)) {
+		if (((cpu >= (CONFIG_NR_CPUS - 1)) && (num_online_cpus() > 1)) && (msm_mpdec_tuners_ins.scroff_single_core)) {
 			cpu_down(cpu);
 			pr_info(MPDEC_TAG"Screen -> off. Suspended CPU%d | Mask=[%d%d]\n",
 					cpu, cpu_online(0), cpu_online(1));
@@ -232,9 +243,196 @@ static struct early_suspend msm_mpdec_early_suspend_handler = {
 	.resume = msm_mpdec_late_resume,
 };
 
+/**************************** SYSFS START ****************************/
+struct kobject *msm_mpdec_kobject;
+
+#define show_one(file_name, object)					\
+static ssize_t show_##file_name						\
+(struct kobject *kobj, struct attribute *attr, char *buf)               \
+{									\
+	return sprintf(buf, "%u\n", msm_mpdec_tuners_ins.object);	\
+}
+
+show_one(startdelay, startdelay);
+show_one(delay, delay);
+show_one(pause, pause);
+show_one(scroff_single_core, scroff_single_core);
+
+static ssize_t show_nwns_threshold_up(struct kobject *kobj, struct attribute *attr,
+					char *buf)
+{
+	return sprintf(buf, "%u\n", NwNs_Threshold[0]);
+}
+
+static ssize_t show_nwns_threshold_down(struct kobject *kobj, struct attribute *attr,
+					char *buf)
+{
+	return sprintf(buf, "%u\n", NwNs_Threshold[3]);
+}
+
+static ssize_t show_twts_threshold_up(struct kobject *kobj, struct attribute *attr,
+					char *buf)
+{
+	return sprintf(buf, "%u\n", TwTs_Threshold[0]);
+}
+
+static ssize_t show_twts_threshold_down(struct kobject *kobj, struct attribute *attr,
+					char *buf)
+{
+	return sprintf(buf, "%u\n", TwTs_Threshold[3]);
+}
+
+static ssize_t store_startdelay(struct kobject *a, struct attribute *b,
+				   const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+
+	msm_mpdec_tuners_ins.startdelay = input;
+
+	return count;
+}
+
+static ssize_t store_delay(struct kobject *a, struct attribute *b,
+				   const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+
+	msm_mpdec_tuners_ins.delay = input;
+
+	return count;
+}
+
+static ssize_t store_pause(struct kobject *a, struct attribute *b,
+				   const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+
+	msm_mpdec_tuners_ins.pause = input;
+
+	return count;
+}
+
+static ssize_t store_scroff_single_core(struct kobject *a, struct attribute *b,
+				   const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+	switch (buf[0]) {
+	case '0':
+		msm_mpdec_tuners_ins.scroff_single_core = input;
+		break;
+	case '1':
+		msm_mpdec_tuners_ins.scroff_single_core = input;
+		break;
+	default:
+		ret = -EINVAL;
+	}
+	return count;
+}
+
+static ssize_t store_nwns_threshold_up(struct kobject *a, struct attribute *b,
+				   const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+
+	NwNs_Threshold[0] = input;
+
+	return count;
+}
+
+static ssize_t store_nwns_threshold_down(struct kobject *a, struct attribute *b,
+				   const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+
+	NwNs_Threshold[3] = input;
+
+	return count;
+}
+
+static ssize_t store_twts_threshold_up(struct kobject *a, struct attribute *b,
+				   const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+
+	TwTs_Threshold[0] = input;
+
+	return count;
+}
+
+static ssize_t store_twts_threshold_down(struct kobject *a, struct attribute *b,
+				   const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+
+	TwTs_Threshold[3] = input;
+
+	return count;
+}
+
+define_one_global_rw(startdelay);
+define_one_global_rw(delay);
+define_one_global_rw(pause);
+define_one_global_rw(scroff_single_core);
+define_one_global_rw(nwns_threshold_up);
+define_one_global_rw(nwns_threshold_down);
+define_one_global_rw(twts_threshold_up);
+define_one_global_rw(twts_threshold_down);
+
+static struct attribute *msm_mpdec_attributes[] = {
+	&startdelay.attr,
+	&delay.attr,
+	&pause.attr,
+	&scroff_single_core.attr,
+	&nwns_threshold_up.attr,
+	&nwns_threshold_down.attr,
+	&twts_threshold_up.attr,
+	&twts_threshold_down.attr,
+	NULL
+};
+
+
+static struct attribute_group msm_mpdec_attr_group = {
+	.attrs = msm_mpdec_attributes,
+	.name = "conf",
+};
+/**************************** SYSFS END ****************************/
+
 static int __init msm_mpdec(void)
 {
-	int cpu, err = 0;
+	int cpu, rc, err = 0;
+
 	for_each_possible_cpu(cpu) {
 		mutex_init(&(per_cpu(msm_mpdec_cpudata, cpu).suspend_mutex));
 		per_cpu(msm_mpdec_cpudata, cpu).device_suspended = false;
@@ -246,6 +444,16 @@ static int __init msm_mpdec(void)
 
 	register_early_suspend(&msm_mpdec_early_suspend_handler);
 
+	msm_mpdec_kobject = kobject_create_and_add("msm_mpdecision", kernel_kobj);
+	if (msm_mpdec_kobject) {
+		rc = sysfs_create_group(msm_mpdec_kobject,
+							&msm_mpdec_attr_group);
+		if (rc) {
+			pr_warn(MPDEC_TAG"sysfs: ERROR, could not create sysfs group");
+		}
+	} else
+		pr_warn(MPDEC_TAG"sysfs: ERROR, could not create sysfs kobj");
+
 	pr_info(MPDEC_TAG"%s init complete.", __func__);
 
 	return err;
-- 
1.7.9.5

