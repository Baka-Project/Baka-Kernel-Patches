From 1e3c998c8895e9dcc919ef3a97d38cdce6845a7e Mon Sep 17 00:00:00 2001
From: Dennis Rassmann <showp1984@gmail.com>
Date: Wed, 6 Nov 2013 04:18:43 +0100
Subject: [PATCH 202/338] msm_mpdecision: switch to lcd callback and improve
 sus/res code

Signed-off-by: Dennis Rassmann <showp1984@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 arch/arm/mach-msm/msm_mpdecision.c |   82 +++++++++++++++++-------------------
 1 file changed, 39 insertions(+), 43 deletions(-)

diff --git a/arch/arm/mach-msm/msm_mpdecision.c b/arch/arm/mach-msm/msm_mpdecision.c
index dbae5ec..673951c 100644
--- a/arch/arm/mach-msm/msm_mpdecision.c
+++ b/arch/arm/mach-msm/msm_mpdecision.c
@@ -24,7 +24,7 @@
  */
 
 #ifdef CONFIG_FB
-#include <linux/fb.h>
+#include <linux/lcd_notify.h>
 #elif defined CONFIG_HAS_EARLYSUSPEND
 #include <linux/earlysuspend.h>
 #endif
@@ -86,10 +86,11 @@ struct msm_mpdec_cpudata_t {
 };
 static DEFINE_PER_CPU(struct msm_mpdec_cpudata_t, msm_mpdec_cpudata);
 
-static struct notifier_block msm_mpdec_fb_notif;
+static struct notifier_block msm_mpdec_lcd_notif;
 static struct delayed_work msm_mpdec_work;
 static struct workqueue_struct *msm_mpdec_workq;
 static DEFINE_MUTEX(mpdec_msm_cpu_lock);
+static DEFINE_MUTEX(mpdec_msm_susres_lock);
 #ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
 static struct workqueue_struct *mpdec_input_wq;
 static DEFINE_PER_CPU(struct work_struct, mpdec_input_work);
@@ -558,7 +559,7 @@ static struct input_handler mpdec_input_handler = {
 };
 #endif
 
-static void msm_mpdec_suspend(void) {
+static void msm_mpdec_suspend(struct work_struct * msm_mpdec_suspend_work) {
     int cpu = nr_cpu_ids;
 #ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
     is_screen_on = false;
@@ -584,13 +585,17 @@ static void msm_mpdec_suspend(void) {
 
     pr_info(MPDEC_TAG"Screen -> off. Deactivated mpdecision.\n");
 }
+static DECLARE_WORK(msm_mpdec_suspend_work, msm_mpdec_suspend);
 
-static void msm_mpdec_resume(void) {
+static void msm_mpdec_resume(struct work_struct * msm_mpdec_suspend_work) {
     int cpu = nr_cpu_ids;
 #ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
     is_screen_on = true;
 #endif
 
+    if (!per_cpu(msm_mpdec_cpudata, 0).device_suspended)
+        return;
+
     for_each_possible_cpu(cpu)
         per_cpu(msm_mpdec_cpudata, cpu).device_suspended = false;
 
@@ -598,7 +603,6 @@ static void msm_mpdec_resume(void) {
         /* wake up main work thread */
         was_paused = true;
         queue_delayed_work(msm_mpdec_workq, &msm_mpdec_work, 0);
-
         /* restore min/max cpus limits */
         for (cpu=1; cpu<CONFIG_NR_CPUS; cpu++) {
             if (cpu < msm_mpdec_tuners_ins.min_cpus) {
@@ -609,42 +613,33 @@ static void msm_mpdec_resume(void) {
                     mpdec_cpu_down(cpu);
             }
         }
-
         pr_info(MPDEC_TAG"Screen -> on. Activated mpdecision. | Mask=[%d%d%d%d]\n",
                 cpu_online(0), cpu_online(1), cpu_online(2), cpu_online(3));
     } else {
         pr_info(MPDEC_TAG"Screen -> on\n");
     }
 }
+static DECLARE_WORK(msm_mpdec_resume_work, msm_mpdec_resume);
 
 #ifdef CONFIG_FB
-static int fb_notifier_callback(struct notifier_block *this,
+static int msm_mpdec_lcd_notifier_callback(struct notifier_block *this,
 				unsigned long event, void *data) {
-	int blank_mode;
-	static int first = 1;
-
-	if (event != FB_EVENT_BLANK || data == NULL)
-		return 0;
-
-	blank_mode = *(int*)(((struct fb_event*)data)->data);
-	pr_debug("FB_CB: event = %lu, blank mode = %d\n", event, blank_mode);
-
-	switch (blank_mode) {
-	case FB_BLANK_UNBLANK:
-		if (first) {
-			msm_mpdec_resume();
-			first = 0;
-		} else {
-			first = 1;
-		}
+	pr_debug("%s: event = %lu\n", __func__, event);
+
+	switch (event) {
+	case LCD_EVENT_OFF_START:
+		mutex_lock(&mpdec_msm_susres_lock);
+		schedule_work(&msm_mpdec_suspend_work);
+		break;
+	case LCD_EVENT_ON_START:
+		mutex_lock(&mpdec_msm_susres_lock);
+		schedule_work(&msm_mpdec_resume_work);
 		break;
-	case FB_BLANK_POWERDOWN:
-		if (first) {
-			msm_mpdec_suspend();
-			first = 0;
-		} else {
-			first = 1;
-		}
+	case LCD_EVENT_OFF_END:
+		mutex_unlock(&mpdec_msm_susres_lock);
+		break;
+	case LCD_EVENT_ON_END:
+		mutex_unlock(&mpdec_msm_susres_lock);
 		break;
 	default:
 		break;
@@ -1206,17 +1201,6 @@ static int __init msm_mpdec_init(void) {
         queue_delayed_work(msm_mpdec_workq, &msm_mpdec_work,
                            msecs_to_jiffies(msm_mpdec_tuners_ins.delay));
 
-#ifdef CONFIG_FB
-	msm_mpdec_fb_notif.notifier_call = fb_notifier_callback;
-	if (fb_register_client(&msm_mpdec_fb_notif) != 0) {
-		pr_err("%s: Failed to register fb callback\n", __func__);
-		err = -EINVAL;
-		goto err_fb_register;
-	}
-#elif defined CONFIG_HAS_EARLYSUSPEND
-	register_early_suspend(&msm_mpdec_early_suspend_handler);
-#endif
-
     msm_mpdec_kobject = kobject_create_and_add("msm_mpdecision", kernel_kobj);
     if (msm_mpdec_kobject) {
         rc = sysfs_create_group(msm_mpdec_kobject,
@@ -1234,12 +1218,24 @@ static int __init msm_mpdec_init(void) {
 
     pr_info(MPDEC_TAG"%s init complete.", __func__);
 
-err_fb_register:
+
+#ifdef CONFIG_FB
+	msm_mpdec_lcd_notif.notifier_call = msm_mpdec_lcd_notifier_callback;
+	if (lcd_register_client(&msm_mpdec_lcd_notif) != 0) {
+		pr_err("%s: Failed to register lcd callback\n", __func__);
+		err = -EINVAL;
+		lcd_unregister_client(&msm_mpdec_lcd_notif);
+	}
+#elif defined CONFIG_HAS_EARLYSUSPEND
+	register_early_suspend(&msm_mpdec_early_suspend_handler);
+#endif
+
     return err;
 }
 late_initcall(msm_mpdec_init);
 
 void msm_mpdec_exit(void) {
+    lcd_unregister_client(&msm_mpdec_lcd_notif);
 #ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
     input_unregister_handler(&mpdec_input_handler);
     destroy_workqueue(msm_mpdec_revib_workq);
-- 
1.7.9.5

