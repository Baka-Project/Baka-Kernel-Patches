From 703864dad61352d5564ffddd844a7ae91df0832f Mon Sep 17 00:00:00 2001
From: Dennis Rassmann <showp1984@gmail.com>
Date: Fri, 19 Apr 2013 11:23:51 +0200
Subject: [PATCH 173/338] msm_mpdecision: add stats & expose to sysfs

Signed-off-by: Dennis Rassmann <showp1984@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 arch/arm/mach-msm/msm_mpdecision.c |   77 ++++++++++++++++++++++++++++++++++++
 1 file changed, 77 insertions(+)

diff --git a/arch/arm/mach-msm/msm_mpdecision.c b/arch/arm/mach-msm/msm_mpdecision.c
index 556fc71..b53153c 100644
--- a/arch/arm/mach-msm/msm_mpdecision.c
+++ b/arch/arm/mach-msm/msm_mpdecision.c
@@ -59,6 +59,9 @@ struct msm_mpdec_cpudata_t {
 	int online;
 	int device_suspended;
 	cputime64_t on_time;
+	cputime64_t on_time_total;
+	long long unsigned int times_cpu_hotplugged;
+	long long unsigned int times_cpu_unplugged;
 };
 static DEFINE_PER_CPU(struct msm_mpdec_cpudata_t, msm_mpdec_cpudata);
 
@@ -251,6 +254,8 @@ static void msm_mpdec_work_thread(struct work_struct *work)
 				cpu_down(cpu);
 				per_cpu(msm_mpdec_cpudata, cpu).online = false;
 				on_time = ktime_to_ms(ktime_get()) - per_cpu(msm_mpdec_cpudata, cpu).on_time;
+				per_cpu(msm_mpdec_cpudata, cpu).on_time_total += on_time;
+				per_cpu(msm_mpdec_cpudata, cpu).times_cpu_unplugged += 1;
 				pr_info(MPDEC_TAG"CPU[%d] on->off | Mask=[%d%d%d%d] | time online: %llu\n",
 						cpu, cpu_online(0), cpu_online(1), cpu_online(2), cpu_online(3), on_time);
 			} else if (per_cpu(msm_mpdec_cpudata, cpu).online != cpu_online(cpu)) {
@@ -268,6 +273,7 @@ static void msm_mpdec_work_thread(struct work_struct *work)
 				cpu_up(cpu);
 				per_cpu(msm_mpdec_cpudata, cpu).online = true;
 				per_cpu(msm_mpdec_cpudata, cpu).on_time = ktime_to_ms(ktime_get());
+				per_cpu(msm_mpdec_cpudata, cpu).times_cpu_hotplugged += 1;
 				pr_info(MPDEC_TAG"CPU[%d] off->on | Mask=[%d%d%d%d]\n",
 						cpu, cpu_online(0), cpu_online(1), cpu_online(2), cpu_online(3));
 			} else if (per_cpu(msm_mpdec_cpudata, cpu).online != cpu_online(cpu)) {
@@ -294,6 +300,7 @@ out:
 static void msm_mpdec_suspend(void)
 {
 	int cpu = nr_cpu_ids;
+	cputime64_t on_time = 0;
 	for_each_possible_cpu(cpu) {
 		mutex_lock(&per_cpu(msm_mpdec_cpudata, cpu).suspend_mutex);
 		if ((cpu >= 1) && (cpu_online(cpu))) {
@@ -301,6 +308,9 @@ static void msm_mpdec_suspend(void)
                         pr_info(MPDEC_TAG"Screen -> off. Suspended CPU[%d] | Mask=[%d%d%d%d]\n",
                                 cpu, cpu_online(0), cpu_online(1), cpu_online(2), cpu_online(3));
 			per_cpu(msm_mpdec_cpudata, cpu).online = false;
+			on_time = ktime_to_ms(ktime_get()) - per_cpu(msm_mpdec_cpudata, cpu).on_time;
+			per_cpu(msm_mpdec_cpudata, cpu).on_time_total += on_time;
+			per_cpu(msm_mpdec_cpudata, cpu).times_cpu_unplugged += 1;
 		}
 		per_cpu(msm_mpdec_cpudata, cpu).device_suspended = true;
 		mutex_unlock(&per_cpu(msm_mpdec_cpudata, cpu).suspend_mutex);
@@ -324,6 +334,7 @@ static void msm_mpdec_resume(void)
 		cpu_up(1);
 		per_cpu(msm_mpdec_cpudata, 1).on_time = ktime_to_ms(ktime_get());
 		per_cpu(msm_mpdec_cpudata, 1).online = true;
+		per_cpu(msm_mpdec_cpudata, 1).times_cpu_hotplugged += 1;
 		pr_info(MPDEC_TAG"Screen -> on. Hot plugged CPU1 | Mask=[%d%d%d%d]\n",
                         cpu_online(0), cpu_online(1), cpu_online(2), cpu_online(3));
 	}
@@ -646,6 +657,7 @@ static ssize_t store_enabled(struct kobject *a, struct attribute *b,
                         if (!cpu_online(cpu)) {
                                 per_cpu(msm_mpdec_cpudata, cpu).on_time = ktime_to_ms(ktime_get());
                                 per_cpu(msm_mpdec_cpudata, cpu).online = true;
+                                per_cpu(msm_mpdec_cpudata, cpu).times_cpu_hotplugged += 1;
                                 cpu_up(cpu);
                                 pr_info(MPDEC_TAG"nap time... Hot plugged CPU[%d] | Mask=[%d%d%d%d]\n",
                                         cpu, cpu_online(0), cpu_online(1), cpu_online(2), cpu_online(3));
@@ -707,6 +719,63 @@ static struct attribute_group msm_mpdec_attr_group = {
 	.attrs = msm_mpdec_attributes,
 	.name = "conf",
 };
+
+/********* STATS START *********/
+
+static ssize_t show_time_cpus_on(struct kobject *a, struct attribute *b,
+				   char *buf)
+{
+	ssize_t len = 0;
+	int cpu = 0;
+
+	for_each_possible_cpu(cpu) {
+		len += sprintf(buf + len, "%i %llu\n", cpu, per_cpu(msm_mpdec_cpudata, cpu).on_time_total);
+	}
+
+	return len;
+}
+define_one_global_ro(time_cpus_on);
+
+static ssize_t show_times_cpus_hotplugged(struct kobject *a, struct attribute *b,
+				   char *buf)
+{
+	ssize_t len = 0;
+	int cpu = 0;
+
+	for_each_possible_cpu(cpu) {
+		len += sprintf(buf + len, "%i %llu\n", cpu, per_cpu(msm_mpdec_cpudata, cpu).times_cpu_hotplugged);
+	}
+
+	return len;
+}
+define_one_global_ro(times_cpus_hotplugged);
+
+static ssize_t show_times_cpus_unplugged(struct kobject *a, struct attribute *b,
+				   char *buf)
+{
+	ssize_t len = 0;
+	int cpu = 0;
+
+	for_each_possible_cpu(cpu) {
+		len += sprintf(buf + len, "%i %llu\n", cpu, per_cpu(msm_mpdec_cpudata, cpu).times_cpu_unplugged);
+	}
+
+	return len;
+}
+define_one_global_ro(times_cpus_unplugged);
+
+static struct attribute *msm_mpdec_stats_attributes[] = {
+	&time_cpus_on.attr,
+	&times_cpus_hotplugged.attr,
+	&times_cpus_unplugged.attr,
+	NULL
+};
+
+
+static struct attribute_group msm_mpdec_stats_attr_group = {
+	.attrs = msm_mpdec_stats_attributes,
+	.name = "stats",
+};
 /**************************** SYSFS END ****************************/
 
 static int __init msm_mpdec_init(void)
@@ -717,6 +786,9 @@ static int __init msm_mpdec_init(void)
 		mutex_init(&(per_cpu(msm_mpdec_cpudata, cpu).suspend_mutex));
 		per_cpu(msm_mpdec_cpudata, cpu).device_suspended = false;
 		per_cpu(msm_mpdec_cpudata, cpu).online = true;
+		per_cpu(msm_mpdec_cpudata, cpu).on_time_total = 0;
+		per_cpu(msm_mpdec_cpudata, cpu).times_cpu_unplugged = 0;
+		per_cpu(msm_mpdec_cpudata, cpu).times_cpu_hotplugged = 0;
 	}
 
         was_paused = true;
@@ -748,6 +820,11 @@ static int __init msm_mpdec_init(void)
 		if (rc) {
 			pr_warn(MPDEC_TAG"sysfs: ERROR, could not create sysfs group");
 		}
+		rc = sysfs_create_group(msm_mpdec_kobject,
+							&msm_mpdec_stats_attr_group);
+		if (rc) {
+			pr_warn(MPDEC_TAG"sysfs: ERROR, could not create sysfs stats group");
+		}
 	} else
 		pr_warn(MPDEC_TAG"sysfs: ERROR, could not create sysfs kobj");
 
-- 
1.7.9.5

