From 04ebbc7f0d3f6f5562f432f7af26e224e77d5927 Mon Sep 17 00:00:00 2001
From: Dennis Rassmann <showp1984@gmail.com>
Date: Wed, 19 Dec 2012 06:36:27 +0100
Subject: [PATCH 115/338] msm_mpdecision: make mpdecision() core independent

Signed-off-by: Dennis Rassmann <showp1984@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 arch/arm/mach-msm/msm_mpdecision.c |   58 +++++++++++++++++++++++++++++-------
 1 file changed, 47 insertions(+), 11 deletions(-)

diff --git a/arch/arm/mach-msm/msm_mpdecision.c b/arch/arm/mach-msm/msm_mpdecision.c
index 438d8bd..7aa1242 100644
--- a/arch/arm/mach-msm/msm_mpdecision.c
+++ b/arch/arm/mach-msm/msm_mpdecision.c
@@ -72,8 +72,8 @@ static struct msm_mpdec_tuners {
 	.idle_freq = MSM_MPDEC_IDLE_FREQ,
 };
 
-static unsigned int NwNs_Threshold[4] = {35, 0, 0, 5};
-static unsigned int TwTs_Threshold[4] = {250, 0, 0, 250};
+static unsigned int NwNs_Threshold[8] = {19, 30, 19, 11, 19, 11, 0, 11};
+static unsigned int TwTs_Threshold[8] = {140, 0, 140, 190, 140, 190, 0, 190};
 
 extern unsigned int get_rq_info(void);
 extern unsigned long acpuclk_8x60_get_rate(int);
@@ -81,6 +81,43 @@ extern unsigned long acpuclk_8x60_get_rate(int);
 unsigned int state = MSM_MPDEC_IDLE;
 bool was_paused = false;
 
+static int get_slowest_cpu(void)
+{
+        int i, cpu = 0;
+        unsigned long rate, slow_rate = 0;
+
+        for (i = 0; i < CONFIG_NR_CPUS; i++) {
+                rate = get_rate(i);
+                if ((rate < slow_rate) && (slow_rate != 0)) {
+                        cpu = i;
+                        slow_rate = rate;
+                }
+                if (slow_rate == 0) {
+                        slow_rate = rate;
+                }
+        }
+
+        return cpu;
+}
+
+static int get_slowest_cpu_rate(void)
+{
+        int i = 0;
+        unsigned long rate, slow_rate = 0;
+
+        for (i = 0; i < CONFIG_NR_CPUS; i++) {
+                rate = get_rate(i);
+                if ((rate < slow_rate) && (slow_rate != 0)) {
+                        slow_rate = rate;
+                }
+                if (slow_rate == 0) {
+                        slow_rate = rate;
+                }
+        }
+
+        return slow_rate;
+}
+
 static int mp_decision(void)
 {
 	static bool first_call = true;
@@ -115,20 +152,17 @@ static int mp_decision(void)
 
 	if (nr_cpu_online) {
 		index = (nr_cpu_online - 1) * 2;
-		if ((nr_cpu_online < 2) && (rq_depth >= NwNs_Threshold[index])) {
+		if ((nr_cpu_online < CONFIG_NR_CPUS) && (rq_depth >= NwNs_Threshold[index])) {
 			if (total_time >= TwTs_Threshold[index]) {
 				new_state = MSM_MPDEC_UP;
-                                if (acpuclk_8x60_get_rate((CONFIG_NR_CPUS - 2)) <=
-                                    msm_mpdec_tuners_ins.idle_freq)
+                                if (get_slowest_cpu_rate() <=  msm_mpdec_tuners_ins.idle_freq)
                                         new_state = MSM_MPDEC_IDLE;
 			}
-		} else if (rq_depth <= NwNs_Threshold[index+1]) {
+		} else if ((nr_cpu_online > 1) && (rq_depth <= NwNs_Threshold[index+1])) {
 			if (total_time >= TwTs_Threshold[index+1] ) {
 				new_state = MSM_MPDEC_DOWN;
-                                if (cpu_online((CONFIG_NR_CPUS - 1)))
-		                        if (acpuclk_8x60_get_rate((CONFIG_NR_CPUS - 1)) >
-                                            msm_mpdec_tuners_ins.idle_freq)
-			                        new_state = MSM_MPDEC_IDLE;
+                                if (get_slowest_cpu_rate() > msm_mpdec_tuners_ins.idle_freq)
+			                new_state = MSM_MPDEC_IDLE;
 			}
 		} else {
 			new_state = MSM_MPDEC_IDLE;
@@ -143,7 +177,9 @@ static int mp_decision(void)
 	}
 
 	last_time = ktime_to_ms(ktime_get());
-
+#if DEBUG
+        pr_info(MPDEC_TAG"[DEBUG] New State: %i", new_state);
+#endif
 	return new_state;
 }
 
-- 
1.7.9.5

