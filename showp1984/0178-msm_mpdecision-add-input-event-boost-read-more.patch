From d0616599af953a020ee9417473f56b8b7b1be03a Mon Sep 17 00:00:00 2001
From: Dennis Rassmann <showp1984@gmail.com>
Date: Tue, 7 May 2013 04:41:21 +0200
Subject: [PATCH 178/338] msm_mpdecision: add input event boost [read more]

This adds an input event boost to mpdecision.
It will basically boost the min freq of all cpus to predefined values if an
input event is detected.
Devices that qualify as boosters must fullfill one of these conditions:
- contain touch in their name
- contain keyboard in their name
This also boosts cpus independently from each other. Meaning:
If a cpu is hotplugged after the boost of another cpu was initiated the next
boost pulse will boost that cpu too.

Sysfs interface underway.

Signed-off-by: Dennis Rassmann <showp1984@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 arch/arm/mach-msm/Kconfig          |    7 +
 arch/arm/mach-msm/msm_mpdecision.c |  284 +++++++++++++++++++++++++++++++++++-
 2 files changed, 290 insertions(+), 1 deletion(-)

diff --git a/arch/arm/mach-msm/Kconfig b/arch/arm/mach-msm/Kconfig
index 66b672a..200a2eb 100644
--- a/arch/arm/mach-msm/Kconfig
+++ b/arch/arm/mach-msm/Kconfig
@@ -1905,6 +1905,13 @@ config MSM_MPDEC
 	  This enables kernel based multi core control.
 	  (up/down hotplug based on load)
 
+config MSM_MPDEC_INPUTBOOST_CPUMIN
+	bool "Enable kernel based mpdecision"
+	depends on MSM_MPDEC
+	default n
+	help
+	  This pushes the cpu min speed to predefined values on input events.
+
 if CPU_FREQ_MSM
 
 config MSM_CPU_FREQ_SET_MIN_MAX
diff --git a/arch/arm/mach-msm/msm_mpdecision.c b/arch/arm/mach-msm/msm_mpdecision.c
index 3ad0bbf..679bf93 100644
--- a/arch/arm/mach-msm/msm_mpdecision.c
+++ b/arch/arm/mach-msm/msm_mpdecision.c
@@ -33,6 +33,10 @@
 #include <asm-generic/cputime.h>
 #include <linux/hrtimer.h>
 #include <linux/delay.h>
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+#include <linux/input.h>
+#include <linux/slab.h>
+#endif
 #include "acpuclock.h"
 
 #define DEBUG 0
@@ -42,6 +46,13 @@
 #define MSM_MPDEC_DELAY                 100
 #define MSM_MPDEC_PAUSE                 10000
 #define MSM_MPDEC_IDLE_FREQ             486000
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+#define MSM_MPDEC_BOOSTTIME             1000
+#define MSM_MPDEC_BOOSTFREQ_CPU0        1026000
+#define MSM_MPDEC_BOOSTFREQ_CPU1        918000
+#define MSM_MPDEC_BOOSTFREQ_CPU2        810000
+#define MSM_MPDEC_BOOSTFREQ_CPU3        702000
+#endif
 
 enum {
     MSM_MPDEC_DISABLED = 0,
@@ -58,12 +69,27 @@ struct msm_mpdec_cpudata_t {
     cputime64_t on_time_total;
     long long unsigned int times_cpu_hotplugged;
     long long unsigned int times_cpu_unplugged;
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+    struct mutex boost_mutex;
+    struct mutex unboost_mutex;
+    unsigned long int norm_min_freq;
+    unsigned long int boost_freq;
+    cputime64_t boost_until;
+    bool is_boosted;
+    bool revib_wq_running;
+#endif
 };
 static DEFINE_PER_CPU(struct msm_mpdec_cpudata_t, msm_mpdec_cpudata);
 
 static struct delayed_work msm_mpdec_work;
 static struct workqueue_struct *msm_mpdec_workq;
 static DEFINE_MUTEX(mpdec_msm_cpu_lock);
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+static struct workqueue_struct *mpdec_input_wq;
+static DEFINE_PER_CPU(struct work_struct, mpdec_input_work);
+static struct workqueue_struct *msm_mpdec_revib_workq;
+static DEFINE_PER_CPU(struct delayed_work, msm_mpdec_revib_work);
+#endif
 
 static struct msm_mpdec_tuners {
     unsigned int startdelay;
@@ -73,6 +99,11 @@ static struct msm_mpdec_tuners {
     unsigned long int idle_freq;
     unsigned int max_cpus;
     unsigned int min_cpus;
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+    bool boost_cpumin_on_input_event;
+    unsigned int boost_time;
+    unsigned long int boost_freq[4];
+#endif
 } msm_mpdec_tuners_ins = {
     .startdelay = MSM_MPDEC_STARTDELAY,
     .delay = MSM_MPDEC_DELAY,
@@ -81,6 +112,16 @@ static struct msm_mpdec_tuners {
     .idle_freq = MSM_MPDEC_IDLE_FREQ,
     .max_cpus = CONFIG_NR_CPUS,
     .min_cpus = 1,
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+    .boost_cpumin_on_input_event = true,
+    .boost_time = MSM_MPDEC_BOOSTTIME,
+    .boost_freq = {
+        MSM_MPDEC_BOOSTFREQ_CPU0,
+        MSM_MPDEC_BOOSTFREQ_CPU1,
+        MSM_MPDEC_BOOSTFREQ_CPU2,
+        MSM_MPDEC_BOOSTFREQ_CPU3
+    },
+#endif
 };
 
 static unsigned int NwNs_Threshold[8] = {12, 0, 25, 20, 32, 28, 0, 35};
@@ -91,6 +132,12 @@ extern unsigned long acpuclk_get_rate(int);
 
 unsigned int state = MSM_MPDEC_IDLE;
 bool was_paused = false;
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+bool is_screen_on = true;
+static int update_cpu_min_freq(struct cpufreq_policy *cpu_policy,
+                               int cpu, int new_freq);
+static void unboost_cpu(int cpu);
+#endif
 static cputime64_t mpdec_paused_until = 0;
 
 static unsigned long get_rate(int cpu) {
@@ -244,6 +291,9 @@ static void msm_mpdec_work_thread(struct work_struct *work) {
         cpu = get_slowest_cpu();
         if (cpu < nr_cpu_ids) {
             if ((per_cpu(msm_mpdec_cpudata, cpu).online == true) && (cpu_online(cpu))) {
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+                unboost_cpu(cpu);
+#endif
                 cpu_down(cpu);
                 per_cpu(msm_mpdec_cpudata, cpu).online = false;
                 on_time = ktime_to_ms(ktime_get()) - per_cpu(msm_mpdec_cpudata, cpu).on_time;
@@ -269,6 +319,9 @@ static void msm_mpdec_work_thread(struct work_struct *work) {
                 per_cpu(msm_mpdec_cpudata, cpu).times_cpu_hotplugged += 1;
                 pr_info(MPDEC_TAG"CPU[%d] off->on | Mask=[%d%d%d%d]\n",
                         cpu, cpu_online(0), cpu_online(1), cpu_online(2), cpu_online(3));
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+                unboost_cpu(cpu);
+#endif
             } else if (per_cpu(msm_mpdec_cpudata, cpu).online != cpu_online(cpu)) {
                 pr_info(MPDEC_TAG"CPU[%d] was controlled outside of mpdecision! | pausing [%d]ms\n",
                         cpu, msm_mpdec_tuners_ins.pause);
@@ -290,10 +343,190 @@ out:
     return;
 }
 
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+static int update_cpu_min_freq(struct cpufreq_policy *cpu_policy,
+                               int cpu, int new_freq) {
+    int ret = 0;
+
+    if (!cpu_policy)
+        return -EINVAL;
+
+    cpufreq_verify_within_limits(cpu_policy, new_freq, cpu_policy->max);
+    cpu_policy->user_policy.min = new_freq;
+
+    ret = cpufreq_update_policy(cpu);
+    if (!ret) {
+        pr_debug(MPDEC_TAG"Touch event! Setting CPU%d min frequency to %d\n",
+            cpu, new_freq);
+    }
+    return ret;
+}
+
+static void unboost_cpu(int cpu) {
+    struct cpufreq_policy *cpu_policy = NULL;
+
+    if (cpu_online(cpu)) {
+        if (per_cpu(msm_mpdec_cpudata, cpu).is_boosted) {
+            if (mutex_trylock(&per_cpu(msm_mpdec_cpudata, cpu).unboost_mutex)) {
+                cpu_policy = cpufreq_cpu_get(cpu);
+                if (!cpu_policy) {
+                    pr_debug(MPDEC_TAG"NULL policy on cpu %d\n", cpu);
+                    return;
+                }
+#if DEBUG
+                pr_info(MPDEC_TAG"un boosted cpu%i to %lu", cpu, per_cpu(msm_mpdec_cpudata, cpu).norm_min_freq);
+#endif
+                per_cpu(msm_mpdec_cpudata, cpu).is_boosted = false;
+                update_cpu_min_freq(cpu_policy, cpu, per_cpu(msm_mpdec_cpudata, cpu).norm_min_freq);
+                cpufreq_cpu_put(cpu_policy);
+                mutex_unlock(&per_cpu(msm_mpdec_cpudata, cpu).unboost_mutex);
+            }
+        }
+    }
+
+    return;
+}
+
+static void msm_mpdec_revib_work_thread(struct work_struct *work) {
+    int cpu = smp_processor_id();
+
+    if (ktime_to_ms(ktime_get()) > per_cpu(msm_mpdec_cpudata, cpu).boost_until) {
+        per_cpu(msm_mpdec_cpudata, cpu).revib_wq_running = false;
+        unboost_cpu(cpu);
+    } else {
+        queue_delayed_work_on(cpu,
+                              msm_mpdec_revib_workq,
+                              &per_cpu(msm_mpdec_revib_work, cpu),
+                              msecs_to_jiffies((MSM_MPDEC_BOOSTTIME-500)));
+    }
+    return;
+}
+
+static void mpdec_input_callback(struct work_struct *unused) {
+    struct cpufreq_policy *cpu_policy = NULL;
+    int cpu = smp_processor_id();
+    bool boosted = false;
+
+    if (!per_cpu(msm_mpdec_cpudata, cpu).is_boosted) {
+        if (mutex_trylock(&per_cpu(msm_mpdec_cpudata, cpu).boost_mutex)) {
+            cpu_policy = cpufreq_cpu_get(cpu);
+            if (!cpu_policy) {
+                pr_debug(MPDEC_TAG"NULL policy on cpu %d\n", cpu);
+                return;
+            }
+            per_cpu(msm_mpdec_cpudata, cpu).norm_min_freq = cpu_policy->min;
+            update_cpu_min_freq(cpu_policy, cpu, per_cpu(msm_mpdec_cpudata, cpu).boost_freq);
+#if DEBUG
+            pr_info(MPDEC_TAG"boosted cpu%i to %lu", cpu, per_cpu(msm_mpdec_cpudata, cpu).boost_freq);
+#endif
+            per_cpu(msm_mpdec_cpudata, cpu).is_boosted = true;
+            per_cpu(msm_mpdec_cpudata, cpu).boost_until = ktime_to_ms(ktime_get()) + MSM_MPDEC_BOOSTTIME;
+            boosted = true;
+            cpufreq_cpu_put(cpu_policy);
+            mutex_unlock(&per_cpu(msm_mpdec_cpudata, cpu).boost_mutex);
+        }
+    } else {
+        boosted = true;
+    }
+    if (boosted && !per_cpu(msm_mpdec_cpudata, cpu).revib_wq_running) {
+        per_cpu(msm_mpdec_cpudata, cpu).revib_wq_running = true;
+        queue_delayed_work_on(cpu,
+                              msm_mpdec_revib_workq,
+                              &per_cpu(msm_mpdec_revib_work, cpu),
+                              msecs_to_jiffies((MSM_MPDEC_BOOSTTIME-500)));
+    } else if (boosted && per_cpu(msm_mpdec_cpudata, cpu).revib_wq_running) {
+        per_cpu(msm_mpdec_cpudata, cpu).boost_until = ktime_to_ms(ktime_get()) + MSM_MPDEC_BOOSTTIME;
+    }
+
+    return;
+}
+
+static void mpdec_input_event(struct input_handle *handle, unsigned int type,
+        unsigned int code, int value) {
+    int i = 0;
+
+    if (!msm_mpdec_tuners_ins.boost_cpumin_on_input_event)
+        return;
+
+    if (!is_screen_on)
+        return;
+
+    for_each_online_cpu(i) {
+        queue_work_on(i, mpdec_input_wq, &per_cpu(mpdec_input_work, i));
+    }
+}
+
+static int input_dev_filter(const char *input_dev_name) {
+    if (strstr(input_dev_name, "touch") ||
+        strstr(input_dev_name, "keypad")) {
+        return 0;
+    } else {
+        return 1;
+    }
+}
+
+static int mpdec_input_connect(struct input_handler *handler,
+        struct input_dev *dev, const struct input_device_id *id) {
+    struct input_handle *handle;
+    int error;
+
+    if (input_dev_filter(dev->name))
+        return -ENODEV;
+
+    handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL);
+    if (!handle)
+        return -ENOMEM;
+
+    handle->dev = dev;
+    handle->handler = handler;
+    handle->name = "mpdec";
+
+    error = input_register_handle(handle);
+    if (error)
+        goto err2;
+
+    error = input_open_device(handle);
+    if (error)
+        goto err1;
+
+    return 0;
+err1:
+    input_unregister_handle(handle);
+err2:
+    kfree(handle);
+    return error;
+}
+
+static void mpdec_input_disconnect(struct input_handle *handle) {
+    input_close_device(handle);
+    input_unregister_handle(handle);
+    kfree(handle);
+}
+
+static const struct input_device_id mpdec_ids[] = {
+    { .driver_info = 1 },
+    { },
+};
+
+static struct input_handler mpdec_input_handler = {
+    .event        = mpdec_input_event,
+    .connect      = mpdec_input_connect,
+    .disconnect   = mpdec_input_disconnect,
+    .name         = "mpdec_inputreq",
+    .id_table     = mpdec_ids,
+};
+#endif
+
 static void msm_mpdec_early_suspend(struct early_suspend *h) {
     int cpu = nr_cpu_ids;
     cputime64_t on_time = 0;
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+    is_screen_on = false;
+#endif
     for_each_possible_cpu(cpu) {
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+        unboost_cpu(cpu);
+#endif
         mutex_lock(&per_cpu(msm_mpdec_cpudata, cpu).suspend_mutex);
         if ((cpu >= 1) && (cpu_online(cpu))) {
             cpu_down(cpu);
@@ -315,6 +548,9 @@ static void msm_mpdec_early_suspend(struct early_suspend *h) {
 
 static void msm_mpdec_late_resume(struct early_suspend *h) {
     int cpu = nr_cpu_ids;
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+    is_screen_on = true;
+#endif
     for_each_possible_cpu(cpu)
         per_cpu(msm_mpdec_cpudata, cpu).device_suspended = false;
 
@@ -729,6 +965,10 @@ static struct attribute_group msm_mpdec_stats_attr_group = {
 
 static int __init msm_mpdec_init(void) {
     int cpu, rc, err = 0;
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+    int i;
+    unsigned long int boost_freq = 0;
+#endif
 
     for_each_possible_cpu(cpu) {
         mutex_init(&(per_cpu(msm_mpdec_cpudata, cpu).suspend_mutex));
@@ -737,6 +977,25 @@ static int __init msm_mpdec_init(void) {
         per_cpu(msm_mpdec_cpudata, cpu).on_time_total = 0;
         per_cpu(msm_mpdec_cpudata, cpu).times_cpu_unplugged = 0;
         per_cpu(msm_mpdec_cpudata, cpu).times_cpu_hotplugged = 0;
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+        per_cpu(msm_mpdec_cpudata, cpu).norm_min_freq = CONFIG_MSM_CPU_FREQ_MIN;
+        switch (cpu) {
+            case 0:
+            case 1:
+            case 2:
+                boost_freq = msm_mpdec_tuners_ins.boost_freq[cpu];
+                break;
+            default:
+                boost_freq = msm_mpdec_tuners_ins.boost_freq[3];
+                break;
+        }
+        per_cpu(msm_mpdec_cpudata, cpu).boost_freq = boost_freq;
+        per_cpu(msm_mpdec_cpudata, cpu).is_boosted = false;
+        per_cpu(msm_mpdec_cpudata, cpu).revib_wq_running = false;
+        per_cpu(msm_mpdec_cpudata, cpu).boost_until = 0;
+        mutex_init(&(per_cpu(msm_mpdec_cpudata, cpu).boost_mutex));
+        mutex_init(&(per_cpu(msm_mpdec_cpudata, cpu).unboost_mutex));
+#endif
     }
 
     was_paused = true;
@@ -747,6 +1006,25 @@ static int __init msm_mpdec_init(void) {
     if (!msm_mpdec_workq)
         return -ENOMEM;
     INIT_DELAYED_WORK(&msm_mpdec_work, msm_mpdec_work_thread);
+
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+    mpdec_input_wq = create_workqueue("mpdeciwq");
+    if (!mpdec_input_wq) {
+        printk(KERN_ERR "%s: Failed to create mpdeciwq workqueue\n", __func__);
+        return -EFAULT;
+    }
+    msm_mpdec_revib_workq = create_workqueue("mpdecribwq");
+    if (!msm_mpdec_revib_workq) {
+        printk(KERN_ERR "%s: Failed to create mpdecrevibwq workqueue\n", __func__);
+        return -EFAULT;
+    }
+    for_each_possible_cpu(i) {
+        INIT_WORK(&per_cpu(mpdec_input_work, i), mpdec_input_callback);
+        INIT_DELAYED_WORK(&per_cpu(msm_mpdec_revib_work, i), msm_mpdec_revib_work_thread);
+    }
+    rc = input_register_handler(&mpdec_input_handler);
+#endif
+
     if (state != MSM_MPDEC_DISABLED)
         queue_delayed_work(msm_mpdec_workq, &msm_mpdec_work,
                            msecs_to_jiffies(msm_mpdec_tuners_ins.delay));
@@ -775,6 +1053,10 @@ static int __init msm_mpdec_init(void) {
 late_initcall(msm_mpdec_init);
 
 void msm_mpdec_exit(void) {
-    destroy_workqueue(msm_mpdec_workq);
+#ifdef CONFIG_MSM_MPDEC_INPUTBOOST_CPUMIN
+    input_unregister_handler(&mpdec_input_handler);
+    destroy_workqueue(msm_mpdec_revib_workq);
+    destroy_workqueue(mpdec_input_wq);
+#endif
     destroy_workqueue(msm_mpdec_workq);
 }
-- 
1.7.9.5

