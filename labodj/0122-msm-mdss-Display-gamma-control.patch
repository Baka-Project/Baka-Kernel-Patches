From 1758ac1f5ed5f79d5bb559d7fde29650b86ff8cf Mon Sep 17 00:00:00 2001
From: myfluxi <linflux@arcor.de>
Date: Thu, 21 Nov 2013 21:35:54 +0100
Subject: [PATCH 122/590] msm: mdss: Display gamma control

TODO: confirm rgb channels, identify other tunables, cleanup,
apply values without switching screen (off and) on.

sysfs: /sys/devices/qcom,mdss_dsi_jdi_command_ors.69/*
Signed-off-by: Francisco Franco <franciscofranco.1990@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/video/msm/mdss/mdss_dsi_panel.c |  156 ++++++++++++++++++++++++++++++-
 1 file changed, 153 insertions(+), 3 deletions(-)

diff --git a/drivers/video/msm/mdss/mdss_dsi_panel.c b/drivers/video/msm/mdss/mdss_dsi_panel.c
index 5f80d3c..5ac9116 100644
--- a/drivers/video/msm/mdss/mdss_dsi_panel.c
+++ b/drivers/video/msm/mdss/mdss_dsi_panel.c
@@ -40,6 +40,7 @@ extern void lm3630_lcd_backlight_set_level(int level);
 #endif
 
 static struct mdss_dsi_phy_ctrl phy_params;
+static struct mdss_panel_common_pdata *local_pdata;
 
 void mdss_dsi_panel_pwm_cfg(struct mdss_dsi_ctrl_pdata *ctrl)
 {
@@ -288,8 +289,8 @@ static int mdss_dsi_panel_on(struct mdss_panel_data *pdata)
 
 	pr_debug("%s: ctrl=%p ndx=%d\n", __func__, ctrl, ctrl->ndx);
 
-	if (ctrl->on_cmds.cmd_cnt)
-		mdss_dsi_panel_cmds_send(ctrl, &ctrl->on_cmds);
+	if (local_pdata->on_cmds.cmd_cnt)
+		mdss_dsi_panel_cmds_send(ctrl, &local_pdata->on_cmds);
 
 	pr_info("%s\n", __func__);
 	return 0;
@@ -1061,6 +1062,147 @@ static int debug_fs_init(struct mdss_panel_common_pdata *panel_data)
 }
 #endif
 
+static int read_local_on_cmds(char *buf, size_t cmd)
+{
+	int i, len = 0;
+	int dlen, offset = 0;
+	bool rgb;
+
+	rgb = local_pdata->on_cmds.cmds[cmd].dchdr.dlen == 0x19;
+	if (rgb)
+		offset = 1;
+
+	dlen = local_pdata->on_cmds.cmds[cmd].dchdr.dlen - offset;
+	if (!dlen)
+		return -ENOMEM;
+
+	for (i = offset; i < dlen; i++)
+		len += sprintf(buf + len, "%d ",
+			       local_pdata->on_cmds.cmds[cmd].payload[i]);
+
+	len += sprintf(buf + len, "\n");
+
+	return len;
+}
+
+static unsigned int cnt;
+
+static int write_local_on_cmds(struct device *dev, const char *buf,
+			       size_t cmd)
+{
+	int i, rc = 0;
+	int val;
+	int dlen, offset = 0;
+	bool rgb;
+	char tmp[3];
+
+	if (cnt) {
+		cnt = 0;
+		return -EINVAL;
+	}
+
+	rgb = local_pdata->on_cmds.cmds[cmd].dchdr.dlen == 0x19;
+	if (rgb)
+		offset = 1;
+
+	dlen = local_pdata->on_cmds.cmds[cmd].dchdr.dlen - offset;
+	if (!dlen)
+		return -EINVAL;
+
+	for (i = offset; i < dlen; i++) {
+		rc = sscanf(buf, "%d", &val);
+		if (rc != 1)
+			return -EINVAL;
+
+		local_pdata->on_cmds.cmds[cmd].payload[i] = val;
+		if (rgb)
+			local_pdata->on_cmds.cmds[cmd + 2].payload[i] = val;
+
+		sscanf(buf, "%s", tmp);
+		buf += strlen(tmp) + 1;
+		cnt = strlen(tmp);
+	}
+
+	return rc;
+}
+
+/************************** sysfs interface ************************/
+
+#define read_one(file_name, cmd)				\
+static ssize_t read_##file_name					\
+(struct device *dev, struct device_attribute *attr, char *buf)  \
+{								\
+	return read_local_on_cmds(buf, cmd);			\
+}
+
+read_one(kgamma_r,   7);
+read_one(kgamma_g,  11);
+read_one(kgamma_b,  15);
+read_one(kgamma_1,   1);
+read_one(kgamma_3,   3);
+read_one(kgamma_5,   5);
+read_one(kgamma_20, 20);
+read_one(kgamma_22, 22);
+read_one(kgamma_28, 28);
+read_one(kgamma_31, 31);
+read_one(kgamma_32, 32);
+
+#define write_one(file_name, cmd)				\
+static ssize_t write_##file_name				\
+(struct device *dev, struct device_attribute *attr, 		\
+		const char *buf, size_t count)  		\
+{								\
+	return write_local_on_cmds(dev, buf, cmd);		\
+}
+
+write_one(kgamma_r,   7);
+write_one(kgamma_g,  11);
+write_one(kgamma_b,  15);
+write_one(kgamma_1,   1);
+write_one(kgamma_3,   3);
+write_one(kgamma_5,   5);
+write_one(kgamma_20, 20);
+write_one(kgamma_22, 22);
+write_one(kgamma_28, 28);
+write_one(kgamma_31, 31);
+write_one(kgamma_32, 32);
+
+#define define_one_rw(_name)					\
+static DEVICE_ATTR(_name, 0644, read_##_name, write_##_name);
+
+define_one_rw(kgamma_r);
+define_one_rw(kgamma_g);
+define_one_rw(kgamma_b);
+define_one_rw(kgamma_1);
+define_one_rw(kgamma_3);
+define_one_rw(kgamma_5);
+define_one_rw(kgamma_20);
+define_one_rw(kgamma_22);
+define_one_rw(kgamma_28);
+define_one_rw(kgamma_31);
+define_one_rw(kgamma_32);
+
+static struct attribute *dsi_panel_attributes[] = {
+	&dev_attr_kgamma_r.attr,
+	&dev_attr_kgamma_g.attr,
+	&dev_attr_kgamma_b.attr,
+	&dev_attr_kgamma_1.attr,
+	&dev_attr_kgamma_3.attr,
+	&dev_attr_kgamma_5.attr,
+	&dev_attr_kgamma_20.attr,
+	&dev_attr_kgamma_22.attr,
+	&dev_attr_kgamma_28.attr,
+	&dev_attr_kgamma_31.attr,
+	&dev_attr_kgamma_32.attr,
+	NULL
+};
+
+static struct attribute_group dsi_panel_attribute_group = {
+	.attrs = dsi_panel_attributes
+};
+
+/**************************** sysfs end **************************/
+
 static int __devinit mdss_dsi_panel_probe(struct platform_device *pdev)
 {
 	int rc = 0;
@@ -1090,11 +1232,19 @@ static int __devinit mdss_dsi_panel_probe(struct platform_device *pdev)
 	if (rc)
 		return rc;
 
+	local_pdata = &vendor_pdata;
+	if (!local_pdata)
+		return -EINVAL;
+
 #ifdef CONFIG_DEBUG_FS
 	debug_fs_init(&vendor_pdata);
 #endif
 
-	return 0;
+	rc = sysfs_create_group(&pdev->dev.kobj, &dsi_panel_attribute_group);
+	if (rc)
+		pr_err("%s: sysfs create failed: %d\n", panel_name, rc);
+
+	return rc;
 }
 
 static const struct of_device_id mdss_dsi_panel_match[] = {
-- 
1.7.9.5

