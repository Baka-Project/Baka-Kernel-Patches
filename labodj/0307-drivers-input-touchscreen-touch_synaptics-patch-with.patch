From 40cbf8a8bbdf1e2ac88639bf4db3911994f7e333 Mon Sep 17 00:00:00 2001
From: Dennis Rassmann <showp1984@gmail.com>
Date: Sun, 10 Nov 2013 03:49:49 +0100
Subject: [PATCH 307/590] drivers/input/touchscreen/touch_synaptics: patch
 with sweep2wake hooks as well

Signed-off-by: Dennis Rassmann <showp1984@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/input/touchscreen/touch_synaptics.c |  139 ++++++++++++++++++++++++++-
 1 file changed, 137 insertions(+), 2 deletions(-)

diff --git a/drivers/input/touchscreen/touch_synaptics.c b/drivers/input/touchscreen/touch_synaptics.c
index 0ae55b7..49d75e5 100644
--- a/drivers/input/touchscreen/touch_synaptics.c
+++ b/drivers/input/touchscreen/touch_synaptics.c
@@ -38,6 +38,10 @@
 
 #include "SynaImage.h"
 
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE_QPNP_PON
+#include <linux/input/sweep2wake.h>
+#endif
+
 static struct workqueue_struct *synaptics_wq;
 
 /* RMI4 spec from 511-000405-01 Rev.D
@@ -245,6 +249,11 @@ static int synaptics_init_panel(struct i2c_client *client,
 static int get_ic_info(struct synaptics_ts_data *ts,
 					struct synaptics_ts_fw_info *fw_info);
 
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+/* gives back true if only one touch is recognized */
+extern bool is_single_touch(struct synaptics_ts_data *);
+#endif
+
 /* touch_asb_input_report
  *
  * finger status report
@@ -262,6 +271,9 @@ static void touch_abs_input_report(struct synaptics_ts_data *ts)
 				ts->ts_data.curr_data[id].state != ABS_RELEASE);
 
 		if (ts->ts_data.curr_data[id].state != ABS_RELEASE) {
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+			detect_sweep2wake(ts->ts_data.curr_data[id].x_position, ts->ts_data.curr_data[id].y_position, is_single_touch(ts));
+#endif
 			input_report_abs(ts->input_dev, ABS_MT_POSITION_X,
 					ts->ts_data.curr_data[id].x_position);
 			input_report_abs(ts->input_dev, ABS_MT_POSITION_Y,
@@ -275,6 +287,11 @@ static void touch_abs_input_report(struct synaptics_ts_data *ts)
 		}
 		else {
 			ts->ts_data.curr_data[id].state = 0;
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+			if (s2w_switch > 0) {
+				sweep2wake_reset();
+			}
+#endif
 		}
 	}
 
@@ -470,6 +487,12 @@ static void touch_fw_upgrade_func(struct work_struct *work_fw_upgrade)
 
 	if (ts->curr_pwr_state == POWER_ON) {
 		disable_irq(ts->client->irq);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+		if (irq_wake) {
+			irq_wake = false;
+			disable_irq_wake(ts->client->irq);
+		}
+#endif
 	}
 	else {
 		touch_power_cntl(ts, POWER_ON);
@@ -488,6 +511,12 @@ static void touch_fw_upgrade_func(struct work_struct *work_fw_upgrade)
 	}
 	else {
 		enable_irq(ts->client->irq);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+		if (!irq_wake) {
+			irq_wake = true;
+			enable_irq_wake(ts->client->irq);
+		}
+#endif
 
 		touch_ic_init(ts);
 
@@ -517,6 +546,12 @@ static void touch_init_func(struct work_struct *work_init)
 	TOUCH_DEBUG_TRACE("%s\n", __func__);
 
 	enable_irq(ts->client->irq);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+	if (!irq_wake) {
+		irq_wake = true;
+		enable_irq_wake(ts->client->irq);
+	}
+#endif
 
 	/* Specific device initialization */
 	touch_ic_init(ts);
@@ -534,8 +569,20 @@ static void touch_recover_func(struct work_struct *work_recover)
 				struct synaptics_ts_data, work_recover);
 
 	disable_irq(ts->client->irq);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+	if (irq_wake) {
+		irq_wake = false;
+		disable_irq_wake(ts->client->irq);
+	}
+#endif
 	safety_reset(ts);
 	enable_irq(ts->client->irq);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+	if (!irq_wake) {
+		irq_wake = true;
+		enable_irq_wake(ts->client->irq);
+	}
+#endif
 	touch_ic_init(ts);
 }
 
@@ -579,6 +626,12 @@ static int touch_ic_init(struct synaptics_ts_data *ts)
 err_out_retry:
 	ts->ic_init_err_cnt++;
 	disable_irq_nosync(ts->client->irq);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+	if (irq_wake) {
+		irq_wake = false;
+		disable_irq_wake(ts->client->irq);
+	}
+#endif
 	safety_reset(ts);
 	queue_delayed_work(synaptics_wq, &ts->work_init, msecs_to_jiffies(10));
 
@@ -1455,6 +1508,12 @@ static ssize_t store_ts_reset(struct device *dev,
 	sscanf(buf, "%s", string);
 
 	disable_irq_nosync(ts->client->irq);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+	if (irq_wake) {
+		irq_wake = false;
+		disable_irq_wake(ts->client->irq);
+	}
+#endif
 
 	cancel_delayed_work_sync(&ts->work_init);
 
@@ -1489,6 +1548,12 @@ static ssize_t store_ts_reset(struct device *dev,
 	}
 
 	enable_irq(ts->client->irq);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+	if (!irq_wake) {
+		irq_wake = true;
+		enable_irq_wake(ts->client->irq);
+	}
+#endif
 
 	if (saved_state == POWER_ON || saved_state == POWER_WAKE)
 		touch_ic_init(ts);
@@ -1614,7 +1679,10 @@ static int synaptics_ts_stop(struct synaptics_ts_data *ts)
 	if (!ts->curr_resume_state) {
 		return 0;
 	}
-
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+	if (s2w_switch == 0)
+#endif
+	{
 	ts->curr_resume_state = 0;
 
 	if (ts->fw_info.fw_upgrade.is_downloading == UNDER_DOWNLOADING) {
@@ -1623,9 +1691,11 @@ static int synaptics_ts_stop(struct synaptics_ts_data *ts)
 	}
 
 	disable_irq(ts->client->irq);
+
 	cancel_delayed_work_sync(&ts->work_init);
 	release_all_ts_event(ts);
 	touch_power_cntl(ts, POWER_OFF);
+	}
 
 	return 0;
 }
@@ -1641,9 +1711,15 @@ static int lcd_notifier_callback(struct notifier_block *this,
 	switch (event) {
 	case LCD_EVENT_ON_START:
 		synaptics_ts_start(ts);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+		scr_suspended = false;
+#endif
 		break;
 	case LCD_EVENT_OFF_START:
 		synaptics_ts_stop(ts);
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+		scr_suspended = true;
+#endif
 		break;
 	default:
 		break;
@@ -1652,6 +1728,61 @@ static int lcd_notifier_callback(struct notifier_block *this,
 	return 0;
 }
 
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+static ssize_t touch_synaptics_sweep2wake_show(struct device *dev,
+               struct device_attribute *attr, char *buf)
+{
+       size_t count = 0;
+
+       count += sprintf(buf, "%d\n", s2w_switch);
+
+       return count;
+}
+
+static ssize_t touch_synaptics_sweep2wake_dump(struct device *dev,
+               struct device_attribute *attr, const char *buf, size_t count)
+{
+       if (buf[0] >= '0' && buf[0] <= '2' && buf[1] == '\n')
+                if (s2w_switch != buf[0] - '0')
+                       s2w_switch = buf[0] - '0';
+
+       return count;
+}
+
+static DEVICE_ATTR(sweep2wake, (S_IWUSR|S_IRUGO),
+       touch_synaptics_sweep2wake_show, touch_synaptics_sweep2wake_dump);
+#endif
+
+static struct kobject *android_touch_kobj;
+
+static int touch_synaptics_sysfs_init(void)
+{
+       int ret ;
+
+       android_touch_kobj = kobject_create_and_add("android_touch", NULL) ;
+       if (android_touch_kobj == NULL) {
+               pr_debug("[touch_synaptics]%s: subsystem_register failed\n", __func__);
+               ret = -ENOMEM;
+               return ret;
+       }
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+       ret = sysfs_create_file(android_touch_kobj, &dev_attr_sweep2wake.attr);
+       if (ret) {
+               printk(KERN_ERR "[sweep2wake]%s: sysfs_create_file failed\n", __func__);
+               return ret;
+       }
+#endif
+       return 0 ;
+}
+
+static void touch_synaptics_sysfs_deinit(void)
+{
+#ifdef CONFIG_TOUCHSCREEN_SWEEP2WAKE
+       sysfs_remove_file(android_touch_kobj, &dev_attr_sweep2wake.attr);
+#endif
+       kobject_del(android_touch_kobj);
+}
+
 static int synaptics_ts_probe(
 	struct i2c_client *client, const struct i2c_device_id *id)
 {
@@ -1662,6 +1793,8 @@ static int synaptics_ts_probe(
 
 	TOUCH_DEBUG_TRACE("%s\n", __func__);
 
+	touch_synaptics_sysfs_init();
+
 	synaptics_wq = create_singlethread_workqueue("synaptics_wq");
 	if (!synaptics_wq)
 		return -ENOMEM;
@@ -1776,7 +1909,7 @@ static int synaptics_ts_probe(
 	gpio_direction_input(ts->pdata->irq_gpio);
 
 	ret = request_threaded_irq(client->irq, NULL, touch_irq_handler,
-			IRQF_TRIGGER_FALLING | IRQF_ONESHOT, client->name, ts);
+			IRQF_TRIGGER_FALLING | IRQF_ONESHOT | IRQF_NO_SUSPEND, client->name, ts);
 
 	if (ret < 0) {
 		TOUCH_ERR_MSG("request_irq failed. use polling mode\n");
@@ -1839,6 +1972,8 @@ static int synaptics_ts_remove(struct i2c_client *client)
 {
 	struct synaptics_ts_data *ts = i2c_get_clientdata(client);
 
+	touch_synaptics_sysfs_deinit();
+
 	/* Power off */
 	touch_power_cntl(ts, POWER_OFF);
 	free_irq(client->irq, ts);
-- 
1.7.9.5

