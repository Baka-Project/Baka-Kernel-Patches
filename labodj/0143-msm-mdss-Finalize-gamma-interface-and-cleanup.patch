From 4556c6c6fd96dd6f2059ece0ab81b1b0b3f3d011 Mon Sep 17 00:00:00 2001
From: myfluxi <linflux@arcor.de>
Date: Thu, 28 Nov 2013 17:20:08 +0100
Subject: [PATCH 143/590] msm: mdss: Finalize gamma interface and cleanup

- Remove all sysfs files of unused commands
- Remove auto sync for negative polarities, these must be written separately
- Protect offset bit of white point command as well
- Apply white point bit 2 as duplicate of bit 1

Signed-off-by: Francisco Franco <franciscofranco.1990@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/video/msm/mdss/mdss_dsi_panel.c |   59 +++++++++++--------------------
 1 file changed, 20 insertions(+), 39 deletions(-)

diff --git a/drivers/video/msm/mdss/mdss_dsi_panel.c b/drivers/video/msm/mdss/mdss_dsi_panel.c
index 3882f94..e0480bf 100644
--- a/drivers/video/msm/mdss/mdss_dsi_panel.c
+++ b/drivers/video/msm/mdss/mdss_dsi_panel.c
@@ -1066,18 +1066,14 @@ static int debug_fs_init(struct mdss_panel_common_pdata *panel_data)
 static int read_local_on_cmds(char *buf, size_t cmd)
 {
 	int i, len = 0;
-	int dlen, offset = 0;
-	bool rgb;
+	int dlen;
 
-	rgb = local_pdata->on_cmds.cmds[cmd].dchdr.dlen == 0x19;
-	if (rgb)
-		offset = 1;
-
-	dlen = local_pdata->on_cmds.cmds[cmd].dchdr.dlen - offset;
+	dlen = local_pdata->on_cmds.cmds[cmd].dchdr.dlen - 1;
 	if (!dlen)
 		return -ENOMEM;
 
-	for (i = offset; i < dlen; i++)
+	/* don't print first and last bits */
+	for (i = 1; i < dlen; i++)
 		len += sprintf(buf + len, "%d ",
 			       local_pdata->on_cmds.cmds[cmd].payload[i]);
 
@@ -1092,9 +1088,8 @@ static int write_local_on_cmds(struct device *dev, const char *buf,
 			       size_t cmd)
 {
 	int i, rc = 0;
+	int dlen;
 	unsigned int val;
-	int dlen, offset = 0;
-	bool rgb;
 	char tmp[3];
 	struct mdss_dsi_ctrl_pdata *ctrl = NULL;
 	struct mdss_panel_common_pdata *prev_local_data;
@@ -1112,18 +1107,18 @@ static int write_local_on_cmds(struct device *dev, const char *buf,
 	ctrl = container_of(cmds_panel_data, struct mdss_dsi_ctrl_pdata,
 				panel_data);
 
-	rgb = local_pdata->on_cmds.cmds[cmd].dchdr.dlen == 0x19;
-	if (rgb)
-		offset = 1;
-
-	dlen = local_pdata->on_cmds.cmds[cmd].dchdr.dlen - offset;
+	/*
+	 * Last bit is not written because it's either fixed at 0x00 for
+	 * RGB or a duplicate of the previous bit for the white point.
+	 */
+	dlen = local_pdata->on_cmds.cmds[cmd].dchdr.dlen - 1;
 	if (!dlen)
 		return -EINVAL;
 
 	prev_local_data = local_pdata;
 
-	for (i = offset; i < dlen; i++) {
-		rc = sscanf(buf, "%d", &val);
+	for (i = 1; i < dlen; i++) {
+		rc = sscanf(buf, "%u", &val);
 		if (rc != 1)
 			return -EINVAL;
 
@@ -1134,14 +1129,16 @@ static int write_local_on_cmds(struct device *dev, const char *buf,
 		}
 
 		local_pdata->on_cmds.cmds[cmd].payload[i] = val;
-		if (rgb)
-			local_pdata->on_cmds.cmds[cmd + 2].payload[i] = val;
+		/* white point value must be duplicated */
+		if (cmd == 5)
+			local_pdata->on_cmds.cmds[cmd].payload[i + 1] = val;
 
 		sscanf(buf, "%s", tmp);
 		buf += strlen(tmp) + 1;
 		cnt = strlen(tmp);
 	}
 
+	/* send commands */
 	if (local_pdata->on_cmds.cmd_cnt)
 		mdss_dsi_panel_cmds_send(ctrl, &local_pdata->on_cmds);
 
@@ -1159,17 +1156,13 @@ static ssize_t read_##file_name					\
 	return read_local_on_cmds(buf, cmd);			\
 }
 
+read_one(kgamma_w,   5);
 read_one(kgamma_rp,  7);
 read_one(kgamma_rn,  9);
 read_one(kgamma_gp, 11);
 read_one(kgamma_gn, 13);
 read_one(kgamma_bp, 15);
 read_one(kgamma_bn, 17);
-read_one(kgamma_1,   1);
-read_one(kgamma_3,   3);
-read_one(kgamma_w,   5);
-read_one(kgamma_20, 20);
-read_one(kgamma_22, 22);
 
 #define write_one(file_name, cmd)				\
 static ssize_t write_##file_name				\
@@ -1179,45 +1172,33 @@ static ssize_t write_##file_name				\
 	return write_local_on_cmds(dev, buf, cmd);		\
 }
 
+write_one(kgamma_w,   5);
 write_one(kgamma_rp,  7);
 write_one(kgamma_rn,  9);
 write_one(kgamma_gp, 11);
 write_one(kgamma_gn, 13);
 write_one(kgamma_bp, 15);
 write_one(kgamma_bn, 17);
-write_one(kgamma_1,   1);
-write_one(kgamma_3,   3);
-write_one(kgamma_w,   5);
-write_one(kgamma_20, 20);
-write_one(kgamma_22, 22);
 
 #define define_one_rw(_name)					\
 static DEVICE_ATTR(_name, 0644, read_##_name, write_##_name);
 
+define_one_rw(kgamma_w);
 define_one_rw(kgamma_rp);
 define_one_rw(kgamma_rn);
 define_one_rw(kgamma_gp);
 define_one_rw(kgamma_gn);
 define_one_rw(kgamma_bp);
 define_one_rw(kgamma_bn);
-define_one_rw(kgamma_1);
-define_one_rw(kgamma_3);
-define_one_rw(kgamma_w);
-define_one_rw(kgamma_20);
-define_one_rw(kgamma_22);
 
 static struct attribute *dsi_panel_attributes[] = {
+	&dev_attr_kgamma_w.attr,
 	&dev_attr_kgamma_rp.attr,
 	&dev_attr_kgamma_rn.attr,
 	&dev_attr_kgamma_gp.attr,
 	&dev_attr_kgamma_gn.attr,
 	&dev_attr_kgamma_bp.attr,
 	&dev_attr_kgamma_bn.attr,
-	&dev_attr_kgamma_1.attr,
-	&dev_attr_kgamma_3.attr,
-	&dev_attr_kgamma_w.attr,
-	&dev_attr_kgamma_20.attr,
-	&dev_attr_kgamma_22.attr,
 	NULL
 };
 
-- 
1.7.9.5

