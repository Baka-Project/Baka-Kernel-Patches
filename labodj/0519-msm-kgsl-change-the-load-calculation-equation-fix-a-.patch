From d62808030130bea555d93fd090a599e04af99522 Mon Sep 17 00:00:00 2001
From: franciscofranco <franciscofranco.1990@gmail.com>
Date: Wed, 25 Dec 2013 23:33:50 +0000
Subject: [PATCH 519/590] msm: kgsl: change the load calculation equation &
 fix a couple of bugs, one of 'em was keeping the
 GPU on 320MHz if the GPU was not sleeping.

Signed-off-by: franciscofranco <franciscofranco.1990@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/gpu/msm/kgsl_pwrscale_trustzone.c |   63 ++++++++++-------------------
 1 file changed, 21 insertions(+), 42 deletions(-)

diff --git a/drivers/gpu/msm/kgsl_pwrscale_trustzone.c b/drivers/gpu/msm/kgsl_pwrscale_trustzone.c
index 3bf9ff5..82de6d7 100644
--- a/drivers/gpu/msm/kgsl_pwrscale_trustzone.c
+++ b/drivers/gpu/msm/kgsl_pwrscale_trustzone.c
@@ -65,10 +65,12 @@ static struct clk_scaling_stats {
 	unsigned long total_time_ms;
 	unsigned long busy_time_ms;
 	unsigned long threshold;
+	unsigned int load;
 } gpu_stats = {
 	.total_time_ms = 0,
 	.busy_time_ms = 0,
 	.threshold = 0,
+	.load = 0,
 };
 
 static ssize_t tz_governor_show(struct kgsl_device *device,
@@ -153,51 +155,37 @@ static void tz_idle(struct kgsl_device *device, struct kgsl_pwrscale *pwrscale)
 	priv->bin.total_time += stats.total_time;
 	priv->bin.busy_time += stats.busy_time;
 
+	if (stats.total_time == 0 || priv->bin.busy_time < FLOOR)
+		return;
+
 	if (time_is_after_jiffies(window_time + msecs_to_jiffies(sample_time_ms)))
 		return;
 
-	gpu_stats.total_time_ms = jiffies_to_msecs(jiffies - window_time);
-	do_div(priv->bin.busy_time, USEC_PER_MSEC);
-	gpu_stats.busy_time_ms = priv->bin.busy_time;
+	if (stats.busy_time >= 1 << 24 || stats.total_time >= 1 << 24) 
+	{
+		stats.busy_time >>= 7;
+		stats.total_time >>= 7;
+	}
 
-	/* if busy time is 0 and we're already on the lowest pwrlevel, bail early */
-	if (!gpu_stats.busy_time_ms && pwr->active_pwrlevel == pwr->min_pwrlevel)
-		return;
+	gpu_stats.load = (100 * priv->bin.busy_time);
+	do_div(gpu_stats.load, priv->bin.total_time);
 
 	if (debug)
 	{ 
-		pr_info("GPU current load: %lu\n", gpu_stats.busy_time_ms);
-		pr_info("GPU total time load: %lu\n", gpu_stats.total_time_ms);
+		pr_info("GPU load: %u\n", gpu_stats.load);
 		pr_info("GPU frequency: %d\n", 
 								pwr->pwrlevels[pwr->active_pwrlevel].gpu_freq);
 	}
 
-	/*
-	 * The below table is from Mako's Adreno 320 - needs update to match
-	 * the Adreno 330 just for the sake of the comment itself
-	 * 
-	 * Scale the up_threshold value based on the active_pwrlevel. We have
-	 * 4 different levels:
-	 * 3 = 128MHz
-	 * 2 = 200MHz
-	 * 1 = 320MHz
-	 * 0 = 400MHz
-	 *
-	 * Making the up_threshold value lower if the active level is 2 or 3 will
-	 * possibly improve smoothness while scrolling or open applications with
-	 * a lot of images and what not. With a Full HD panel like Flo/Deb I could
-	 * notice a few frame drops while this algorithm didn't scale past 128MHz
-	 * on simple operations. This is fixed with up_threshold being scaled
-	 */
+	gpu_stats.threshold = up_threshold;
 
 	if (pwr->active_pwrlevel == pwr->min_pwrlevel)
 		gpu_stats.threshold = up_threshold / pwr->active_pwrlevel;
-	else if (pwr->active_pwrlevel > 0)
+	else if (pwr->active_pwrlevel < pwr->min_pwrlevel &&
+				pwr->active_pwrlevel > pwr->max_pwrlevel)
 		gpu_stats.threshold = up_threshold - up_differential;
-	else
-		gpu_stats.threshold = up_threshold;
 
-	if ((gpu_stats.busy_time_ms * 100) > (gpu_stats.total_time_ms * gpu_stats.threshold))
+	if (gpu_stats.load > gpu_stats.threshold)
 	{
 		if (gpu_pref_counter < 100)
 			++gpu_pref_counter;
@@ -206,12 +194,12 @@ static void tz_idle(struct kgsl_device *device, struct kgsl_pwrscale *pwrscale)
 			kgsl_pwrctrl_pwrlevel_change(device,
 					     pwr->active_pwrlevel - 1);
 	}
-	else if ((gpu_stats.busy_time_ms * 100) < (gpu_stats.total_time_ms * down_threshold))
+	else if (gpu_stats.load < down_threshold)
 	{
 		if (gpu_pref_counter > 0)
 			--gpu_pref_counter;
 
-		if (pwr->active_pwrlevel < pwr->max_pwrlevel)
+		if (pwr->active_pwrlevel < pwr->min_pwrlevel)
 			kgsl_pwrctrl_pwrlevel_change(device,
 					     pwr->active_pwrlevel + 1);
 	}
@@ -233,20 +221,11 @@ static void tz_sleep(struct kgsl_device *device,
 	struct tz_priv *priv = pwrscale->priv;
 	struct kgsl_pwrctrl *pwr = &device->pwrctrl;
 
-	/*
-	 * We don't want the GPU to go to sleep if the busy_time_ms calculated on
-	 * idle routine is not below down_threshold. This is just a measure of
-	 * precaution
-	 */
-	if ((gpu_stats.busy_time_ms * 100) < 
-			(gpu_stats.total_time_ms * down_threshold))
-	{
-		kgsl_pwrctrl_pwrlevel_change(device, pwr->min_pwrlevel);
-	}
+	kgsl_pwrctrl_pwrlevel_change(device, pwr->min_pwrlevel);
 
 	if (debug)
 	{
-		pr_info("GPU frequency: %d\n", 
+		pr_info("GPU sleep frequency: %d\n", 
 								pwr->pwrlevels[pwr->active_pwrlevel].gpu_freq);
 	}
 
-- 
1.7.9.5

