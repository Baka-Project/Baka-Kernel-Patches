From 13ef40f0bc31fbd9fee7658b97a4ce3b2021b243 Mon Sep 17 00:00:00 2001
From: Francisco Franco <franciscofranco.1990@gmail.com>
Date: Tue, 26 Nov 2013 18:18:19 +0000
Subject: [PATCH 117/590] Remove load_stats file as we're not going to use it
 anymore, instead its functionality is being
 somewhat merged to the hotplug driver for ease of
 use and merge to another devices.

Signed-off-by: Francisco Franco <franciscofranco.1990@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 arch/arm/kernel/Makefile     |    2 +-
 arch/arm/kernel/load_stats.c |  166 ------------------------------------------
 2 files changed, 1 insertion(+), 167 deletions(-)
 delete mode 100644 arch/arm/kernel/load_stats.c

diff --git a/arch/arm/kernel/Makefile b/arch/arm/kernel/Makefile
index b06a37f..a985850 100644
--- a/arch/arm/kernel/Makefile
+++ b/arch/arm/kernel/Makefile
@@ -18,7 +18,7 @@ CFLAGS_REMOVE_return_address.o = -pg
 obj-y		:= elf.o entry-armv.o entry-common.o irq.o opcodes.o \
 		   process.o ptrace.o return_address.o sched_clock.o \
 		   setup.o signal.o stacktrace.o sys_arm.o time.o traps.o \
-		   mako_hotplug.o load_stats.o
+		   mako_hotplug.o
 
 obj-$(CONFIG_DEPRECATED_PARAM_STRUCT) += compat.o
 
diff --git a/arch/arm/kernel/load_stats.c b/arch/arm/kernel/load_stats.c
deleted file mode 100644
index 16caffe..0000000
--- a/arch/arm/kernel/load_stats.c
+++ /dev/null
@@ -1,166 +0,0 @@
-/* Copyright (c) 2010-2013, The Linux Foundation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-/*
- * Qualcomm MSM Runqueue Stats and cpu utilization Interface for Userspace
- */
-#include <linux/kernel.h>
-#include <linux/init.h>
-#include <linux/module.h>
-#include <linux/hrtimer.h>
-#include <linux/cpu.h>
-#include <linux/kobject.h>
-#include <linux/sysfs.h>
-#include <linux/notifier.h>
-#include <linux/slab.h>
-#include <linux/workqueue.h>
-#include <linux/sched.h>
-#include <linux/spinlock.h>
-#include <linux/rq_stats.h>
-#include <linux/cpufreq.h>
-#include <linux/kernel_stat.h>
-#include <linux/tick.h>
-#include <asm/smp_plat.h>
-#include "../mach-msm/acpuclock.h"
-#include <linux/suspend.h>
-#include <linux/hotplug.h>
-
-struct cpu_load_data {
-	cputime64_t prev_cpu_idle;
-	cputime64_t prev_cpu_wall;
-	cputime64_t prev_cpu_iowait;
-	unsigned int avg_load_maxfreq;
-	unsigned int prev_avg_load_maxfreq;
-	unsigned int samples;
-	unsigned int window_size;
-	unsigned int cur_freq;
-	unsigned int policy_max;
-	cpumask_var_t related_cpus;
-	struct mutex cpu_load_mutex;
-};
-
-static DEFINE_PER_CPU(struct cpu_load_data, cpuload);
-
-static inline u64 get_cpu_idle_time_jiffy(unsigned int cpu, u64 *wall)
-{
-	u64 idle_time;
-	u64 cur_wall_time;
-	u64 busy_time;
-
-	cur_wall_time = jiffies64_to_cputime64(get_jiffies_64());
-
-	busy_time  = kcpustat_cpu(cpu).cpustat[CPUTIME_USER];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_SYSTEM];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_IRQ];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_SOFTIRQ];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_STEAL];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_NICE];
-
-	idle_time = cur_wall_time - busy_time;
-	if (wall)
-		*wall = jiffies_to_usecs(cur_wall_time);
-
-	return jiffies_to_usecs(idle_time);
-}
-
-static inline cputime64_t get_cpu_idle_time(unsigned int cpu, cputime64_t *wall)
-{
-	u64 idle_time = get_cpu_idle_time_us(cpu, NULL);
-
-	if (idle_time == -1ULL)
-		return get_cpu_idle_time_jiffy(cpu, wall);
-	else
-		idle_time += get_cpu_iowait_time_us(cpu, wall);
-
-	return idle_time;
-}
-
-static inline cputime64_t get_cpu_iowait_time(unsigned int cpu,
-							cputime64_t *wall)
-{
-	u64 iowait_time = get_cpu_iowait_time_us(cpu, wall);
-
-	if (iowait_time == -1ULL)
-		return 0;
-
-	return iowait_time;
-}
-
-static inline int update_average_load(unsigned int cpu)
-{
-	struct cpufreq_policy cpu_policy;
-	struct cpu_load_data *pcpu = &per_cpu(cpuload, cpu);
-	cputime64_t cur_wall_time, cur_idle_time, cur_iowait_time;
-	unsigned int idle_time, wall_time, iowait_time;
-	unsigned int cur_load, load_at_max_freq;
-
-	cpufreq_get_policy(&cpu_policy, cpu);
-
-	cur_idle_time = get_cpu_idle_time(cpu, &cur_wall_time);
-	cur_iowait_time = get_cpu_iowait_time(cpu, &cur_wall_time);
-
-	wall_time = (unsigned int) (cur_wall_time - pcpu->prev_cpu_wall);
-	pcpu->prev_cpu_wall = cur_wall_time;
-
-	idle_time = (unsigned int) (cur_idle_time - pcpu->prev_cpu_idle);
-	pcpu->prev_cpu_idle = cur_idle_time;
-
-	iowait_time = (unsigned int) (cur_iowait_time - pcpu->prev_cpu_iowait);
-	pcpu->prev_cpu_iowait = cur_iowait_time;
-
-	if (idle_time >= iowait_time)
-		idle_time -= iowait_time;
-
-	if (unlikely(!wall_time || wall_time < idle_time))
-		return 0;
-
-	cur_load = 100 * (wall_time - idle_time) / wall_time;
-
-	/* Calculate the scaled load across CPU */
-	load_at_max_freq = (cur_load * cpu_policy.cur) / pcpu->policy_max;
-
-	pcpu->window_size = wall_time;
-	pcpu->avg_load_maxfreq = (pcpu->prev_avg_load_maxfreq + load_at_max_freq) / 2;
-	
-	return pcpu->avg_load_maxfreq;
-}
-
-unsigned inline int report_load_at_max_freq(int cpu)
-{
-	struct cpu_load_data *pcpu;
-	unsigned int total_load = 0;
-	pcpu = &per_cpu(cpuload, cpu);
-	total_load = update_average_load(cpu);
-	pcpu->prev_avg_load_maxfreq = pcpu->avg_load_maxfreq;
-	pcpu->avg_load_maxfreq = 0;
-
-	return total_load;
-}
-
-static int __init msm_rq_stats_init(void)
-{
-	int i;
-	struct cpufreq_policy cpu_policy;
-
-	for_each_possible_cpu(i) {
-		struct cpu_load_data *pcpu = &per_cpu(cpuload, i);
-		cpufreq_get_policy(&cpu_policy, i);
-		pcpu->policy_max = cpu_policy.max;
-		if (cpu_online(i))
-			pcpu->cur_freq = acpuclk_get_rate(i);
-		cpumask_copy(pcpu->related_cpus, cpu_policy.cpus);
-	}
-
-	return 0;
-}
-late_initcall(msm_rq_stats_init);
-
-- 
1.7.9.5

