From b95204786fa64a65fa8b9d9ff13bc9952ac67e61 Mon Sep 17 00:00:00 2001
From: LaboDJ <jacopolabardi@gmail.com>
Date: Sun, 5 Jan 2014 03:49:57 +0100
Subject: [PATCH 586/590] fastcharge: initial Nexus 5 adaptation

added custom charge levels for better control over fastcharge

Signed-off-by: Paul Reioux <reioux@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 arch/arm/mach-msm/Kconfig       |    7 +++
 arch/arm/mach-msm/Makefile      |    3 +-
 arch/arm/mach-msm/fastchg.c     |  122 ++++++++++++++++++++++++++++++++-------
 drivers/power/bq24192_charger.c |   56 ++++++++++++++++++
 drivers/usb/dwc3/dwc3_otg.c     |   13 +++++
 include/linux/fastchg.h         |   19 +++++-
 6 files changed, 195 insertions(+), 25 deletions(-)

diff --git a/arch/arm/mach-msm/Kconfig b/arch/arm/mach-msm/Kconfig
index fd3347a..945865a 100644
--- a/arch/arm/mach-msm/Kconfig
+++ b/arch/arm/mach-msm/Kconfig
@@ -3062,4 +3062,11 @@ config WALL_CLK_SYSFS
 	 Support the wallclk directory in sysfs filesystem to enable the
 	 wall clock simulation and read the current SFN.
 
+config FORCE_FAST_CHARGE
+	bool "Force AC charge mode at will"
+	default y
+	help
+	  A simple sysfs interface to force adapters that
+	  are detected as USB to charge as AC.
+
 endif
diff --git a/arch/arm/mach-msm/Makefile b/arch/arm/mach-msm/Makefile
index 55451b8..e04ec25 100644
--- a/arch/arm/mach-msm/Makefile
+++ b/arch/arm/mach-msm/Makefile
@@ -434,5 +434,4 @@ obj-$(CONFIG_CPU_FREQ_MSM) += cpufreq.o
 
 obj-$(CONFIG_WALL_CLK) += wallclk.o
 obj-$(CONFIG_WALL_CLK_SYSFS) += wallclk_sysfs.o
-
-obj-y += fastchg.o
+obj-$(CONFIG_FORCE_FAST_CHARGE) += fastchg.o
diff --git a/arch/arm/mach-msm/fastchg.c b/arch/arm/mach-msm/fastchg.c
index 9da2cab..2c3f7f9 100644
--- a/arch/arm/mach-msm/fastchg.c
+++ b/arch/arm/mach-msm/fastchg.c
@@ -1,7 +1,8 @@
 /*
- * Author: Chad Froebel <chadfroebel@gmail.com>
- *
- * Simple port to Nexus 4 : motley <motley.slate@gmail.com>
+ * based on sysfs interface from:
+ *	Chad Froebel <chadfroebel@gmail.com> &
+ *	Jean-Pierre Rasquin <yank555.lu@gmail.com>
+ * for backwards compatibility
  *
  * This software is licensed under the terms of the GNU General Public
  * License version 2, as published by the Free Software Foundation, and
@@ -19,45 +20,116 @@
  *
  *   0 - disabled (default)
  *   1 - substitute AC to USB unconditional
+ *   2 - custom
 */
 
+#include <linux/module.h>
 #include <linux/kobject.h>
 #include <linux/sysfs.h>
 #include <linux/fastchg.h>
 
+#define FAST_CHARGE_VERSION	"version 1.0 by Paul Reioux"
+
 int force_fast_charge;
+int fast_charge_level;
 
 /* sysfs interface for "force_fast_charge" */
-static ssize_t force_fast_charge_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+static ssize_t force_fast_charge_show(struct kobject *kobj,
+			struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", force_fast_charge);
+}
+
+static ssize_t force_fast_charge_store(struct kobject *kobj,
+			struct kobj_attribute *attr, const char *buf,
+			size_t count)
+{
+
+	int new_force_fast_charge;
+
+	sscanf(buf, "%du", &new_force_fast_charge);
+
+	switch(new_force_fast_charge) {
+		case FAST_CHARGE_DISABLED:
+		case FAST_CHARGE_FORCE_AC:
+		case FAST_CHARGE_FORCE_CUSTOM_MA:
+			force_fast_charge = new_force_fast_charge;
+			return count;
+		default:
+			return -EINVAL;
+	}
+}
+
+static ssize_t charge_level_show(struct kobject *kobj,
+				struct kobj_attribute *attr, char *buf)
 {
-return sprintf(buf, "%d\n", force_fast_charge);
+	return sprintf(buf, "%d\n", fast_charge_level);
 }
 
-static ssize_t force_fast_charge_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+static ssize_t charge_level_store(struct kobject *kobj,
+			struct kobj_attribute *attr, const char *buf,
+			size_t count)
 {
 
-int new_force_fast_charge;
+	int new_charge_level;
+
+	sscanf(buf, "%du", &new_charge_level);
 
-sscanf(buf, "%du", &new_force_fast_charge);
+	switch (new_charge_level) {
+		case FAST_CHARGE_500:
+		case FAST_CHARGE_900:
+		case FAST_CHARGE_1200:
+		case FAST_CHARGE_1500:
+		case FAST_CHARGE_2000:
+			fast_charge_level = new_charge_level;
+			return count;
+		default:
+			return -EINVAL;
+	}
+	return -EINVAL;
+}
 
-if (new_force_fast_charge >= FAST_CHARGE_DISABLED && new_force_fast_charge <= FAST_CHARGE_FORCE_AC) {
-	/* update only if valid value provided */
-	force_fast_charge = new_force_fast_charge;
+/* sysfs interface for "fast_charge_levels" */
+static ssize_t available_charge_levels_show(struct kobject *kobj,
+			struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%s\n", FAST_CHARGE_LEVELS);
 }
 
-return count;
+/* sysfs interface for "version" */
+static ssize_t version_show(struct kobject *kobj,
+			struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%s\n", FAST_CHARGE_VERSION);
 }
 
+static struct kobj_attribute version_attribute =
+	__ATTR(version, 0444, version_show, NULL);
+
+static struct kobj_attribute available_charge_levels_attribute =
+	__ATTR(available_charge_levels, 0444,
+		available_charge_levels_show, NULL);
+
+static struct kobj_attribute fast_charge_level_attribute =
+	__ATTR(fast_charge_level, 0666,
+		charge_level_show,
+		charge_level_store);
+
 static struct kobj_attribute force_fast_charge_attribute =
-__ATTR(force_fast_charge, 0666, force_fast_charge_show, force_fast_charge_store);
+	__ATTR(force_fast_charge, 0666,
+		force_fast_charge_show,
+		force_fast_charge_store);
 
 static struct attribute *force_fast_charge_attrs[] = {
-&force_fast_charge_attribute.attr,
-NULL,
+	&force_fast_charge_attribute.attr,
+	&fast_charge_level_attribute.attr,
+	&available_charge_levels_attribute.attr,
+	&version_attribute.attr,
+	NULL,
 };
 
 static struct attribute_group force_fast_charge_attr_group = {
-.attrs = force_fast_charge_attrs,
+	.attrs = force_fast_charge_attrs,
 };
 
 /* Initialize fast charge sysfs folder */
@@ -67,14 +139,19 @@ int force_fast_charge_init(void)
 {
 	int force_fast_charge_retval;
 
-	force_fast_charge = FAST_CHARGE_DISABLED; /* Forced fast charge disabled by default */
+	 /* Forced fast charge disabled by default */
+	force_fast_charge = FAST_CHARGE_DISABLED;
+
+	force_fast_charge_kobj
+		= kobject_create_and_add("fast_charge", kernel_kobj);
 
-	force_fast_charge_kobj = kobject_create_and_add("fast_charge", kernel_kobj);
 	if (!force_fast_charge_kobj) {
-			return -ENOMEM;
+		return -ENOMEM;
 	}
 
-	force_fast_charge_retval = sysfs_create_group(force_fast_charge_kobj, &force_fast_charge_attr_group);
+	force_fast_charge_retval
+		= sysfs_create_group(force_fast_charge_kobj,
+				&force_fast_charge_attr_group);
 
 	if (force_fast_charge_retval)
 		kobject_put(force_fast_charge_kobj);
@@ -93,3 +170,8 @@ void force_fast_charge_exit(void)
 module_init(force_fast_charge_init);
 module_exit(force_fast_charge_exit);
 
+MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Jean-Pierre Rasquin <yank555.lu@gmail.com>");
+MODULE_AUTHOR("Paul Reioux <reioux@gmail.com>");
+MODULE_DESCRIPTION("Fast Charge Hack for Android");
+
diff --git a/drivers/power/bq24192_charger.c b/drivers/power/bq24192_charger.c
index 0012f82..a82c9d0 100644
--- a/drivers/power/bq24192_charger.c
+++ b/drivers/power/bq24192_charger.c
@@ -31,6 +31,10 @@
 #include <linux/of_gpio.h>
 #include <linux/qpnp/qpnp-adc.h>
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+#include <linux/fastchg.h>
+#endif
+
 /* Register definitions */
 #define INPUT_SRC_CONT_REG              0X00
 #define PWR_ON_CONF_REG                 0X01
@@ -316,6 +320,9 @@ static int bq24192_set_input_i_limit(struct bq24192_chip *chip, int ma)
 {
 	int i;
 	u8 temp;
+#ifdef CONFIG_FORCE_FAST_CHARGE
+	int custom_ma = ma;
+#endif
 
 	if (ma < INPUT_CURRENT_LIMIT_MIN_MA
 			|| ma > INPUT_CURRENT_LIMIT_MAX_MA) {
@@ -333,8 +340,55 @@ static int bq24192_set_input_i_limit(struct bq24192_chip *chip, int ma)
 		i = 0;
 	}
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+	if (force_fast_charge == 1) {
+		i = 4;
+		custom_ma = FAST_CHARGE_1200;
+	} else if (force_fast_charge == 2) {
+		switch (fast_charge_level) {
+			case FAST_CHARGE_500:
+				i = 2;
+				custom_ma = FAST_CHARGE_500;
+				break;
+			case FAST_CHARGE_900:
+				i = 3;
+				custom_ma = FAST_CHARGE_900;
+				break;
+			case FAST_CHARGE_1200:
+				i = 4;
+				custom_ma = FAST_CHARGE_1200;
+				break;
+			case FAST_CHARGE_1500:
+				i = 5;
+				custom_ma = FAST_CHARGE_1500;
+				break;
+			case FAST_CHARGE_2000:
+				i = 6;
+				custom_ma = FAST_CHARGE_2000;
+				break;
+			default:
+				break;
+		}
+
+	}
+	temp = icl_ma_table[i].value;
+#else
 	temp = icl_ma_table[i].value;
+#endif
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+	if (custom_ma > chip->max_input_i_ma) {
+		chip->saved_input_i_ma = custom_ma;
+		pr_info("reject %d mA due to therm mitigation\n", custom_ma);
+		return 0;
+	}
+
+	if (!chip->therm_mitigation)
+		chip->saved_input_i_ma = custom_ma;
+
+	chip->therm_mitigation = false;
+	pr_info("input current limit = %d setting 0x%02x\n", custom_ma, temp);
+#else
 	if (ma > chip->max_input_i_ma) {
 		chip->saved_input_i_ma = ma;
 		pr_debug("reject %d mA due to therm mitigation\n", ma);
@@ -346,6 +400,8 @@ static int bq24192_set_input_i_limit(struct bq24192_chip *chip, int ma)
 
 	chip->therm_mitigation = false;
 	pr_debug("input current limit = %d setting 0x%02x\n", ma, temp);
+#endif
+
 	return bq24192_masked_write(chip->client, INPUT_SRC_CONT_REG,
 			INPUT_CURRENT_LIMIT_MASK, temp);
 }
diff --git a/drivers/usb/dwc3/dwc3_otg.c b/drivers/usb/dwc3/dwc3_otg.c
index 5ecd0d2..c2386db 100644
--- a/drivers/usb/dwc3/dwc3_otg.c
+++ b/drivers/usb/dwc3/dwc3_otg.c
@@ -24,6 +24,10 @@
 #include "io.h"
 #include "xhci.h"
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+#include <linux/fastchg.h>
+#endif
+
 static void dwc3_otg_reset(struct dwc3_otg *dotg);
 
 static void dwc3_otg_notify_host_mode(struct usb_otg *otg, int host_mode);
@@ -749,8 +753,17 @@ static void dwc3_otg_sm_work(struct work_struct *w)
 					work = 1;
 					break;
 				case DWC3_SDP_CHARGER:
+#ifdef CONFIG_FORCE_FAST_CHARGE
+					if (force_fast_charge > 0)
+						dwc3_otg_set_power(phy,
+							DWC3_IDEV_CHG_MAX);
+					else
+						dwc3_otg_set_power(phy,
+							DWC3_IDEV_CHG_MIN);
+#else
 					dwc3_otg_set_power(phy,
 							DWC3_IDEV_CHG_MIN);
+#endif
 					if (!slimport_is_connected()) {
 						dwc3_otg_start_peripheral(
 								&dotg->otg,
diff --git a/include/linux/fastchg.h b/include/linux/fastchg.h
index 0570e03..4444f2f 100644
--- a/include/linux/fastchg.h
+++ b/include/linux/fastchg.h
@@ -1,5 +1,8 @@
 /*
- * Author: Chad Froebel <chadfroebel@gmail.com>
+ * based on work from:
+ *	Chad Froebel <chadfroebel@gmail.com> &
+ *	Jean-Pierre Rasquin <yank555.lu@gmail.com>
+ * for backwards compatibility
  *
  * This software is licensed under the terms of the GNU General Public
  * License version 2, as published by the Free Software Foundation, and
@@ -16,8 +19,18 @@
 #define _LINUX_FASTCHG_H
 
 extern int force_fast_charge;
+extern int fast_charge_level;
 
-#define FAST_CHARGE_DISABLED 0	/* default */
-#define FAST_CHARGE_FORCE_AC 1
+#define FAST_CHARGE_DISABLED		0	/* default */
+#define FAST_CHARGE_FORCE_AC		1
+#define FAST_CHARGE_FORCE_CUSTOM_MA	2
+
+#define FAST_CHARGE_500		500
+#define FAST_CHARGE_900		900
+#define FAST_CHARGE_1200	1200
+#define FAST_CHARGE_1500	1500
+#define FAST_CHARGE_2000	2000
+
+#define FAST_CHARGE_LEVELS	"500 900 1200 1500 2000"
 
 #endif
-- 
1.7.9.5

