From 2652ce9b77910dbed83836cfdca642b5d659a961 Mon Sep 17 00:00:00 2001
From: franciscofranco <franciscofranco.1990@gmail.com>
Date: Mon, 16 Dec 2013 01:46:15 +0000
Subject: [PATCH 390/590] thermal: code cleanup.

Signed-off-by: franciscofranco <franciscofranco.1990@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/thermal/msm_thermal.c |   42 ++++++++++++++++-------------------------
 1 file changed, 16 insertions(+), 26 deletions(-)

diff --git a/drivers/thermal/msm_thermal.c b/drivers/thermal/msm_thermal.c
index fc67b01..7fa8224 100644
--- a/drivers/thermal/msm_thermal.c
+++ b/drivers/thermal/msm_thermal.c
@@ -57,8 +57,8 @@ static int  msm_thermal_cpufreq_callback(struct notifier_block *nfb,
 
 	switch (event) {
 	case CPUFREQ_INCOMPATIBLE:
-		cpufreq_verify_within_limits(policy, 0,
-				cpu_stats.limited_max_freq);
+		cpufreq_verify_within_limits(policy, policy->min,
+			cpu_stats.limited_max_freq);
 		break;
 	}
 	return NOTIFY_OK;
@@ -68,14 +68,6 @@ static struct notifier_block msm_thermal_cpufreq_notifier = {
 	.notifier_call = msm_thermal_cpufreq_callback,
 };
 
-static void update_cpu_max_freq(int cpu, uint32_t max_freq)
-{
-	cpufreq_update_policy(cpu);
-
-	pr_info("%s: Setting cpu%d max frequency to %d\n",
-				KBUILD_MODNAME, cpu, cpu_stats.limited_max_freq);
-}
-
 static void limit_cpu_freqs(uint32_t max_freq)
 {
     int cpu;
@@ -87,8 +79,12 @@ static void limit_cpu_freqs(uint32_t max_freq)
     
 	/* Update new limits */
 	get_online_cpus();
-	for_each_online_cpu(cpu) 
-		update_cpu_max_freq(cpu, max_freq);
+	for_each_online_cpu(cpu)
+	{
+		cpufreq_update_policy(cpu);
+		pr_info("%s: Setting cpu%d max frequency to %d\n",
+				KBUILD_MODNAME, cpu, cpu_stats.limited_max_freq);
+	}
 	put_online_cpus();
 }
 
@@ -110,7 +106,7 @@ static void check_temp(struct work_struct *work)
 	tsens_get_temp(&tsens_dev, &temp);
 
 	/* most of the time the device is not hot so reschedule early */
-	if (likely(temp <= temp_threshold))
+	if (likely(temp < temp_threshold))
 	{
 		if (unlikely(cpu_stats.throttling))
 		{
@@ -121,31 +117,25 @@ static void check_temp(struct work_struct *work)
 		goto reschedule;
 	}
 
+	/* 
+	 * Get the max freq before we throttle so that we can re-apply it after
+	 * the device cools down
+	 */
 	update_max_freq_buffer();
 
 	if (temp >= (temp_threshold + 20))
-	{
-		cpu_stats.throttling = true;
 		limit_cpu_freqs(cpu_stats.thermal_steps[0]);
-	}
 
 	else if (temp >= (temp_threshold + 15))
-	{
-		cpu_stats.throttling = true;
 		limit_cpu_freqs(cpu_stats.thermal_steps[1]);
-	}
     
 	else if (temp >= (temp_threshold + 10))
-	{
-		cpu_stats.throttling = true;
 		limit_cpu_freqs(cpu_stats.thermal_steps[2]);
-	}
 
-	else if (temp >= (temp_threshold + 5))
-	{
-		cpu_stats.throttling = true;
+	else if (temp >= temp_threshold)
 		limit_cpu_freqs(cpu_stats.thermal_steps[3]);
-	}
+
+	cpu_stats.throttling = true;
 
 reschedule:
 	queue_delayed_work(wq, &check_temp_work, HZ);
-- 
1.7.9.5

