From 7e04db506e2659d858416394d688d40dd7dc79ad Mon Sep 17 00:00:00 2001
From: franciscofranco <franciscofranco.1990@gmail.com>
Date: Tue, 31 Dec 2013 17:29:56 +0000
Subject: [PATCH 571/590] input: touchboost: remove keypad filter, it seems
 that some idiot decided to bundle Bluetooth
 disconnect event through the keypad filter so users
 were having kernel_panics in that scenario. Also no
 need to call cpufreq_driver_target because
 interactive's speedtask thread will push do it for
 us in the next timer_rate. Since timer_rate is 30ms
 by default we adjust the minimum frequency for 40ms
 up to input_boost_freq, then the governor will
 catch up.

Signed-off-by: franciscofranco <franciscofranco.1990@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/input/touchscreen/touchboost.c |   58 +++++++++++++++++++++++++++-----
 1 file changed, 49 insertions(+), 9 deletions(-)

diff --git a/drivers/input/touchscreen/touchboost.c b/drivers/input/touchscreen/touchboost.c
index 7055600..c28cbdc 100644
--- a/drivers/input/touchscreen/touchboost.c
+++ b/drivers/input/touchscreen/touchboost.c
@@ -40,15 +40,58 @@ extern int input_boost_freq;
  */
 u64 last_input_time;
 
+int boost_freq_buf;
+
 static struct workqueue_struct *input_boost_wq;
 static struct work_struct input_boost_work;
+static struct delayed_work rem_input_boost;
+
+/*
+ * The CPUFREQ_ADJUST notifier is used to override the current policy min to
+ * make sure policy min >= boost_min. The cpufreq framework then does the job
+ * of enforcing the new policy.
+ */
+static int boost_adjust_notify(struct notifier_block *nb, unsigned long val, void *data)
+{
+	struct cpufreq_policy *policy = data;
+	unsigned int cpu = policy->cpu;
+
+	if (val != CPUFREQ_ADJUST)
+		return NOTIFY_OK;
+
+	pr_debug("CPU%u policy min before boost: %u kHz\n",
+		 cpu, policy->min);
+	pr_debug("CPU%u boost min: %u kHz\n", cpu, boost_freq_buf);
+
+	cpufreq_verify_within_limits(policy, boost_freq_buf, UINT_MAX);
+
+	pr_debug("CPU%u policy min after boost: %u kHz\n",
+		 cpu, policy->min);
+
+	return NOTIFY_OK;
+}
+
+static struct notifier_block boost_adjust_nb = {
+	.notifier_call = boost_adjust_notify,
+};
+
+static void do_rem_input_boost(struct work_struct *work)
+{
+	unsigned int i;
+	boost_freq_buf = 0;
+	/* Force policy re-evaluation to trigger adjust notifier. */
+	for_each_online_cpu(i)
+		cpufreq_update_policy(i);
+}
 
 static void do_input_boost(struct work_struct *work)
 {
 	unsigned int i, ret;
 	struct cpufreq_policy policy;
 
-	for_each_online_cpu(i) 
+	boost_freq_buf = input_boost_freq;
+
+	for_each_online_cpu(i)
 	{
 		ret = cpufreq_get_policy(&policy, i);
 		if (ret)
@@ -57,10 +100,9 @@ static void do_input_boost(struct work_struct *work)
 		if (policy.cur >= input_boost_freq)
 			continue;
 
-		__cpufreq_driver_target(&policy,
-					input_boost_freq,
-					CPUFREQ_RELATION_H);
+		cpufreq_update_policy(i);
 	}
+	queue_delayed_work_on(0, input_boost_wq, &rem_input_boost, msecs_to_jiffies(40));
 }
 
 static void boost_input_event(struct input_handle *handle,
@@ -128,11 +170,6 @@ static const struct input_device_id boost_ids[] = {
 				BIT_MASK(ABS_MT_POSITION_X) |
 				BIT_MASK(ABS_MT_POSITION_Y) },
 	},
-	/* Keypad */
-	{
-		.flags = INPUT_DEVICE_ID_MATCH_EVBIT,
-		.evbit = { BIT_MASK(EV_KEY) },
-	},
 	{ },
 };
 
@@ -146,12 +183,15 @@ static struct input_handler boost_input_handler = {
 
 static int init(void)
 {
+	cpufreq_register_notifier(&boost_adjust_nb, CPUFREQ_POLICY_NOTIFIER);
+
 	input_boost_wq = alloc_workqueue("input_boost_wq", WQ_FREEZABLE | WQ_HIGHPRI, 0);
 
 	if (!input_boost_wq)
 		return -EFAULT;
 
 	INIT_WORK(&input_boost_work, do_input_boost);
+	INIT_DELAYED_WORK(&rem_input_boost, do_rem_input_boost);
 
 	input_register_handler(&boost_input_handler);
 	return 0;
-- 
1.7.9.5

