From 4653870b3923d3e87b50fabd5c481cc777393c28 Mon Sep 17 00:00:00 2001
From: yank555-lu <yank555.lu@gmail.com>
Date: Mon, 11 Nov 2013 01:51:12 -0600
Subject: [PATCH 328/338] kernel/power/powersuspend: add back userpace control
 w/ default kernel control

make kernel / userspace mode switchable

Signed-off-by: Paul Reioux <reioux@gmail.com>
---
 include/linux/powersuspend.h |  9 +++--
 kernel/power/powersuspend.c  | 83 ++++++++++++++++++++++++++++++++++++++------
 2 files changed, 79 insertions(+), 13 deletions(-)

diff --git a/include/linux/powersuspend.h b/include/linux/powersuspend.h
index 8efae0d..ec79170 100644
--- a/include/linux/powersuspend.h
+++ b/include/linux/powersuspend.h
@@ -5,8 +5,10 @@
  *
  * Modified by Jean-Pierre Rasquin <yank555.lu@gmail.com>
  *
- *   make powersuspend not depend on a userspace initiator anymore,
- *   but use a hook in autosleep instead.
+ *  v1.1 - make powersuspend not depend on a userspace initiator anymore,
+ *         but use a hook in autosleep instead.
+ *
+ *  v1.2 - make kernel / userspace mode switchable
  *
  * This software is licensed under the terms of the GNU General Public
  * License version 2, as published by the Free Software Foundation, and
@@ -27,6 +29,9 @@
 #define POWER_SUSPEND_INACTIVE	0
 #define POWER_SUSPEND_ACTIVE	1
 
+#define POWER_SUSPEND_KERNEL	0
+#define POWER_SUSPEND_USERSPACE	1
+
 struct power_suspend {
 	struct list_head link;
 	void (*suspend)(struct power_suspend *h);
diff --git a/kernel/power/powersuspend.c b/kernel/power/powersuspend.c
index d6d1243..c2f3d9e 100644
--- a/kernel/power/powersuspend.c
+++ b/kernel/power/powersuspend.c
@@ -5,8 +5,10 @@
  *
  * Modified by Jean-Pierre Rasquin <yank555.lu@gmail.com>
  *
- *   make powersuspend not depend on a userspace initiator anymore,
- *   but use a hook in autosleep instead.
+ *  v1.1 - make powersuspend not depend on a userspace initiator anymore,
+ *         but use a hook in autosleep instead.
+ *
+ *  v1.2 - make kernel / userspace mode switchable
  *
  * This software is licensed under the terms of the GNU General Public
  * License version 2, as published by the Free Software Foundation, and
@@ -25,7 +27,7 @@
 #include <linux/workqueue.h>
 
 #define MAJOR_VERSION	1
-#define MINOR_VERSION	1
+#define MINOR_VERSION	2
 
 //#define POWER_SUSPEND_DEBUG
 
@@ -39,7 +41,8 @@ static DECLARE_WORK(power_suspend_work, power_suspend);
 static DECLARE_WORK(power_resume_work, power_resume);
 static DEFINE_SPINLOCK(state_lock);
 
-static int state;
+static int state; // Yank555.lu : Current powersave state (screen on / off)
+static int mode;  // Yank555.lu : Current powersave more  (kernel / userspace)
 
 void register_power_suspend(struct power_suspend *handler)
 {
@@ -129,7 +132,7 @@ abort_resume:
 	mutex_unlock(&power_suspend_lock);
 }
 
-void set_power_suspend_state_hook(int new_state)
+void set_power_suspend_state(int new_state)
 {
 	unsigned long irqflags;
 	int old_sleep;
@@ -152,18 +155,71 @@ void set_power_suspend_state_hook(int new_state)
 	spin_unlock_irqrestore(&state_lock, irqflags);
 }
 
+void set_power_suspend_state_hook(int new_state)
+{
+	if (mode == POWER_SUSPEND_KERNEL)
+		set_power_suspend_state(new_state);  // Yank555.lu : Only allow kernel hook changes in kernel mode
+}
+
 EXPORT_SYMBOL(set_power_suspend_state_hook);
 
-static ssize_t power_suspend_show(struct kobject *kobj,
+// ------------------------------------------ sysfs interface ------------------------------------------
+
+static ssize_t power_suspend_state_show(struct kobject *kobj,
 		struct kobj_attribute *attr, char *buf)
 {
         return sprintf(buf, "%u\n", state);
 }
 
-static struct kobj_attribute power_suspend_attribute =
-	__ATTR(power_suspend_state, 0444,
-		power_suspend_show,
-		NULL);
+static ssize_t power_suspend_state_store(struct kobject *kobj,
+		struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	int data = 0;
+
+	if (mode != POWER_SUSPEND_USERSPACE) // Yank555.lu : Only allow sysfs changes in userspace mode
+		return -EINVAL;
+
+	sscanf(buf, "%d\n", &data);
+
+	if(data == 1 || data == 0) {
+		set_power_suspend_state(data);
+		pr_info("power suspend state requested => %d\n", data);
+	}
+	return count;
+}
+
+static struct kobj_attribute power_suspend_state_attribute =
+	__ATTR(power_suspend_state, 0666,
+		power_suspend_state_show,
+		power_suspend_state_store);
+
+static ssize_t power_suspend_mode_show(struct kobject *kobj,
+		struct kobj_attribute *attr, char *buf)
+{
+        return sprintf(buf, "%u\n", mode);
+}
+
+static ssize_t power_suspend_mode_store(struct kobject *kobj,
+		struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	int data = 0;
+
+	sscanf(buf, "%d\n", &data);
+
+	switch (data) {
+		case POWER_SUSPEND_KERNEL:
+		case POWER_SUSPEND_USERSPACE:	mode = data;
+						return count;
+		default:
+			return -EINVAL;
+	}
+	
+}
+
+static struct kobj_attribute power_suspend_mode_attribute =
+	__ATTR(power_suspend_mode, 0666,
+		power_suspend_mode_show,
+		power_suspend_mode_store);
 
 static ssize_t power_suspend_version_show(struct kobject *kobj,
 		struct kobj_attribute *attr, char *buf)
@@ -178,7 +234,8 @@ static struct kobj_attribute power_suspend_version_attribute =
 
 static struct attribute *power_suspend_attrs[] =
 {
-	&power_suspend_attribute.attr,
+	&power_suspend_state_attribute.attr,
+	&power_suspend_mode_attribute.attr,
 	&power_suspend_version_attribute.attr,
 	NULL,
 };
@@ -190,6 +247,8 @@ static struct attribute_group power_suspend_attr_group =
 
 static struct kobject *power_suspend_kobj;
 
+// ------------------------------------------ sysfs interface ------------------------------------------
+
 static int __init power_suspend_init(void)
 {
 
@@ -217,6 +276,8 @@ static int __init power_suspend_init(void)
 		return -ENOMEM;
 	}
 
+	mode = POWER_SUSPEND_KERNEL; // Yank555.lu : Default to kernel mode
+
 	return 0;
 }
 
-- 
1.8.1.2

