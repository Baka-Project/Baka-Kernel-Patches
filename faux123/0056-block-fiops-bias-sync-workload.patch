From 7bc1f063d546c40713d1c28fc8280b6037de6cea Mon Sep 17 00:00:00 2001
From: Shaohua Li <shaohua.li@intel.com>
Date: Sat, 15 Dec 2012 22:37:22 -0800
Subject: [PATCH 056/338] block: fiops bias sync workload

If there are async requests running, delay async workload. Otherwise
async workload (usually very deep iodepth) will use all queue iodepth
and later sync requests will get long delayed. The idea is from CFQ.

Signed-off-by: Shaohua Li <shaohua.li@intel.com>
---
 block/fiops-iosched.c | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/block/fiops-iosched.c b/block/fiops-iosched.c
index 84189f3..be54a9c 100644
--- a/block/fiops-iosched.c
+++ b/block/fiops-iosched.c
@@ -372,6 +372,7 @@ static struct fiops_ioc *fiops_select_ioc(struct fiops_data *fiopsd)
 	struct fiops_ioc *ioc;
 	struct fiops_rb_root *service_tree = NULL;
 	int i;
+	struct request *rq;
 
 	for (i = RT_WORKLOAD; i >= IDLE_WORKLOAD; i--) {
 		if (!RB_EMPTY_ROOT(&fiopsd->service_tree[i].rb)) {
@@ -384,6 +385,17 @@ static struct fiops_ioc *fiops_select_ioc(struct fiops_data *fiopsd)
 		return NULL;
 
 	ioc = fiops_rb_first(service_tree);
+
+	rq = rq_entry_fifo(ioc->fifo.next);
+	/*
+	 * we are the only async task and sync requests are in flight, delay a
+	 * moment. If there are other tasks coming, sync tasks have no chance
+	 * to be starved, don't delay
+	 */
+	if (!rq_is_sync(rq) && fiopsd->in_flight[1] != 0 &&
+			service_tree->count == 1)
+		return NULL;
+
 	return ioc;
 }
 
-- 
1.8.1.2

