From 15c090f0e5861a1386e514e4769c3b2a5a617d8b Mon Sep 17 00:00:00 2001
From: faux123 <reioux@gmail.com>
Date: Thu, 9 May 2013 15:06:22 -0700
Subject: [PATCH 017/338] intellidemand: add minimum cpu performance lock

a minimum cpu frequency performance lock is add to ensure smooth
operations when only 1 core is active

Signed-off-by: faux123 <reioux@gmail.com>

Conflicts:
	drivers/cpufreq/Kconfig

Conflicts:

	drivers/cpufreq/Kconfig
---
 drivers/cpufreq/Kconfig                 |  7 +++++++
 drivers/cpufreq/cpufreq_intellidemand.c | 26 ++++++++++++++++++++++++--
 2 files changed, 31 insertions(+), 2 deletions(-)

diff --git a/drivers/cpufreq/Kconfig b/drivers/cpufreq/Kconfig
index 6433af6..3d65c40 100644
--- a/drivers/cpufreq/Kconfig
+++ b/drivers/cpufreq/Kconfig
@@ -173,6 +173,13 @@ config CPU_FREQ_GOV_ONDEMAND
 
 	  If in doubt, say N.
 
+config CPUFREQ_ID_PERFLOCK
+	bool "Intellidemand Performance Lock"
+	depends on CPU_FREQ_GOV_INTELLIDEMAND
+	default	y
+	help
+		Minimum CPU performance lock for Intellidemand governor
+
 config CPU_FREQ_GOV_INTERACTIVE
 	tristate "'interactive' cpufreq policy governor"
 	help
diff --git a/drivers/cpufreq/cpufreq_intellidemand.c b/drivers/cpufreq/cpufreq_intellidemand.c
index 8c216b9..be5efc5 100644
--- a/drivers/cpufreq/cpufreq_intellidemand.c
+++ b/drivers/cpufreq/cpufreq_intellidemand.c
@@ -54,6 +54,10 @@
 #define BOOSTED_SAMPLING_RATE			(20000)
 #define DBS_INPUT_EVENT_MIN_FREQ		(1060000)
 
+#ifdef CONFIG_CPUFREQ_ID_PERFLOCK
+#define DBS_PERFLOCK_MIN_FREQ			(525000)
+#endif
+
 u64 freq_boosted_time;
 /*
  * The polling frequency of this governor depends on the capability of
@@ -85,6 +89,10 @@ int sampling_rate_boosted;
 u64 sampling_rate_boosted_time;
 unsigned int current_sampling_rate;
 
+#ifdef CONFIG_CPUFREQ_ID_PERFLOCK
+static unsigned int saved_policy_min;
+#endif
+
 static void do_dbs_timer(struct work_struct *work);
 static int cpufreq_governor_dbs(struct cpufreq_policy *policy,
 				unsigned int event);
@@ -1188,6 +1196,11 @@ static void do_dbs_timer(struct work_struct *work)
 
 	int delay;
 	unsigned int nr_run_stat;
+#ifdef CONFIG_CPUFREQ_ID_PERFLOCK
+	struct cpufreq_policy *policy;
+
+	policy = dbs_info->cur_policy;
+#endif
 
 	nr_run_stat = calculate_thread_stats();
 	//pr_info("run stats: %u\n", nr_run_stat);
@@ -1199,13 +1212,22 @@ static void do_dbs_timer(struct work_struct *work)
 				if (persist_count > 0)
 					persist_count--;
 
-				if (num_online_cpus() == 2 && persist_count == 0)
+				if (num_online_cpus() == 2 && persist_count == 0) {
 					cpu_down(1);
+#ifdef CONFIG_CPUFREQ_ID_PERFLOCK
+					saved_policy_min = policy->min;
+					policy->min = DBS_PERFLOCK_MIN_FREQ;
+#endif
+				}
 				break;
 			case 2:
 				persist_count = 8;
-				if (num_online_cpus() == 1)
+				if (num_online_cpus() == 1) {
 					cpu_up(1);
+#ifdef CONFIG_CPUFREQ_ID_PERFLOCK
+					policy->min = saved_policy_min;
+#endif
+				}
 				break;
 			default:
 				pr_err("Run Stat Error: Bad value %u\n", nr_run_stat);
-- 
1.8.1.2

