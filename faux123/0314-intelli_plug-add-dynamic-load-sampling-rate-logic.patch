From 155ff7d530106707faac5759fc034bf1f399152e Mon Sep 17 00:00:00 2001
From: Paul Reioux <reioux@gmail.com>
Date: Fri, 25 Oct 2013 18:55:41 -0500
Subject: [PATCH 314/338] intelli_plug: add dynamic load sampling rate logic

Add dynamic sampling logic based on load. If load is high and required more
than 2 cores, increase the sampling rate for a duration of 3 seconds to help
manage the load better during this time.  Once duration expires, revert back
to lazier sampling rate for better batter performance.

Signed-off-by: Paul Reioux <reioux@gmail.com>
---
 arch/arm/mach-msm/intelli_plug.c | 35 ++++++++++++++++++++++++++---------
 1 file changed, 26 insertions(+), 9 deletions(-)

diff --git a/arch/arm/mach-msm/intelli_plug.c b/arch/arm/mach-msm/intelli_plug.c
index c88b561..10da751 100644
--- a/arch/arm/mach-msm/intelli_plug.c
+++ b/arch/arm/mach-msm/intelli_plug.c
@@ -28,15 +28,17 @@
 #undef DEBUG_INTELLI_PLUG
 
 #define INTELLI_PLUG_MAJOR_VERSION	1
-#define INTELLI_PLUG_MINOR_VERSION	7
+#define INTELLI_PLUG_MINOR_VERSION	8
 
-#define DEF_SAMPLING_RATE		(50000)
-#define DEF_SAMPLING_MS			(200)
+#define DEF_SAMPLING_MS			(250)
+#define BUSY_SAMPLING_MS		(100)
 
 #define DUAL_CORE_PERSISTENCE		15
 #define TRI_CORE_PERSISTENCE		12
 #define QUAD_CORE_PERSISTENCE		9
 
+#define BUSY_PERSISTENCE		30
+
 #define RUN_QUEUE_THRESHOLD		38
 
 #define CPU_DOWN_FACTOR			3
@@ -51,7 +53,11 @@ module_param(intelli_plug_active, uint, 0644);
 static unsigned int eco_mode_active = 0;
 module_param(eco_mode_active, uint, 0644);
 
+static unsigned int sampling_time = 0;
+
 static unsigned int persist_count = 0;
+static unsigned int busy_persist_count = 0;
+
 static bool suspended = false;
 
 static int sleep_active = 0;
@@ -201,6 +207,18 @@ static void __cpuinit intelli_plug_work_fn(struct work_struct *work)
 				}
 			}
 		}
+		/* it's busy.. lets help it a bit */
+		if (cpu_count > 2) {
+			if (busy_persist_count == 0) {
+				sampling_time = BUSY_SAMPLING_MS;
+				busy_persist_count = BUSY_PERSISTENCE;
+			}
+		} else {
+			if (busy_persist_count > 0)
+				busy_persist_count--;
+			else
+				sampling_time = DEF_SAMPLING_MS;
+		}
 
 		if (!suspended) {
 			switch (cpu_count) {
@@ -268,7 +286,7 @@ static void __cpuinit intelli_plug_work_fn(struct work_struct *work)
 #endif
 	}
 	schedule_delayed_work_on(0, &intelli_plug_work,
-		msecs_to_jiffies(DEF_SAMPLING_MS));
+		msecs_to_jiffies(sampling_time));
 }
 
 static void intelli_plug_suspend(void)
@@ -360,7 +378,6 @@ static struct kobject *sleep_active_kobj;
 int __init intelli_plug_init(void)
 {
 	/* We want all CPUs to do sampling nearly on same jiffy */
-	int delay = usecs_to_jiffies(DEF_SAMPLING_RATE);
 	int sysfs_result;
 
 	sleep_active_kobj =
@@ -380,16 +397,16 @@ int __init intelli_plug_init(void)
                 kobject_put(sleep_active_kobj);
         }
 
-	if (num_online_cpus() > 1)
-		delay -= jiffies % delay;
-
 	//pr_info("intelli_plug: scheduler delay is: %d\n", delay);
 	pr_info("intelli_plug: version %d.%d by faux123\n",
 		 INTELLI_PLUG_MAJOR_VERSION,
 		 INTELLI_PLUG_MINOR_VERSION);
 
+	sampling_time = DEF_SAMPLING_MS;
+
 	INIT_DELAYED_WORK(&intelli_plug_work, intelli_plug_work_fn);
-	schedule_delayed_work_on(0, &intelli_plug_work, delay);
+	schedule_delayed_work_on(0, &intelli_plug_work,
+		msecs_to_jiffies(sampling_time));
 
 	return 0;
 }
-- 
1.8.1.2

