From 0e8ac2c3219ebfc891a4e1e78a8502f041295972 Mon Sep 17 00:00:00 2001
From: Paul Reioux <reioux@gmail.com>
Date: Mon, 21 Oct 2013 02:27:53 -0500
Subject: [PATCH 333/507] cpufreq: intellidemand: remove deprecated
 early_suspend drivers

and also remove LMF since it depended on early_suspend driver

bump version to 4.3

Signed-off-by: Paul Reioux <reioux@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/cpufreq/cpufreq_intellidemand.c |  499 +------------------------------
 1 file changed, 1 insertion(+), 498 deletions(-)

diff --git a/drivers/cpufreq/cpufreq_intellidemand.c b/drivers/cpufreq/cpufreq_intellidemand.c
index 6241d58..ef158f8 100644
--- a/drivers/cpufreq/cpufreq_intellidemand.c
+++ b/drivers/cpufreq/cpufreq_intellidemand.c
@@ -27,16 +27,13 @@
 #include <linux/input.h>
 #include <linux/workqueue.h>
 #include <linux/slab.h>
-#ifdef CONFIG_EARLYSUSPEND
-#include <linux/earlysuspend.h>
-#endif
 #include <linux/rq_stats.h>
 
 #include <linux/syscalls.h>
 #include <linux/highuid.h>
 
 #define INTELLIDEMAND_MAJOR_VERSION	4
-#define INTELLIDEMAND_MINOR_VERSION	2
+#define INTELLIDEMAND_MINOR_VERSION	3
 
 /*
  * dbs is used in this file as a shortform for demandbased switching
@@ -79,9 +76,6 @@ static u64 freq_boosted_time;
 #define MIN_SAMPLING_RATE_RATIO			(2)
 
 static unsigned int min_sampling_rate;
-#ifdef CONFIG_EARLYSUSPEND
-static unsigned long stored_sampling_rate;
-#endif
 
 #define LATENCY_MULTIPLIER			(1000)
 #define MIN_LATENCY_MULTIPLIER			(20)
@@ -361,49 +355,6 @@ show_one(boosttime, freq_boost_time);
 show_one(boostfreq, boostfreq);
 show_one(two_phase_freq, two_phase_freq);
 
-#ifdef CONFIG_CPUFREQ_LIMIT_MAX_FREQ 
-void set_lmf_browsing_state(bool onOff);
-void set_lmf_active_max_freq(unsigned long freq);
-void set_lmf_inactive_max_freq(unsigned long freq);
-void set_lmf_active_load(unsigned long freq);
-void set_lmf_inactive_load(unsigned long freq);
-bool get_lmf_browsing_state(void);
-unsigned long get_lmf_active_max_freq(void);
-unsigned long get_lmf_inactive_max_freq(void);
-unsigned long get_lmf_active_load(void);
-unsigned long get_lmf_inactive_load(void);
-
-static ssize_t show_lmf_browser(struct kobject *kobj,
-				      struct attribute *attr, char *buf)
-{
-	return sprintf(buf, "%u\n", get_lmf_browsing_state());
-}
-
-static ssize_t show_lmf_active_max_freq(struct kobject *kobj,
-				      struct attribute *attr, char *buf)
-{
-	return sprintf(buf, "%ld\n", get_lmf_active_max_freq());
-}
-
-static ssize_t show_lmf_inactive_max_freq(struct kobject *kobj,
-				      struct attribute *attr, char *buf)
-{
-	return sprintf(buf, "%ld\n", get_lmf_inactive_max_freq());
-}
-
-static ssize_t show_lmf_active_load(struct kobject *kobj,
-				      struct attribute *attr, char *buf)
-{
-	return sprintf(buf, "%ld\n", get_lmf_active_load());
-}
-
-static ssize_t show_lmf_inactive_load(struct kobject *kobj,
-				      struct attribute *attr, char *buf)
-{
-	return sprintf(buf, "%ld\n", get_lmf_inactive_load());
-}
-#endif
-
 static ssize_t show_powersave_bias
 (struct kobject *kobj, struct attribute *attr, char *buf)
 {
@@ -807,92 +758,6 @@ skip_this_cpu_bypass:
 	return count;
 }
 
-#ifdef CONFIG_CPUFREQ_LIMIT_MAX_FREQ
-static ssize_t store_lmf_browser(struct kobject *a, struct attribute *b,
-				   const char *buf, size_t count)
-{
-	unsigned int input;
-	int ret;
-
-	ret = sscanf(buf, "%u", &input);
-	if (ret != 1)
-		return -EINVAL;
-
-	mutex_lock(&dbs_mutex);
-	set_lmf_browsing_state(input);
-	mutex_unlock(&dbs_mutex);
-
-	return count;
-}
-
-static ssize_t store_lmf_active_max_freq(struct kobject *a, struct attribute *b,
-				   const char *buf, size_t count)
-{
-	unsigned long input;
-	int ret;
-
-	ret = sscanf(buf, "%ld", &input);
-	if (ret != 1)
-		return -EINVAL;
-
-	mutex_lock(&dbs_mutex);
-	set_lmf_active_max_freq(input);
-	mutex_unlock(&dbs_mutex);
-
-	return count;
-}
-static ssize_t store_lmf_inactive_max_freq(struct kobject *a, struct attribute *b,
-				   const char *buf, size_t count)
-{
-	unsigned long input;
-	int ret;
-
-	ret = sscanf(buf, "%ld", &input);
-	if (ret != 1)
-		return -EINVAL;
-
-	mutex_lock(&dbs_mutex);
-	set_lmf_inactive_max_freq(input);
-	mutex_unlock(&dbs_mutex);
-
-	return count;
-}
-
-static ssize_t store_lmf_active_load(struct kobject *a, struct attribute *b,
-				   const char *buf, size_t count)
-{
-	unsigned long input;
-	int ret;
-
-	ret = sscanf(buf, "%ld", &input);
-	if (ret != 1)
-		return -EINVAL;
-
-	mutex_lock(&dbs_mutex);
-	set_lmf_active_load(input);
-	mutex_unlock(&dbs_mutex);
-
-	return count;
-}
-
-static ssize_t store_lmf_inactive_load(struct kobject *a, struct attribute *b,
-				   const char *buf, size_t count)
-{
-	unsigned long input;
-	int ret;
-
-	ret = sscanf(buf, "%ld", &input);
-	if (ret != 1)
-		return -EINVAL;
-
-	mutex_lock(&dbs_mutex);
-	set_lmf_inactive_load(input);
-	mutex_unlock(&dbs_mutex);
-
-	return count;
-}
-#endif
-
 define_one_global_rw(sampling_rate);
 define_one_global_rw(io_is_busy);
 define_one_global_rw(up_threshold);
@@ -909,14 +774,6 @@ define_one_global_rw(boosttime);
 define_one_global_rw(boostfreq);
 define_one_global_rw(two_phase_freq);
 
-#ifdef CONFIG_CPUFREQ_LIMIT_MAX_FREQ
-define_one_global_rw(lmf_browser);
-define_one_global_rw(lmf_active_max_freq);
-define_one_global_rw(lmf_inactive_max_freq);
-define_one_global_rw(lmf_active_load);
-define_one_global_rw(lmf_inactive_load);
-#endif
-
 static struct attribute *dbs_attributes[] = {
 	&sampling_rate_min.attr,
 	&sampling_rate.attr,
@@ -934,13 +791,6 @@ static struct attribute *dbs_attributes[] = {
 	&boosttime.attr,
 	&boostfreq.attr,
 	&two_phase_freq.attr,
-#ifdef CONFIG_CPUFREQ_LIMIT_MAX_FREQ
-	&lmf_browser.attr,
-	&lmf_active_max_freq.attr,
-	&lmf_inactive_max_freq.attr,
-	&lmf_active_load.attr,
-	&lmf_inactive_load.attr,
-#endif
 	NULL
 };
 
@@ -1229,107 +1079,6 @@ static void dbs_check_cpu(struct cpu_dbs_info_s *this_dbs_info)
 	}
 }
 
-#ifdef CONFIG_CPUFREQ_LIMIT_MAX_FREQ
-
-enum {	
-	SET_MIN = 0,	
-	SET_MAX
-};
-
-enum {	
-	BOOT_CPU = 0,	
-	NON_BOOT_CPU1,
-	NON_BOOT_CPU2,
-	NON_BOOT_CPU3,
-};
-
-#define SAMPLE_DURATION_MSEC	(10*1000) // 10 secs >= 10000 msec
-#define ACTIVE_DURATION_MSEC	(3*60*1000) // 3 mins
-#define INACTIVE_DURATION_MSEC	(1*60*1000) // 1 mins
-#define MAX_ACTIVE_FREQ_LIMIT	30 // %
-#define MAX_INACTIVE_FREQ_LIMIT	20 // %
-#define ACTIVE_MAX_FREQ		CONFIG_INTELLI_MAX_ACTIVE_FREQ		// 1.512GHZ
-#define INACTIVE_MAX_FREQ	CONFIG_INTELLI_MAX_INACTIVE_FREQ	// 1.134GHZ
-
-#define NUM_ACTIVE_LOAD_ARRAY	(ACTIVE_DURATION_MSEC/SAMPLE_DURATION_MSEC)
-#define NUM_INACTIVE_LOAD_ARRAY	(INACTIVE_DURATION_MSEC/SAMPLE_DURATION_MSEC)
-
-bool lmf_browsing_state = true;
-bool lmf_screen_state = true;
-
-static unsigned long lmf_active_max_limit = ACTIVE_MAX_FREQ;
-static unsigned long lmf_inactive_max_limit = INACTIVE_MAX_FREQ;
-static unsigned long lmf_active_load_limit = MAX_ACTIVE_FREQ_LIMIT;
-static unsigned long lmf_inactive_load_limit = MAX_INACTIVE_FREQ_LIMIT;
-
-static unsigned long jiffies_old = 0;
-static unsigned long time_int = 0;
-static unsigned long time_int1 = 0;
-static unsigned long load_state_total0  = 0;
-static unsigned long load_state_total1  = 0;
-static unsigned long load_limit_index = 0;	
-static unsigned long load_limit_total[NUM_ACTIVE_LOAD_ARRAY];
-static unsigned long msecs_limit_total = 0;
-static bool active_state = true;
-static bool lmf_old_state = false;
-
-extern int cpufreq_set_limits(int cpu, unsigned int limit, unsigned int value);
-extern int cpufreq_set_limits_off(int cpu, unsigned int limit, unsigned int value);
-
-void set_lmf_browsing_state(bool onOff)
-{
-	if (onOff)
-		lmf_browsing_state = true;
-	else
-		lmf_browsing_state = false;
-}
-
-void set_lmf_active_max_freq(unsigned long freq)
-{
-	lmf_active_max_limit = freq;
-}
-
-void set_lmf_inactive_max_freq(unsigned long freq)
-{
-	lmf_inactive_max_limit = freq;
-}
-
-void set_lmf_active_load(unsigned long freq)
-{
-	lmf_active_load_limit = freq;
-}
-
-void set_lmf_inactive_load(unsigned long freq)
-{
-	lmf_inactive_load_limit = freq;
-}
-
-bool get_lmf_browsing_state(void)
-{
-	return lmf_browsing_state;
-}
-
-unsigned long get_lmf_active_max_freq(void)
-{
-	return lmf_active_max_limit;
-}
-
-unsigned long get_lmf_inactive_max_freq(void)
-{
-	return lmf_inactive_max_limit;
-}
-
-unsigned long get_lmf_active_load(void)
-{
-	return lmf_active_load_limit;
-}
-
-unsigned long get_lmf_inactive_load(void)
-{
-	return lmf_inactive_load_limit;
-}
-#endif
-
 static unsigned int rq_persist_count = 0;
 
 static void do_dbs_timer(struct work_struct *work)
@@ -1364,221 +1113,6 @@ static void do_dbs_timer(struct work_struct *work)
 	}
 #endif
 
-#ifdef CONFIG_CPUFREQ_LIMIT_MAX_FREQ
-	if (rq_persist_count > 3) {
-		lmf_browsing_state = false;
-		rq_persist_count = 0;
-	}
-	else
-		lmf_browsing_state = true;
-	//pr_info("Run Queue Average: %u\n", rq_info.rq_avg);
-
-	if (!lmf_browsing_state && lmf_screen_state)
-	{
-		if (cpu == BOOT_CPU)
-		{
-			if (lmf_old_state == true)
-			{
-				pr_warn("LMF: disabled!\n");
-				lmf_old_state = false;
-			}
-
-			if (!active_state)
-			{
-				/* set freq to 1.5GHz */
-				//pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_active_max_limit);
-				cpufreq_set_limits(BOOT_CPU, SET_MAX, lmf_active_max_limit);
-				
-				//pr_info("LMF: CPUX set max freq to: %lu\n", lmf_active_max_limit);
-				if (cpu_online(NON_BOOT_CPU1) ||
-					cpu_online(NON_BOOT_CPU2) ||
-					cpu_online(NON_BOOT_CPU3)) {
-					cpufreq_set_limits(NON_BOOT_CPU1, SET_MAX, lmf_active_max_limit);
-					cpufreq_set_limits(NON_BOOT_CPU2, SET_MAX, lmf_active_max_limit);
-					cpufreq_set_limits(NON_BOOT_CPU3, SET_MAX, lmf_active_max_limit);
-				} else {
-					cpufreq_set_limits_off(NON_BOOT_CPU1, SET_MAX, lmf_active_max_limit);
-					cpufreq_set_limits_off(NON_BOOT_CPU2, SET_MAX, lmf_active_max_limit);
-					cpufreq_set_limits_off(NON_BOOT_CPU3, SET_MAX, lmf_active_max_limit);
-				}
-			}
-			
-			jiffies_old = 0;
-			time_int = 0;
-			time_int1 = 0;
-			load_state_total0 = 0;
-			load_state_total1 = 0;
-			msecs_limit_total = 0;
-			load_limit_index = 0;
-			active_state = true;
-		}
-	}
-	else if (lmf_browsing_state && lmf_screen_state) // lmf_browsing_state -> TRUE
-	{
-		struct cpufreq_policy *policy;
-		unsigned long load_state_cpu = 0;
-		unsigned int delay_msec = 0;
-		unsigned long load_total  = 0;
-		unsigned long jiffies_cur = jiffies;
-
-		if (cpu == NON_BOOT_CPU1 || cpu == NON_BOOT_CPU2 || cpu == NON_BOOT_CPU3)
-		{
-			delay_msec = (dbs_tuners_ins.sampling_rate * dbs_info->rate_mult) / 1000;
-			policy = dbs_info->cur_policy;
-			load_state_cpu = ((policy->cur) * delay_msec)/10000;
-
-			time_int1 += delay_msec;
-			load_state_total1 += load_state_cpu;
-		}
-		else
-		{
-			if (lmf_old_state == false)
-			{
-				pr_warn("LMF: enabled!\n");
-				lmf_old_state = true;
-			}
-
-			if (jiffies_old == 0) 
-			{
-				jiffies_old = jiffies_cur;
-			}
-			else
-			{
-				delay_msec = jiffies_to_msecs(jiffies_cur - jiffies_old);
-				jiffies_old = jiffies_cur;
-				policy = dbs_info->cur_policy;
-				load_state_cpu = ((policy->cur) * delay_msec)/10000;
-				
-				time_int += delay_msec;
-				load_state_total0 += load_state_cpu;			
-				
-				/* average */
-				if (time_int >= SAMPLE_DURATION_MSEC)
-				{
-					int i = 0;
-					unsigned long ave_max = 0;
-					unsigned long average = 0;
-					unsigned long average_dec = 0;
-					unsigned long total_load = 0;
-
-					load_total = load_state_total0 + load_state_total1;
-					ave_max = (time_int / 10) * ((lmf_active_max_limit/1000) * 2);
-					average = (load_total * 100) / ave_max;
-					average_dec = (load_total  * 100) % ave_max;
-
-					msecs_limit_total += time_int;
-					load_limit_total[load_limit_index++] = average;
-
-					//pr_warn("LMF: average = %ld.%ld, (%ld:%ld) (%ld:%ld) (%ld:%ld)\n", 
-					//	average, average_dec, time_int, time_int1, load_state_total0, load_state_total1, load_limit_index-1, msecs_limit_total);
-
-					time_int = 0;
-					time_int1 = 0;
-					load_state_total0 = 0;
-					load_state_total1 = 0;
-
-					/* active */
-					if (active_state)
-					{
-						if (load_limit_index >= NUM_ACTIVE_LOAD_ARRAY)
-						{
-							load_limit_index = 0;
-						}
-						
-						if (msecs_limit_total > ACTIVE_DURATION_MSEC)
-						{
-							for (i=0; i<NUM_ACTIVE_LOAD_ARRAY; i++)
-							{
-								total_load += load_limit_total[i];
-							}
-
-							average = total_load / NUM_ACTIVE_LOAD_ARRAY;
-							average_dec = total_load % NUM_ACTIVE_LOAD_ARRAY;
-							pr_warn("LMF:ACTIVE: total_avg = %ld.%ld\n", average, average_dec);
-
-							if (average > lmf_active_load_limit)
-							{
-								msecs_limit_total = 0;
-								load_limit_index = 0;
-								active_state = false;
-
-								/* set freq to 1.0GHz */
-								//pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_inactive_max_limit);
-								cpufreq_set_limits(BOOT_CPU, SET_MAX, lmf_inactive_max_limit);
-								
-								//pr_info("LMF: CPUX set max freq to: %lu\n", lmf_inactive_max_limit);
-								if (cpu_online(NON_BOOT_CPU1) ||
-									cpu_online(NON_BOOT_CPU2) ||
-									cpu_online(NON_BOOT_CPU3)) {
-									cpufreq_set_limits(NON_BOOT_CPU1, SET_MAX, lmf_inactive_max_limit);
-									cpufreq_set_limits(NON_BOOT_CPU2, SET_MAX, lmf_inactive_max_limit);
-									cpufreq_set_limits(NON_BOOT_CPU3, SET_MAX, lmf_inactive_max_limit);
-								} else {
-									cpufreq_set_limits_off(NON_BOOT_CPU1, SET_MAX, lmf_inactive_max_limit);
-									cpufreq_set_limits_off(NON_BOOT_CPU2, SET_MAX, lmf_inactive_max_limit);
-									cpufreq_set_limits_off(NON_BOOT_CPU3, SET_MAX, lmf_inactive_max_limit);
-								}
-							}
-							else
-							{
-								msecs_limit_total = ACTIVE_DURATION_MSEC; // to prevent overflow
-							}
-						}
-					}
-					else /* inactive */
-					{
-						if (load_limit_index >= NUM_INACTIVE_LOAD_ARRAY)
-						{
-							load_limit_index = 0;
-						}
-						
-						if (msecs_limit_total > INACTIVE_DURATION_MSEC)
-						{
-							for (i=0; i<NUM_INACTIVE_LOAD_ARRAY; i++)
-							{
-								total_load += load_limit_total[i];
-							}
-
-							average = total_load / NUM_INACTIVE_LOAD_ARRAY;
-							average_dec = total_load % NUM_INACTIVE_LOAD_ARRAY;
-							pr_warn("LMF:INACTIVE: total_avg = %ld.%ld\n", average, average_dec);
-
-							if (average < lmf_inactive_load_limit)
-							{
-								msecs_limit_total = 0;
-								load_limit_index = 0;
-								active_state = true;
-
-								/* set freq to 1.5GHz */
-								//pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_active_max_limit);
-								cpufreq_set_limits(BOOT_CPU, SET_MAX, lmf_active_max_limit);
-								
-								//pr_info("LMF: CPUX set max freq to: %lu\n", lmf_active_max_limit);
-								if (cpu_online(NON_BOOT_CPU1) ||
-									cpu_online(NON_BOOT_CPU2) ||
-									cpu_online(NON_BOOT_CPU3)) {
-									cpufreq_set_limits(NON_BOOT_CPU1, SET_MAX, lmf_active_max_limit);
-									cpufreq_set_limits(NON_BOOT_CPU2, SET_MAX, lmf_active_max_limit);
-									cpufreq_set_limits(NON_BOOT_CPU3, SET_MAX, lmf_active_max_limit);
-								} else {
-									cpufreq_set_limits_off(NON_BOOT_CPU1, SET_MAX, lmf_active_max_limit);
-									cpufreq_set_limits_off(NON_BOOT_CPU2, SET_MAX, lmf_active_max_limit);
-									cpufreq_set_limits_off(NON_BOOT_CPU3, SET_MAX, lmf_active_max_limit);
-								}
-
-							}
-							else
-							{
-								msecs_limit_total = INACTIVE_DURATION_MSEC; // to prevent overflow
-							}
-						}
-					}
-				}
-			}
-		}	
-	}
-#endif
-
 	mutex_lock(&dbs_info->timer_mutex);
 
 	/* Common NORMAL_SAMPLE setup */
@@ -1928,31 +1462,6 @@ static int cpufreq_governor_dbs(struct cpufreq_policy *policy,
 	return 0;
 }
 
-#ifdef CONFIG_EARLYSUSPEND
-static void cpufreq_intellidemand_early_suspend(struct early_suspend *h)
-{
-	mutex_lock(&dbs_mutex);
-	stored_sampling_rate = dbs_tuners_ins.sampling_rate;
-	dbs_tuners_ins.sampling_rate = DEF_SAMPLING_RATE * 6;
-	update_sampling_rate(dbs_tuners_ins.sampling_rate);
-	mutex_unlock(&dbs_mutex);
-}
-
-static void cpufreq_intellidemand_late_resume(struct early_suspend *h)
-{
-	mutex_lock(&dbs_mutex);
-	dbs_tuners_ins.sampling_rate = stored_sampling_rate;
-	update_sampling_rate(dbs_tuners_ins.sampling_rate);
-	mutex_unlock(&dbs_mutex);
-}
-
-static struct early_suspend cpufreq_intellidemand_early_suspend_info = {
-	.suspend = cpufreq_intellidemand_early_suspend,
-	.resume = cpufreq_intellidemand_late_resume,
-	.level = EARLY_SUSPEND_LEVEL_DISABLE_FB+1,
-};
-#endif
-
 static int __init cpufreq_gov_dbs_init(void)
 {
 	u64 idle_time;
@@ -1994,9 +1503,6 @@ static int __init cpufreq_gov_dbs_init(void)
 		dbs_work->cpu = i;
 	}
 
-#ifdef CONFIG_EARLYSUSPEND
-	register_early_suspend(&cpufreq_intellidemand_early_suspend_info);
-#endif
 	return cpufreq_register_governor(&cpufreq_gov_intellidemand);
 }
 
@@ -2010,9 +1516,6 @@ static void __exit cpufreq_gov_dbs_exit(void)
 			&per_cpu(id_cpu_dbs_info, i);
 		mutex_destroy(&this_dbs_info->timer_mutex);
 	}
-#ifdef CONFIG_EARLYSUSPEND
-	unregister_early_suspend(&cpufreq_intellidemand_early_suspend_info);
-#endif
 	destroy_workqueue(input_wq);
 }
 
-- 
1.7.9.5

