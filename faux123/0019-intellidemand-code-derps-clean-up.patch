From 11b4ae986922659cc94ff2bfbae47177d1fefe9e Mon Sep 17 00:00:00 2001
From: faux123 <reioux@gmail.com>
Date: Sun, 25 Nov 2012 08:12:27 -0800
Subject: [PATCH 019/338] intellidemand: code derps clean up!

Signed-off-by: faux123 <reioux@gmail.com>
---
 arch/arm/mach-msm/cpufreq.c             | 18 ++++++++++++++++--
 drivers/cpufreq/cpufreq_intellidemand.c | 27 +++++++++++++++------------
 2 files changed, 31 insertions(+), 14 deletions(-)

diff --git a/arch/arm/mach-msm/cpufreq.c b/arch/arm/mach-msm/cpufreq.c
index 458a2a8..ce784f7 100644
--- a/arch/arm/mach-msm/cpufreq.c
+++ b/arch/arm/mach-msm/cpufreq.c
@@ -313,7 +313,14 @@ static void msm_cpu_early_suspend(struct early_suspend *h)
 {
 
 #ifdef CONFIG_CPU_FREQ_GOV_INTELLIDEMAND
-	lmf_screen_state = false;
+	int cpu = 0;
+
+	for_each_possible_cpu(cpu) {
+
+		mutex_lock(&per_cpu(cpufreq_suspend, cpu).suspend_mutex);
+		lmf_screen_state = false;
+		mutex_unlock(&per_cpu(cpufreq_suspend, cpu).suspend_mutex);
+	}
 #endif
 
 }
@@ -322,7 +329,14 @@ static void msm_cpu_late_resume(struct early_suspend *h)
 {
 
 #ifdef CONFIG_CPU_FREQ_GOV_INTELLIDEMAND
-	lmf_screen_state = true;
+	int cpu = 0;
+
+	for_each_possible_cpu(cpu) {
+
+		mutex_lock(&per_cpu(cpufreq_suspend, cpu).suspend_mutex);
+		lmf_screen_state = true;
+		mutex_unlock(&per_cpu(cpufreq_suspend, cpu).suspend_mutex);
+	}
 #endif
 
 }
diff --git a/drivers/cpufreq/cpufreq_intellidemand.c b/drivers/cpufreq/cpufreq_intellidemand.c
index ca2f120..6ee01a8 100644
--- a/drivers/cpufreq/cpufreq_intellidemand.c
+++ b/drivers/cpufreq/cpufreq_intellidemand.c
@@ -55,7 +55,7 @@
 #define DBS_INPUT_EVENT_MIN_FREQ		(1026000)
 
 #ifdef CONFIG_CPUFREQ_ID_PERFLOCK
-#define DBS_PERFLOCK_MIN_FREQ			(648000)
+#define DBS_PERFLOCK_MIN_FREQ			(702000)
 #endif
 
 u64 freq_boosted_time;
@@ -1163,7 +1163,7 @@ unsigned long get_lmf_inactive_load(void)
 #define NR_FSHIFT	3
 static unsigned int nr_run_thresholds[] = {
 /* 	1,  2,  3,  4 - on-line cpus target */
-	5,  7,  9,  UINT_MAX /* avg run threads * 2 (e.g., 9 = 2.25 threads) */
+	7,  9, 11,  UINT_MAX /* avg run threads * 2 (e.g., 9 = 2.25 threads) */
 	};
 
 static unsigned int nr_run_hysteresis = 4;  /* 0.5 thread */
@@ -1214,10 +1214,8 @@ static void do_dbs_timer(struct work_struct *work)
 				if (persist_count > 0)
 					persist_count--;
 
-				if (num_online_cpus() >= 2 && persist_count == 0) {
+				if (num_online_cpus() == 2 && persist_count == 0) {
 					cpu_down(1);
-					cpu_down(2);
-					cpu_down(3);
 #ifdef CONFIG_CPUFREQ_ID_PERFLOCK
 					saved_policy_min = policy->min;
 					policy->min = DBS_PERFLOCK_MIN_FREQ;
@@ -1231,6 +1229,9 @@ static void do_dbs_timer(struct work_struct *work)
 #ifdef CONFIG_CPUFREQ_ID_PERFLOCK
 					policy->min = saved_policy_min;
 #endif
+				} else {
+					cpu_down(2);
+					cpu_down(3);
 				}
 				break;
 			case 3:
@@ -1240,6 +1241,8 @@ static void do_dbs_timer(struct work_struct *work)
 #ifdef CONFIG_CPUFREQ_ID_PERFLOCK
 					policy->min = saved_policy_min;
 #endif
+				} else {
+					cpu_down(3);
 				}
 				break;
 			case 4:
@@ -1417,7 +1420,7 @@ static void do_dbs_timer(struct work_struct *work)
 								pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_inactive_max_limit);
 								cpufreq_set_limits(BOOT_CPU, SET_MAX, lmf_inactive_max_limit);
 								
-								pr_info("LMF: CPU1 set max freq to: %lu\n", lmf_inactive_max_limit);
+								pr_info("LMF: CPUX set max freq to: %lu\n", lmf_inactive_max_limit);
 								if (cpu_online(NON_BOOT_CPU1) ||
 									cpu_online(NON_BOOT_CPU2) ||
 									cpu_online(NON_BOOT_CPU3)) {
@@ -1470,17 +1473,17 @@ static void do_dbs_timer(struct work_struct *work)
 								pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_active_max_limit);
 								cpufreq_set_limits(BOOT_CPU, SET_MAX, lmf_active_max_limit);
 								
-								pr_info("LMF: CPU1 set max freq to: %lu\n", lmf_active_max_limit);
+								pr_info("LMF: CPUX set max freq to: %lu\n", lmf_active_max_limit);
 								if (cpu_online(NON_BOOT_CPU1) ||
 									cpu_online(NON_BOOT_CPU2) ||
 									cpu_online(NON_BOOT_CPU3)) {
-									cpufreq_set_limits(NON_BOOT_CPU1, SET_MAX, lmf_inactive_max_limit);
-									cpufreq_set_limits(NON_BOOT_CPU2, SET_MAX, lmf_inactive_max_limit);
-									cpufreq_set_limits(NON_BOOT_CPU3, SET_MAX, lmf_inactive_max_limit);
+									cpufreq_set_limits(NON_BOOT_CPU1, SET_MAX, lmf_active_max_limit);
+									cpufreq_set_limits(NON_BOOT_CPU2, SET_MAX, lmf_active_max_limit);
+									cpufreq_set_limits(NON_BOOT_CPU3, SET_MAX, lmf_active_max_limit);
 								} else {
 									cpufreq_set_limits_off(NON_BOOT_CPU1, SET_MAX, lmf_active_max_limit);
-									cpufreq_set_limits_off(NON_BOOT_CPU2, SET_MAX, lmf_inactive_max_limit);
-									cpufreq_set_limits_off(NON_BOOT_CPU3, SET_MAX, lmf_inactive_max_limit);
+									cpufreq_set_limits_off(NON_BOOT_CPU2, SET_MAX, lmf_active_max_limit);
+									cpufreq_set_limits_off(NON_BOOT_CPU3, SET_MAX, lmf_active_max_limit);
 								}
 
 							}
-- 
1.8.1.2

