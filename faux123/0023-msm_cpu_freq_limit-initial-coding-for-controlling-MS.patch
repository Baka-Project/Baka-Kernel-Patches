From b20a5249ee8f6434dc100fadebc3c4abf777bc60 Mon Sep 17 00:00:00 2001
From: Paul Reioux <reioux@gmail.com>
Date: Sat, 2 Nov 2013 18:42:51 -0500
Subject: [PATCH 023/338] msm_cpu_freq_limit: initial coding for controlling
 MSM quadcore cpus

this module will allow proper max frequency control across all msm cores

Signed-off-by: Paul Reioux <reioux@gmail.com>
---
 arch/arm/mach-msm/Kconfig         |  11 ++++
 arch/arm/mach-msm/Makefile        |   1 +
 arch/arm/mach-msm/cpufreq_limit.c | 129 ++++++++++++++++++++++++++++++++++++++
 3 files changed, 141 insertions(+)
 create mode 100644 arch/arm/mach-msm/cpufreq_limit.c

diff --git a/arch/arm/mach-msm/Kconfig b/arch/arm/mach-msm/Kconfig
index 44db2ca..599b858 100644
--- a/arch/arm/mach-msm/Kconfig
+++ b/arch/arm/mach-msm/Kconfig
@@ -1918,6 +1918,17 @@ config MSM_CPU_FREQ_MIN
 
 endif # CPU_FREQ_MSM
 
+config MSM_CPUFREQ_LIMITER
+	tristate "MSM CPU frequency limiter"
+	default n
+	help
+	  This driver limits MSM CPU frequency through sysfs file system.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called cpufreq_stats.
+
+	  If in doubt, say N.
+
 config CPU_VOLTAGE_TABLE
 	bool "Enable CPU Voltage Table via sysfs for adjustements"
 	default n
diff --git a/arch/arm/mach-msm/Makefile b/arch/arm/mach-msm/Makefile
index 9cc84d2..4410922 100644
--- a/arch/arm/mach-msm/Makefile
+++ b/arch/arm/mach-msm/Makefile
@@ -434,3 +434,4 @@ obj-$(CONFIG_CPU_FREQ_MSM) += cpufreq.o
 
 obj-$(CONFIG_WALL_CLK) += wallclk.o
 obj-$(CONFIG_WALL_CLK_SYSFS) += wallclk_sysfs.o
+obj-$(CONFIG_MSM_CPUFREQ_LIMITER) += cpufreq_limit.o
diff --git a/arch/arm/mach-msm/cpufreq_limit.c b/arch/arm/mach-msm/cpufreq_limit.c
new file mode 100644
index 0000000..b1745c0
--- /dev/null
+++ b/arch/arm/mach-msm/cpufreq_limit.c
@@ -0,0 +1,129 @@
+/*
+ * Author: Paul Reioux aka Faux123 <reioux@gmail.com>
+ *
+ * Copyright 2012 Paul Reioux
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/kobject.h>
+#include <linux/sysfs.h>
+
+#include <linux/cpu.h>
+#include <linux/cpufreq.h>
+
+#include <mach/cpufreq.h>
+
+#define MSM_CPUFREQ_LIMIT_VERSION 1
+
+static uint32_t limited_max_freq = MSM_CPUFREQ_NO_LIMIT;
+
+static int update_cpu_max_freq(int cpu, uint32_t max_freq)
+{
+	int ret = 0;
+
+	ret = msm_cpufreq_set_freq_limits(cpu, MSM_CPUFREQ_NO_LIMIT, max_freq);
+	if (ret)
+		return ret;
+
+	limited_max_freq = max_freq;
+	if (max_freq != MSM_CPUFREQ_NO_LIMIT)
+		pr_info("msm_cpufreq_limit: Limiting cpu%d max frequency to %d\n",
+				cpu, max_freq);
+	else
+		pr_info("msm_cpufreq_limit: Max frequency reset for cpu%d\n", cpu);
+
+	ret = cpufreq_update_policy(cpu);
+
+	return ret;
+}
+
+static ssize_t msm_cpufreq_limit_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%u\n", limited_max_freq);
+}
+
+static ssize_t msm_cpufreq_limit_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	int cpu = 0;
+	int ret = 0;
+	uint32_t max_freq = limited_max_freq;
+
+	unsigned int data;
+
+	if(sscanf(buf, "%u\n", &data) == 1) {
+		for_each_possible_cpu(cpu) {
+			ret = update_cpu_max_freq(cpu, max_freq);
+			if (ret)
+				pr_debug("Unable to limit cpu%d max freq to %d\n",
+						cpu, max_freq);
+		}
+		if (!ret)
+			limited_max_freq = data;
+	}
+
+	return count;
+}
+
+static ssize_t msm_cpufreq_limit_version_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "version: %u\n", MSM_CPUFREQ_LIMIT_VERSION);
+}
+
+static struct kobj_attribute msm_cpufreq_limit_attribute = 
+	__ATTR(cpufreq_limit, 0666, msm_cpufreq_limit_show, msm_cpufreq_limit_store);
+
+static struct kobj_attribute msm_cpufreq_limit_version_attribute = 
+	__ATTR(msm_cpufreq_limit_version, 0444 , msm_cpufreq_limit_version_show, NULL);
+
+static struct attribute *msm_cpufreq_limit_attrs[] =
+	{
+		&msm_cpufreq_limit_attribute.attr,
+		&msm_cpufreq_limit_version_attribute.attr,
+		NULL,
+	};
+
+static struct attribute_group msm_cpufreq_limit_attr_group =
+	{
+		.attrs = msm_cpufreq_limit_attrs,
+	};
+
+static struct kobject *msm_cpufreq_limit_kobj;
+
+static int msm_cpufreq_limit_init(void)
+{
+	int sysfs_result;
+
+	msm_cpufreq_limit_kobj = kobject_create_and_add("msm_cpufreq_limit", kernel_kobj);
+	if (!msm_cpufreq_limit_kobj) {
+		pr_err("%s msm_cpufreq_limit_kobj kobject create failed!\n", __FUNCTION__);
+		return -ENOMEM;
+        }
+
+	sysfs_result = sysfs_create_group(msm_cpufreq_limit_kobj, &msm_cpufreq_limit_attr_group);
+
+        if (sysfs_result) {
+		pr_info("%s msm_cpufreq_limit_kobj create failed!\n", __FUNCTION__);
+		kobject_put(msm_cpufreq_limit_kobj);
+	}
+	return sysfs_result;
+}
+
+static void msm_cpufreq_limit_exit(void)
+{
+	if (msm_cpufreq_limit_kobj != NULL)
+		kobject_put(msm_cpufreq_limit_kobj);
+}
+
+module_init(msm_cpufreq_limit_init);
+module_exit(msm_cpufreq_limit_exit);
+
-- 
1.8.1.2

