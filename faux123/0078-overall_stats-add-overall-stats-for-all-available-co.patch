From b99283f67c8fd07f7b3fdf0504ee0c99c92450b1 Mon Sep 17 00:00:00 2001
From: faux123 <reioux@gmail.com>
Date: Sun, 21 Apr 2013 23:08:51 -0700
Subject: [PATCH 078/507] overall_stats: add overall stats for all available
 cores

this is much more accurate stats tracking than just displaying core 0's
stats from most other kernels

Signed-off-by: faux123 <reioux@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/cpufreq/cpufreq_stats.c |  131 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 124 insertions(+), 7 deletions(-)

diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index 1a9a6a5..ef63fc6 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -30,6 +30,17 @@ static struct freq_attr _attr_##_name = {\
 	.show = _show,\
 };
 
+#define CPU_FREQ_LEVEL_NUMBER 20
+
+static cputime64_t cpu0_time_in_state[CPU_FREQ_LEVEL_NUMBER] = {0};
+static unsigned int cpu0_total_trans = 0;
+static cputime64_t cpu1_time_in_state[CPU_FREQ_LEVEL_NUMBER] = {0};
+static unsigned int cpu1_total_trans = 0;
+static cputime64_t cpu2_time_in_state[CPU_FREQ_LEVEL_NUMBER] = {0};
+static unsigned int cpu2_total_trans = 0;
+static cputime64_t cpu3_time_in_state[CPU_FREQ_LEVEL_NUMBER] = {0};
+static unsigned int cpu3_total_trans = 0;
+
 struct cpufreq_stats {
 	unsigned int cpu;
 	unsigned int total_trans;
@@ -59,9 +70,32 @@ static int cpufreq_stats_update(unsigned int cpu)
 	cur_time = get_jiffies_64();
 	spin_lock(&cpufreq_stats_lock);
 	stat = per_cpu(cpufreq_stats_table, cpu);
+	if (!stat) {
+		spin_unlock(&cpufreq_stats_lock);
+		return 0;
+	}
+
 	if (stat->time_in_state)
 		stat->time_in_state[stat->last_index] +=
 			cur_time - stat->last_time;
+
+	if (cpu == 0)
+		cpu0_time_in_state[stat->last_index] =
+			cputime64_add(cpu0_time_in_state[stat->last_index],
+			cputime_sub(cur_time, stat->last_time));
+	else if (cpu == 1)
+		cpu1_time_in_state[stat->last_index] =
+			cputime64_add(cpu1_time_in_state[stat->last_index],
+			cputime_sub(cur_time, stat->last_time));
+	else if (cpu == 2)
+		cpu2_time_in_state[stat->last_index] =
+			cputime64_add(cpu2_time_in_state[stat->last_index],
+			cputime_sub(cur_time, stat->last_time));
+	else if (cpu == 3)
+		cpu3_time_in_state[stat->last_index] =
+			cputime64_add(cpu3_time_in_state[stat->last_index],
+			cputime_sub(cur_time, stat->last_time));
+
 	stat->last_time = cur_time;
 	spin_unlock(&cpufreq_stats_lock);
 	return 0;
@@ -76,6 +110,15 @@ static ssize_t show_total_trans(struct cpufreq_policy *policy, char *buf)
 			per_cpu(cpufreq_stats_table, stat->cpu)->total_trans);
 }
 
+static ssize_t show_overall_total_trans(struct kobject *kobj,
+                                      struct attribute *attr, char *buf)
+{
+        return sprintf(buf, "%d\n%d\n%d\n%d\n", cpu0_total_trans,
+						cpu1_total_trans,
+						cpu2_total_trans,
+						cpu3_total_trans);
+}
+
 static ssize_t show_time_in_state(struct cpufreq_policy *policy, char *buf)
 {
 	ssize_t len = 0;
@@ -92,6 +135,41 @@ static ssize_t show_time_in_state(struct cpufreq_policy *policy, char *buf)
 	return len;
 }
 
+static ssize_t show_overall_time_in_state(struct kobject *kobj,
+                                      struct attribute *attr, char *buf)
+{
+	ssize_t len = 0;
+	int i;
+	unsigned long long cputime = 0;
+	struct cpufreq_stats *stat = per_cpu(cpufreq_stats_table, 1);
+	if (stat)
+		cpufreq_stats_update(1);
+	else
+		stat = per_cpu(cpufreq_stats_table, 0);
+	if (!stat)
+		return 0;
+
+	for (i = 0; i < stat->state_num; i++) {
+		cputime = cputime64_to_clock_t(cpu0_time_in_state[i]);
+		len += sprintf(buf + len, "%u %llu\n", stat->freq_table[i], cputime);
+	}
+	for (i = 0; i < stat->state_num; i++) {
+		cputime = cputime64_to_clock_t(cpu1_time_in_state[i]);
+		len += sprintf(buf + len, "%u %llu\n", stat->freq_table[i], cputime);
+	}
+	for (i = 0; i < stat->state_num; i++) {
+		cputime = cputime64_to_clock_t(cpu2_time_in_state[i]);
+		len += sprintf(buf + len, "%u %llu\n", stat->freq_table[i], cputime);
+	}
+	for (i = 0; i < stat->state_num; i++) {
+		cputime = cputime64_to_clock_t(cpu3_time_in_state[i]);
+		len += sprintf(buf + len, "%u %llu\n", stat->freq_table[i], cputime);
+	}
+
+	return len;
+}
+
+
 #ifdef CONFIG_CPU_FREQ_STAT_DETAILS
 static ssize_t show_trans_table(struct cpufreq_policy *policy, char *buf)
 {
@@ -142,6 +220,10 @@ CPUFREQ_STATDEVICE_ATTR(trans_table, 0444, show_trans_table);
 CPUFREQ_STATDEVICE_ATTR(total_trans, 0444, show_total_trans);
 CPUFREQ_STATDEVICE_ATTR(time_in_state, 0444, show_time_in_state);
 
+typedef ssize_t (*show)(struct cpufreq_policy *, char *);
+CPUFREQ_STATDEVICE_ATTR(overall_time_in_state, 0444, (show)show_overall_time_in_state);
+CPUFREQ_STATDEVICE_ATTR(overall_total_trans, 0444, (show)show_overall_total_trans);
+
 static struct attribute *default_attrs[] = {
 	&_attr_total_trans.attr,
 	&_attr_time_in_state.attr,
@@ -150,11 +232,23 @@ static struct attribute *default_attrs[] = {
 #endif
 	NULL
 };
+
+static struct attribute *overall_attrs[] = {
+	&_attr_overall_time_in_state.attr,
+	&_attr_overall_total_trans.attr,
+	NULL
+};
+
 static struct attribute_group stats_attr_group = {
 	.attrs = default_attrs,
 	.name = "stats"
 };
 
+static struct attribute_group overall_stats_attr_group = {
+        .attrs = overall_attrs,
+        .name = "overall_stats"
+};
+
 static int freq_table_get_index(struct cpufreq_stats *stat, unsigned int freq)
 {
 	int index;
@@ -169,12 +263,18 @@ static int freq_table_get_index(struct cpufreq_stats *stat, unsigned int freq)
  */
 static void cpufreq_stats_free_table(unsigned int cpu)
 {
-	struct cpufreq_stats *stat = per_cpu(cpufreq_stats_table, cpu);
+	struct cpufreq_stats *stat;
+
+	spin_lock(&cpufreq_stats_lock);
+	stat = per_cpu(cpufreq_stats_table, cpu);
+	per_cpu(cpufreq_stats_table, cpu) = NULL;
+	spin_unlock(&cpufreq_stats_lock);
+
 	if (stat) {
+		cpufreq_stats_update(cpu);
 		kfree(stat->time_in_state);
 		kfree(stat);
 	}
-	per_cpu(cpufreq_stats_table, cpu) = NULL;
 }
 
 /* must be called early in the CPU removal sequence (before
@@ -290,9 +390,14 @@ static int cpufreq_stat_notifier_trans(struct notifier_block *nb,
 	if (val != CPUFREQ_POSTCHANGE)
 		return 0;
 
+	cpufreq_stats_update(freq->cpu);
+
+	spin_lock(&cpufreq_stats_lock);
 	stat = per_cpu(cpufreq_stats_table, freq->cpu);
-	if (!stat)
+	if (!stat) {
+		spin_unlock(&cpufreq_stats_lock);
 		return 0;
+	}
 
 	old_index = stat->last_index;
 	new_index = freq_table_get_index(stat, freq->new);
@@ -301,17 +406,26 @@ static int cpufreq_stat_notifier_trans(struct notifier_block *nb,
 	if (old_index == -1 || new_index == -1)
 		return 0;
 
-	cpufreq_stats_update(freq->cpu);
-
-	if (old_index == new_index)
+	if (old_index == new_index) {
+		spin_unlock(&cpufreq_stats_lock);
 		return 0;
+	}
 
-	spin_lock(&cpufreq_stats_lock);
 	stat->last_index = new_index;
 #ifdef CONFIG_CPU_FREQ_STAT_DETAILS
 	stat->trans_table[old_index * stat->max_state + new_index]++;
 #endif
 	stat->total_trans++;
+
+	if (freq->cpu == 0)
+		cpu0_total_trans++;
+	else if (freq->cpu == 1)
+		cpu1_total_trans++;
+	else if (freq->cpu == 2)
+		cpu2_total_trans++;
+	else if (freq->cpu == 3)
+		cpu3_total_trans++;
+
 	spin_unlock(&cpufreq_stats_lock);
 	return 0;
 }
@@ -401,6 +515,9 @@ static int __init cpufreq_stats_init(void)
 	for_each_online_cpu(cpu) {
 		cpufreq_update_policy(cpu);
 	}
+
+	ret = sysfs_create_group(cpufreq_global_kobject, &overall_stats_attr_group);
+
 	return 0;
 }
 static void __exit cpufreq_stats_exit(void)
-- 
1.7.9.5

