From 28f6097a1787e61bb3cd8f405196860dffec162c Mon Sep 17 00:00:00 2001
From: Paul Reioux <reioux@gmail.com>
Date: Mon, 21 Oct 2013 02:29:52 -0500
Subject: [PATCH 302/338] intelliplug: replaced deprecated early_suspend driver
 with userspace interface

early_suspend has been deprecated, so move original functionality to sysfs
interfae and have userspace app to replicate the early_suspend functionality

bump version to 1.7

Signed-off-by: Paul Reioux <reioux@gmail.com>
---
 arch/arm/mach-msm/intelli_plug.c | 84 +++++++++++++++++++++++++++++++++-------
 1 file changed, 70 insertions(+), 14 deletions(-)

diff --git a/arch/arm/mach-msm/intelli_plug.c b/arch/arm/mach-msm/intelli_plug.c
index 44fa649..c88b561 100644
--- a/arch/arm/mach-msm/intelli_plug.c
+++ b/arch/arm/mach-msm/intelli_plug.c
@@ -13,7 +13,6 @@
  * GNU General Public License for more details.
  *
  */
-#include <linux/earlysuspend.h>
 #include <linux/workqueue.h>
 #include <linux/cpu.h>
 #include <linux/sched.h>
@@ -21,11 +20,15 @@
 #include <linux/module.h>
 #include <linux/rq_stats.h>
 
+#include <linux/module.h>
+#include <linux/kobject.h>
+#include <linux/sysfs.h>
+
 //#define DEBUG_INTELLI_PLUG
 #undef DEBUG_INTELLI_PLUG
 
 #define INTELLI_PLUG_MAJOR_VERSION	1
-#define INTELLI_PLUG_MINOR_VERSION	6
+#define INTELLI_PLUG_MINOR_VERSION	7
 
 #define DEF_SAMPLING_RATE		(50000)
 #define DEF_SAMPLING_MS			(200)
@@ -51,6 +54,8 @@ module_param(eco_mode_active, uint, 0644);
 static unsigned int persist_count = 0;
 static bool suspended = false;
 
+static int sleep_active = 0;
+
 #define NR_FSHIFT	3
 static unsigned int nr_fshift = NR_FSHIFT;
 module_param(nr_fshift, uint, 0644);
@@ -266,8 +271,7 @@ static void __cpuinit intelli_plug_work_fn(struct work_struct *work)
 		msecs_to_jiffies(DEF_SAMPLING_MS));
 }
 
-#ifdef CONFIG_HAS_EARLYSUSPEND
-static void intelli_plug_early_suspend(struct early_suspend *handler)
+static void intelli_plug_suspend(void)
 {
 	int i;
 	int num_of_active_cores = 4;
@@ -284,7 +288,7 @@ static void intelli_plug_early_suspend(struct early_suspend *handler)
 	}
 }
 
-static void __cpuinit intelli_plug_late_resume(struct early_suspend *handler)
+static void __cpuinit intelli_plug_resume(void)
 {
 	int num_of_active_cores;
 	int i;
@@ -309,17 +313,72 @@ static void __cpuinit intelli_plug_late_resume(struct early_suspend *handler)
 		msecs_to_jiffies(10));
 }
 
-static struct early_suspend intelli_plug_early_suspend_struct_driver = {
-	.level = EARLY_SUSPEND_LEVEL_DISABLE_FB + 10,
-	.suspend = intelli_plug_early_suspend,
-	.resume = intelli_plug_late_resume,
-};
-#endif	/* CONFIG_HAS_EARLYSUSPEND */
+static ssize_t __cpuinit sleep_active_store(struct kobject *kobj,
+                struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	int input = 0;
+
+	sscanf(buf, "%d", &input);
+
+	if (input == 0) {
+		if (sleep_active == 1) {
+			intelli_plug_resume();
+			sleep_active = 0;
+		}
+	} else {
+		if (sleep_active == 0) {
+			intelli_plug_suspend();
+			sleep_active = 1;
+		}
+	}
+	return 0;
+}
+
+static ssize_t sleep_active_show(struct kobject *kobj,
+                                struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d", sleep_active);
+}
+
+static struct kobj_attribute sleep_active_attribute_driver = 
+	__ATTR(sleep_active_status, 0666,
+		sleep_active_show, sleep_active_store);
+
+static struct attribute *sleep_active_attrs[] =
+        {
+                &sleep_active_attribute_driver.attr,
+                NULL,
+        };
+
+static struct attribute_group sleep_active_attr_group =
+        {
+                .attrs = sleep_active_attrs,
+        };
+
+static struct kobject *sleep_active_kobj;
 
 int __init intelli_plug_init(void)
 {
 	/* We want all CPUs to do sampling nearly on same jiffy */
 	int delay = usecs_to_jiffies(DEF_SAMPLING_RATE);
+	int sysfs_result;
+
+	sleep_active_kobj =
+		kobject_create_and_add("intelliplug", kernel_kobj);
+
+        if (!sleep_active_kobj) {
+                pr_err("%s intelliplug create failed!\n",
+                        __FUNCTION__);
+                return -ENOMEM;
+        }
+
+        sysfs_result = sysfs_create_group(sleep_active_kobj,
+                        &sleep_active_attr_group);
+
+        if (sysfs_result) {
+                pr_info("%s sysfs create failed!\n", __FUNCTION__);
+                kobject_put(sleep_active_kobj);
+        }
 
 	if (num_online_cpus() > 1)
 		delay -= jiffies % delay;
@@ -332,9 +391,6 @@ int __init intelli_plug_init(void)
 	INIT_DELAYED_WORK(&intelli_plug_work, intelli_plug_work_fn);
 	schedule_delayed_work_on(0, &intelli_plug_work, delay);
 
-#ifdef CONFIG_HAS_EARLYSUSPEND
-	register_early_suspend(&intelli_plug_early_suspend_struct_driver);
-#endif
 	return 0;
 }
 
-- 
1.8.1.2

