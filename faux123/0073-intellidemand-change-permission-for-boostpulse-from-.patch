From a670bc0cb43e6e805f58d0bf5a9193257ea6b44d Mon Sep 17 00:00:00 2001
From: faux123 <reioux@gmail.com>
Date: Thu, 14 Mar 2013 02:21:02 -0500
Subject: [PATCH 073/507] intellidemand: change permission for boostpulse from
 root to system

for use with Android PowerHAL

Signed-off-by: faux123 <reioux@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/cpufreq/cpufreq_intellidemand.c |   43 ++++++++++++++++++++++++-------
 1 file changed, 34 insertions(+), 9 deletions(-)

diff --git a/drivers/cpufreq/cpufreq_intellidemand.c b/drivers/cpufreq/cpufreq_intellidemand.c
index bb22d3c..6255e9d 100644
--- a/drivers/cpufreq/cpufreq_intellidemand.c
+++ b/drivers/cpufreq/cpufreq_intellidemand.c
@@ -32,6 +32,9 @@
 #endif
 #include <linux/rq_stats.h>
 
+#include <linux/syscalls.h>
+#include <linux/highuid.h>
+
 #define INTELLIDEMAND_MAJOR_VERSION	4
 #define INTELLIDEMAND_MINOR_VERSION	2
 
@@ -424,8 +427,12 @@ static ssize_t store_boostpulse(struct kobject *kobj, struct attribute *attr,
 	unsigned long val;
 
 	ret = kstrtoul(buf, 0, &val);
-	if (ret < 0)
+	if (ret < 0) {
+		pr_err("Bad Boost reqeust!\n");
 		return ret;
+	}
+
+	//pr_info("Boost requested!\n");
 
 	dbs_tuners_ins.boosted = 1;
 	freq_boosted_time = ktime_to_us(ktime_get());
@@ -433,6 +440,7 @@ static ssize_t store_boostpulse(struct kobject *kobj, struct attribute *attr,
 	if (sampling_rate_boosted) {
 		sampling_rate_boosted = 0;
 		dbs_tuners_ins.sampling_rate = current_sampling_rate;
+		//pr_info("Boosted Sampling rate %u\n", current_sampling_rate);
 	}
 	return count;
 }
@@ -1361,10 +1369,10 @@ static void do_dbs_timer(struct work_struct *work)
 			if (!active_state)
 			{
 				/* set freq to 1.5GHz */
-				pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_active_max_limit);
+				//pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_active_max_limit);
 				cpufreq_set_limits(BOOT_CPU, SET_MAX, lmf_active_max_limit);
 				
-				pr_info("LMF: CPUX set max freq to: %lu\n", lmf_active_max_limit);
+				//pr_info("LMF: CPUX set max freq to: %lu\n", lmf_active_max_limit);
 				if (cpu_online(NON_BOOT_CPU1) ||
 					cpu_online(NON_BOOT_CPU2) ||
 					cpu_online(NON_BOOT_CPU3)) {
@@ -1478,10 +1486,10 @@ static void do_dbs_timer(struct work_struct *work)
 								active_state = false;
 
 								/* set freq to 1.0GHz */
-								pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_inactive_max_limit);
+								//pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_inactive_max_limit);
 								cpufreq_set_limits(BOOT_CPU, SET_MAX, lmf_inactive_max_limit);
 								
-								pr_info("LMF: CPUX set max freq to: %lu\n", lmf_inactive_max_limit);
+								//pr_info("LMF: CPUX set max freq to: %lu\n", lmf_inactive_max_limit);
 								if (cpu_online(NON_BOOT_CPU1) ||
 									cpu_online(NON_BOOT_CPU2) ||
 									cpu_online(NON_BOOT_CPU3)) {
@@ -1525,10 +1533,10 @@ static void do_dbs_timer(struct work_struct *work)
 								active_state = true;
 
 								/* set freq to 1.5GHz */
-								pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_active_max_limit);
+								//pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_active_max_limit);
 								cpufreq_set_limits(BOOT_CPU, SET_MAX, lmf_active_max_limit);
 								
-								pr_info("LMF: CPUX set max freq to: %lu\n", lmf_active_max_limit);
+								//pr_info("LMF: CPUX set max freq to: %lu\n", lmf_active_max_limit);
 								if (cpu_online(NON_BOOT_CPU1) ||
 									cpu_online(NON_BOOT_CPU2) ||
 									cpu_online(NON_BOOT_CPU3)) {
@@ -1629,6 +1637,18 @@ static int should_io_be_busy(void)
 #endif
 }
 
+#define	AID_SYSTEM	(1000)
+static void dbs_chown(void)
+{
+	int ret;
+
+	ret =
+	sys_chown("/sys/devices/system/cpu/cpufreq/intellidemand/boostpulse",
+		low2highuid(AID_SYSTEM), low2highgid(0));
+	if (ret)
+		pr_err("sys_chown: boostpulse error: %d", ret);
+}
+
 static void dbs_refresh_callback(struct work_struct *work)
 {
 	struct cpufreq_policy *policy;
@@ -1652,8 +1672,11 @@ static void dbs_refresh_callback(struct work_struct *work)
 	}
 
 	if (policy->cur < DBS_INPUT_EVENT_MIN_FREQ) {
-		 //pr_info("%s: set cpufreq to DBS_INPUT_EVENT_MIN_FREQ(%d)
-		 //	directly due to input events!\n", __func__, DBS_INPUT_EVENT_MIN_FREQ);
+#if 0
+		pr_info("%s: set cpufreq to DBS_INPUT_EVENT_MIN_FREQ(%d) \
+			directly due to input events!\n", __func__, \
+			DBS_INPUT_EVENT_MIN_FREQ);
+#endif
 		/*
 		 * Arch specific cpufreq driver may fail.
 		 * Don't update governor frequency upon failure.
@@ -1784,6 +1807,8 @@ static int cpufreq_governor_dbs(struct cpufreq_policy *policy,
 
 		mutex_lock(&dbs_mutex);
 
+		dbs_chown();
+
 		dbs_enable++;
 		for_each_cpu(j, policy->cpus) {
 			struct cpu_dbs_info_s *j_dbs_info;
-- 
1.7.9.5

