From 0b0c0221509de8fa845f2bb750abfddca3bd3eed Mon Sep 17 00:00:00 2001
From: faux123 <reioux@gmail.com>
Date: Fri, 28 Dec 2012 20:16:30 -0800
Subject: [PATCH 065/507] intellidemand: remove cpu cores autoplug capability
 (replaced by intelli_plug)

Signed-off-by: faux123 <reioux@gmail.com>

Conflicts:
	drivers/cpufreq/Kconfig
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/cpufreq/cpufreq_intellidemand.c |  133 +------------------------------
 1 file changed, 1 insertion(+), 132 deletions(-)

diff --git a/drivers/cpufreq/cpufreq_intellidemand.c b/drivers/cpufreq/cpufreq_intellidemand.c
index 900bcf6..4fc246e 100644
--- a/drivers/cpufreq/cpufreq_intellidemand.c
+++ b/drivers/cpufreq/cpufreq_intellidemand.c
@@ -1343,58 +1343,6 @@ unsigned long get_lmf_inactive_load(void)
 }
 #endif
 
-#define NR_FSHIFT	3
-static unsigned int nr_fshift = NR_FSHIFT;
-static unsigned int nr_run_thresholds_full[] = {
-/* 	1,  2,  3,  4 - on-line cpus target */
-	5,  7,  9,  UINT_MAX /* avg run threads * 2 (e.g., 9 = 2.25 threads) */
-	};
-
-static unsigned int nr_run_thresholds_eco[] = {
-/*      1,  2, - on-line cpus target */
-        3,  UINT_MAX /* avg run threads * 2 (e.g., 9 = 2.25 threads) */
-        };
-
-static unsigned int nr_run_hysteresis = 4;  /* 0.5 thread */
-static unsigned int nr_run_last;
-
-static unsigned int calculate_thread_stats(void)
-{
-	unsigned int avg_nr_run = avg_nr_running();
-	unsigned int nr_run;
-	unsigned int threshold_size;
-
-	if (!eco_mode_active) {
-		threshold_size =  ARRAY_SIZE(nr_run_thresholds_full);
-		nr_run_hysteresis = 8;
-		nr_fshift = 3;
-		//pr_info("intelldemand: full mode active!");
-	}
-	else {
-		threshold_size =  ARRAY_SIZE(nr_run_thresholds_eco);
-		nr_run_hysteresis = 4;
-		nr_fshift = 1;
-		//pr_info("intelldemand: eco mode active!");
-	}
-
-	for (nr_run = 1; nr_run < threshold_size; nr_run++) {
-		unsigned int nr_threshold;
-		if (!eco_mode_active)
-			nr_threshold = nr_run_thresholds_full[nr_run - 1];
-		else
-			nr_threshold = nr_run_thresholds_eco[nr_run - 1];
-
-		if (nr_run_last <= nr_run)
-			nr_threshold += nr_run_hysteresis;
-		if (avg_nr_run <= (nr_threshold << (FSHIFT - nr_fshift)))
-			break;
-	}
-	nr_run_last = nr_run;
-
-	return nr_run;
-}
-
-static unsigned int persist_count = 0;
 static unsigned int rq_persist_count = 0;
 
 static void do_dbs_timer(struct work_struct *work)
@@ -1405,72 +1353,12 @@ static void do_dbs_timer(struct work_struct *work)
 	int sample_type = dbs_info->sample_type;
 
 	int delay;
-	unsigned int nr_run_stat;
 #ifdef CONFIG_CPUFREQ_ID_PERFLOCK
 	struct cpufreq_policy *policy;
 
 	policy = dbs_info->cur_policy;
 #endif
 
-	nr_run_stat = calculate_thread_stats();
-	//pr_info("run stats: %u\n", nr_run_stat);
-
-#if 1
-	if (cpu == BOOT_CPU && lmf_screen_state) {
-		switch (nr_run_stat) {
-			case 1:
-				if (persist_count > 0)
-					persist_count--;
-
-				if (num_online_cpus() == 2 && persist_count == 0) {
-					cpu_down(1);
-#ifdef CONFIG_CPUFREQ_ID_PERFLOCK
-					saved_policy_min = policy->min;
-					policy->min = DBS_PERFLOCK_MIN_FREQ;
-#endif
-				}
-				if (eco_mode_active) {
-					cpu_down(3);
-					cpu_down(2);
-				}
-				break;
-			case 2:
-				persist_count = 27;
-				if (num_online_cpus() == 1) {
-					cpu_up(1);
-#ifdef CONFIG_CPUFREQ_ID_PERFLOCK
-					policy->min = saved_policy_min;
-#endif
-				} else {
-					cpu_down(3);
-					cpu_down(2);
-				}
-				break;
-			case 3:
-				persist_count = 21;
-				if (num_online_cpus() == 2) {
-					cpu_up(2);
-#ifdef CONFIG_CPUFREQ_ID_PERFLOCK
-					policy->min = saved_policy_min;
-#endif
-				} else {
-					cpu_down(3);
-				}
-				break;
-			case 4:
-				persist_count = 15;
-				if (num_online_cpus() == 3) {
-					cpu_up(3);
-#ifdef CONFIG_CPUFREQ_ID_PERFLOCK
-					policy->min = saved_policy_min;
-#endif
-				}
-				break;
-			default:
-				pr_err("Run Stat Error: Bad value %u\n", nr_run_stat);
-				break;
-		}
-	}
 	if (num_online_cpus() >= 2 && rq_info.rq_avg > 38)
 		rq_persist_count++;
 	else
@@ -1483,9 +1371,6 @@ static void do_dbs_timer(struct work_struct *work)
 	}
 	else
 		lmf_browsing_state = true;
-
-#endif
-
 	//pr_info("Run Queue Average: %u\n", rq_info.rq_avg);
 
 #ifdef CONFIG_CPUFREQ_LIMIT_MAX_FREQ
@@ -1497,12 +1382,6 @@ static void do_dbs_timer(struct work_struct *work)
 			{
 				pr_warn("LMF: disabled!\n");
 				lmf_old_state = false;
-#if 0
-				/* wake up the 2nd core */
-				if (num_online_cpus() < 2)
-					cpu_up(1);
-#endif
-
 			}
 
 			if (!active_state)
@@ -1623,11 +1502,7 @@ static void do_dbs_timer(struct work_struct *work)
 								msecs_limit_total = 0;
 								load_limit_index = 0;
 								active_state = false;
-#if 0
-								/* wake up the 2nd core */
-								if (num_online_cpus() < 2)
-									cpu_up(1);
-#endif
+
 								/* set freq to 1.0GHz */
 								pr_info("LMF: CPU0 set max freq to: %lu\n", lmf_inactive_max_limit);
 								cpufreq_set_limits(BOOT_CPU, SET_MAX, lmf_inactive_max_limit);
@@ -1648,12 +1523,6 @@ static void do_dbs_timer(struct work_struct *work)
 							else
 							{
 								msecs_limit_total = ACTIVE_DURATION_MSEC; // to prevent overflow
-#if 0
-								/* take 2nd core offline */
-								if (num_online_cpus() > 1)
-									cpu_down(1);
-#endif
-
 							}
 						}
 					}
-- 
1.7.9.5

