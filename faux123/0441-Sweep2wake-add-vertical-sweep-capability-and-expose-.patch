From 2a77a58a619466503ccd8bb851a5fa6847fc39e0 Mon Sep 17 00:00:00 2001
From: Paul Reioux <reioux@gmail.com>
Date: Tue, 19 Nov 2013 01:36:53 -0600
Subject: [PATCH 441/507] Sweep2wake: add vertical sweep capability and expose
 tunables to userspace

HUGE thanks to Dennis Rassmann <showp1984@gmail.com> for his original
sweep2wake contribution!

Signed-off-by: Paul Reioux <reioux@gmail.com>
Signed-off-by: Simarpreet Singh <simar@linux.com>
---
 drivers/input/touchscreen/sweep2wake.c |  256 +++++++++++++++++++++++++++-----
 1 file changed, 216 insertions(+), 40 deletions(-)

diff --git a/drivers/input/touchscreen/sweep2wake.c b/drivers/input/touchscreen/sweep2wake.c
index fd50da5..46a1a52 100644
--- a/drivers/input/touchscreen/sweep2wake.c
+++ b/drivers/input/touchscreen/sweep2wake.c
@@ -17,6 +17,9 @@
  * You should have received a copy of the GNU General Public License along
  * with this program; if not, write to the Free Software Foundation, Inc.,
  * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ *
+ * 11/18/2013 - port my N4's vertical sweep to N5
+ * 		Paul Reioux <reioux@gmail.com>
  */
 
 #include <linux/kernel.h>
@@ -54,12 +57,12 @@ MODULE_LICENSE("GPLv2");
 
 #ifdef CONFIG_MACH_MSM8974_HAMMERHEAD
 /* Hammerhead aka Nexus 5 */
-#define S2W_Y_MAX               1920
-#define S2W_X_MAX               1080
-#define S2W_Y_LIMIT             S2W_Y_MAX-130
-#define S2W_X_B1                400
-#define S2W_X_B2                700
-#define S2W_X_FINAL             250
+#define DEFAULT_S2W_Y_MAX               1920
+#define DEFAULT_S2W_X_MAX               1080
+#define DEFAULT_S2W_Y_LIMIT             DEFAULT_S2W_Y_MAX-130
+#define DEFAULT_S2W_X_B1                400
+#define DEFAULT_S2W_X_B2                700
+#define DEFAULT_S2W_X_FINAL             250
 #else
 /* defaults */
 #define S2W_Y_LIMIT             2350
@@ -82,6 +85,14 @@ static DEFINE_MUTEX(pwrkeyworklock);
 static struct workqueue_struct *s2w_input_wq;
 static struct work_struct s2w_input_work;
 
+static int s2w_start_posn = DEFAULT_S2W_X_B1;
+static int s2w_mid_posn = DEFAULT_S2W_X_B2;
+static int s2w_end_posn = (DEFAULT_S2W_X_MAX - DEFAULT_S2W_X_FINAL);
+static int s2w_threshold = DEFAULT_S2W_X_FINAL;
+//static int s2w_max_posn = DEFAULT_S2W_X_MAX;
+
+static int s2w_swap_coord = 0;
+
 /* Read cmdline for s2w */
 static int __init read_s2w_cmdline(char *s2w)
 {
@@ -128,34 +139,41 @@ static void sweep2wake_reset(void) {
 }
 
 /* Sweep2wake main function */
-static void detect_sweep2wake(int x, int y, bool st)
+static void detect_sweep2wake(int sweep_coord, int sweep_height, bool st)
 {
-        int prevx = 0, nextx = 0;
-        bool single_touch = st;
+	int swap_temp1, swap_temp2;
+	int prev_coord = 0, next_coord = 0;
+	bool single_touch = st;
 #if S2W_DEBUG
         pr_info(LOGTAG"x,y(%4d,%4d) single:%s\n",
                 x, y, (single_touch) ? "true" : "false");
 #endif
-	//left->right
+	if (s2w_swap_coord == 1) {
+		//swap the coordinate system
+		swap_temp1 = sweep_coord;
+		swap_temp2 = sweep_height;
+
+		sweep_height = swap_temp1;
+		sweep_coord = swap_temp2;
+	}
+
+	//power on
 	if ((single_touch) && (scr_suspended == true) && (s2w_switch > 0)) {
-		prevx = 0;
-		nextx = S2W_X_B1;
+		prev_coord = 0;
+		next_coord = s2w_start_posn;
 		if ((barrier[0] == true) ||
-		   ((x > prevx) &&
-		    (x < nextx) &&
-		    (y > 0))) {
-			prevx = nextx;
-			nextx = S2W_X_B2;
+		   ((sweep_coord > prev_coord) &&
+		    (sweep_coord < next_coord))) {
+			prev_coord = next_coord;
+			next_coord = s2w_mid_posn;
 			barrier[0] = true;
 			if ((barrier[1] == true) ||
-			   ((x > prevx) &&
-			    (x < nextx) &&
-			    (y > 0))) {
-				prevx = nextx;
+			   ((sweep_coord > prev_coord) &&
+			    (sweep_coord < next_coord))) {
+				prev_coord = next_coord;
 				barrier[1] = true;
-				if ((x > prevx) &&
-				    (y > 0)) {
-					if (x > (S2W_X_MAX - S2W_X_FINAL)) {
+				if ((sweep_coord > prev_coord)) {
+					if (sweep_coord > s2w_end_posn) {
 						if (exec_count) {
 							pr_info(LOGTAG"ON\n");
 							sweep2wake_pwrtrigger();
@@ -165,27 +183,36 @@ static void detect_sweep2wake(int x, int y, bool st)
 				}
 			}
 		}
-	//right->left
+	//power off
 	} else if ((single_touch) && (scr_suspended == false) && (s2w_switch > 0)) {
+		if (s2w_swap_coord == 1) {
+			//swap back for off scenario ONLY
+			swap_temp1 = sweep_coord;
+			swap_temp2 = sweep_height;
+
+			sweep_height = swap_temp1;
+			sweep_coord = swap_temp2;
+		}
+
 		scr_on_touch=true;
-		prevx = (S2W_X_MAX - S2W_X_FINAL);
-		nextx = S2W_X_B2;
+		prev_coord = (DEFAULT_S2W_X_MAX - DEFAULT_S2W_X_FINAL);
+		next_coord = DEFAULT_S2W_X_B2;
 		if ((barrier[0] == true) ||
-		   ((x < prevx) &&
-		    (x > nextx) &&
-		    (y > S2W_Y_LIMIT))) {
-			prevx = nextx;
-			nextx = S2W_X_B1;
+		   ((sweep_coord < prev_coord) &&
+		    (sweep_coord > next_coord) &&
+		    (sweep_height > DEFAULT_S2W_Y_LIMIT))) {
+			prev_coord = next_coord;
+			next_coord = DEFAULT_S2W_X_B1;
 			barrier[0] = true;
 			if ((barrier[1] == true) ||
-			   ((x < prevx) &&
-			    (x > nextx) &&
-			    (y > S2W_Y_LIMIT))) {
-				prevx = nextx;
+			   ((sweep_coord < prev_coord) &&
+			    (sweep_coord > next_coord) &&
+			    (sweep_height > DEFAULT_S2W_Y_LIMIT))) {
+				prev_coord = next_coord;
 				barrier[1] = true;
-				if ((x < prevx) &&
-				    (y > S2W_Y_LIMIT)) {
-					if (x < S2W_X_FINAL) {
+				if ((sweep_coord < prev_coord) &&
+				    (sweep_height > DEFAULT_S2W_Y_LIMIT)) {
+					if (sweep_coord < DEFAULT_S2W_X_FINAL) {
 						if (exec_count) {
 							pr_info(LOGTAG"OFF\n");
 							sweep2wake_pwrtrigger();
@@ -198,6 +225,141 @@ static void detect_sweep2wake(int x, int y, bool st)
 	}
 }
 
+/****************** SYSFS INTERFACE (START) ********************/
+static ssize_t s2w_start_posn_show(struct kobject *kobj,
+	struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%i\n", s2w_start_posn);
+}
+
+static ssize_t s2w_start_posn_store(struct kobject *kobj,
+	struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int data;
+	if(sscanf(buf, "%i\n", &data) == 1)
+		s2w_start_posn = data;
+	else
+		pr_info("%s: unknown input!\n", __FUNCTION__);
+	return count;
+}
+
+static ssize_t s2w_mid_posn_show(struct kobject *kobj,
+	struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%i\n", s2w_mid_posn);
+}
+
+static ssize_t s2w_mid_posn_store(struct kobject *kobj,
+	struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int data;
+	if(sscanf(buf, "%i\n", &data) == 1)
+		s2w_mid_posn = data;
+	else
+		pr_info("%s: unknown input!\n", __FUNCTION__);
+	return count;
+}
+
+static ssize_t s2w_end_posn_show(struct kobject *kobj,
+	struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%i\n", s2w_end_posn);
+}
+
+static ssize_t s2w_end_posn_store(struct kobject *kobj,
+	struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int data;
+	if(sscanf(buf, "%i\n", &data) == 1)
+		s2w_end_posn = data;
+	else
+		pr_info("%s: unknown input!\n", __FUNCTION__);
+	return count;
+}
+
+static ssize_t s2w_threshold_show(struct kobject *kobj,
+	struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%i\n", s2w_threshold);
+}
+
+static ssize_t s2w_threshold_store(struct kobject *kobj,
+	struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int data;
+	if(sscanf(buf, "%i\n", &data) == 1)
+		s2w_threshold = data;
+	else
+		pr_info("%s: unknown input!\n", __FUNCTION__);
+	return count;
+}
+
+static ssize_t s2w_swap_coord_show(struct kobject *kobj,
+	struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%i\n", s2w_swap_coord);
+}
+
+static ssize_t s2w_swap_coord_store(struct kobject *kobj,
+	struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int data;
+	if(sscanf(buf, "%i\n", &data) == 1)
+		s2w_swap_coord = data;
+	else
+		pr_info("%s: unknown input!\n", __FUNCTION__);
+	return count;
+}
+
+static struct kobj_attribute s2w_start_posn_attribute =
+	__ATTR(s2w_start_posn,
+		0666,
+		s2w_start_posn_show,
+		s2w_start_posn_store);
+
+static struct kobj_attribute s2w_mid_posn_attribute =
+	__ATTR(s2w_mid_posn,
+		0666,
+		s2w_mid_posn_show,
+		s2w_mid_posn_store);
+
+static struct kobj_attribute s2w_end_posn_attribute =
+	__ATTR(s2w_end_posn,
+		0666,
+		s2w_end_posn_show,
+		s2w_end_posn_store);
+
+static struct kobj_attribute s2w_threshold_attribute =
+	__ATTR(s2w_threshold,
+		0666,
+		s2w_threshold_show,
+		s2w_threshold_store);
+
+static struct kobj_attribute s2w_swap_coord_attribute =
+	__ATTR(s2w_swap_coord,
+		0666,
+		s2w_swap_coord_show,
+		s2w_swap_coord_store);
+
+static struct attribute *s2w_parameters_attrs[] =
+	{
+		&s2w_start_posn_attribute.attr,
+		&s2w_mid_posn_attribute.attr,
+		&s2w_end_posn_attribute.attr,
+		&s2w_threshold_attribute.attr,
+		&s2w_swap_coord_attribute.attr,
+		NULL,
+	};
+
+static struct attribute_group s2w_parameters_attr_group =
+	{
+		.attrs = s2w_parameters_attrs,
+	};
+
+static struct kobject *s2w_parameters_kobj;
+/****************** SYSFS INTERFACE (END) ********************/
+
+
 static void s2w_input_callback(struct work_struct *unused) {
 
 	detect_sweep2wake(touch_x, touch_y, true);
@@ -382,9 +544,24 @@ extern struct kobject *android_touch_kobj;
 static struct kobject *android_touch_kobj;
 EXPORT_SYMBOL_GPL(android_touch_kobj);
 #endif
+
 static int __init sweep2wake_init(void)
 {
 	int rc = 0;
+	int sysfs_result;
+
+	s2w_parameters_kobj = kobject_create_and_add("s2w_parameters", kernel_kobj);
+	if (!s2w_parameters_kobj) {
+		pr_err("%s kobject create failed!\n", __FUNCTION__);
+		return -ENOMEM;
+        }
+
+	sysfs_result = sysfs_create_group(s2w_parameters_kobj, &s2w_parameters_attr_group);
+
+    if (sysfs_result) {
+		pr_info("%s sysfs create failed!\n", __FUNCTION__);
+		kobject_put(s2w_parameters_kobj);
+	}
 
 	sweep2wake_pwrdev = input_allocate_device();
 	if (!sweep2wake_pwrdev) {
@@ -461,4 +638,3 @@ static void __exit sweep2wake_exit(void)
 
 module_init(sweep2wake_init);
 module_exit(sweep2wake_exit);
-
-- 
1.7.9.5

